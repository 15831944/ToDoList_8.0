// KanbanTreeList.h: interface for the CKanbanTreeList class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_KanbanTREELISTCTRL_H__016B94F3_1D28_4532_97EF_95F1D9D5CE55__INCLUDED_)
#define AFX_KanbanTREELISTCTRL_H__016B94F3_1D28_4532_97EF_95F1D9D5CE55__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include "Kanbanstruct.h"
#include "Kanbanenum.h"
#include "Kanbanlistctrl.h"

#include "..\shared\graphicsmisc.h"
#include "..\shared\fontcache.h"

#include "..\Interfaces\itasklist.h"
#include "..\Interfaces\iuiextension.h"

/////////////////////////////////////////////////////////////////////////////

// WPARAM = , LPARAM = LPCTSTR
const UINT WM_KBC_STATUSCHANGE = ::RegisterWindowMessage(_T("WM_KBC_STATUSCHANGE"));

// WPARAM = , LPARAM = 
const UINT WM_KBC_SELECTIONCHANGE = ::RegisterWindowMessage(_T("WM_KBC_SELECTIONCHANGE"));

// WPARAM = , LPARAM = 
const UINT WM_KBC_NOTIFYSORT = ::RegisterWindowMessage(_T("WM_KBC_NOTIFYSORT"));

/////////////////////////////////////////////////////////////////////////////

class CThemed;

/////////////////////////////////////////////////////////////////////////////

class CKanbanCtrl : public CWnd  
{
public:
	CKanbanCtrl();
	virtual ~CKanbanCtrl();

	BOOL Create(DWORD dwStyle, const RECT &rect, CWnd* pParentWnd, UINT nID);

	void UpdateTasks(const ITaskList* pTasks, IUI_UPDATETYPE nUpdate, IUI_ATTRIBUTEEDIT nEditAttribute);
	bool PrepareNewTask(ITaskList* pTask) const;

	int GetSelectedTaskIDs(CDWordArray& aTaskIDs) const;
	BOOL SelectTask(DWORD dwTaskID);
	BOOL SelectTasks(const CDWordArray& aTaskIDs);

	DWORD HitTestTask(const CPoint& ptScreen) const;

	void ResizeColumnsToFit();
	void ScrollToSelectedTask();

	void SetOption(DWORD dwOption, BOOL bSet = TRUE);
	BOOL HasOption(DWORD dwOption) const { return (m_dwOptions & dwOption); }

	BOOL CancelOperation();
	void SetReadOnly(bool bReadOnly) { m_bReadOnly = bReadOnly; }
	BOOL GetLabelEditRect(LPRECT pEdit);
	void SetDoneTaskAttributes(COLORREF color, BOOL bStrikeThru);
	void SetDisplay(DWORD dwDisplay);

 	int GetColumnOrder(CStringArray& aOrder) const;
 	BOOL SetColumnOrder(const CStringArray& aOrder);

	BOOL TrackAttribute(IUI_ATTRIBUTEEDIT nAttrib, const CString& sCustomAttribID, const CKanbanColumnArray& aColumnDefs);

	static BOOL WantAttributeUpdate(IUI_ATTRIBUTEEDIT nEditAttribute);

protected:
	BOOL m_bDragging;
	BOOL m_bReadOnly;
	BOOL m_bSortAscending;
	COLORREF m_crDone;
	DWORD m_dwOptions;
	CImageList m_ilHeight;
	UINT m_nNextColor;
	IUI_ATTRIBUTEEDIT m_nTrackAttribute;
	CString m_sTrackAttribID;
	CFontCache m_fonts;

	CArray<int, int> m_aDragItems;
	CKanbanListCtrl* m_pDragFromList;
	CKanbanListCtrl* m_pSelectedList;

	CKanbanItemMap m_data;
	CKanbanListCtrlArray m_aListCtrls;
	CKanbanColumnArray m_aColumnDefs;

protected:
	// Generated message map functions
	afx_msg void OnSize(UINT nType, int cx, int cy);
	afx_msg BOOL OnEraseBkgnd(CDC* pDC);
	afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);
	afx_msg void OnCustomDrawList(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnListClick(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnListItemChange(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnBeginDragListItem(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnListSetFocus(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnLButtonUp(UINT nFlags, CPoint point);
	afx_msg void OnMouseMove(UINT nFlags, CPoint point);
	afx_msg void OnSetFocus(CWnd* );
	
	DECLARE_MESSAGE_MAP()

	BOOL DrawListItemColumn(CDC* pDC, int nItem, int nCol, DWORD dwTaskID, BOOL bSelected);
	GM_ITEMSTATE GetItemState(int nItem) const;
	
	void RedrawList(BOOL bErase = FALSE);
	void RebuildListCtrls();
	void RemoveDeletedTasks(const ITaskList12* pTasks);
	void Resize();
	void Resize(const CRect& rect);
	void ClearOtherListSelections(const CKanbanListCtrl* pList);

	KANBANITEM* GetKanbanItem(DWORD dwTaskID) const;
	BOOL HasKanbanItem(DWORD dwTaskID) const;

	CKanbanListCtrl* LocateTask(DWORD dwTaskID) const;
	CKanbanListCtrl* LocateTask(DWORD dwTaskID, int& nItem) const;
	CKanbanListCtrl* GetListCtrl(const CString& sAttribValue) const;
	CKanbanListCtrl* GetListCtrl(HWND hwnd) const;
	CKanbanListCtrl* HitTestListCtrl(const CPoint& ptScreen) const;

	CKanbanListCtrl* NewListCtrl(const KANBANCOLUMN& colDef);
	CKanbanListCtrl* GetSelListCtrl();
	const CKanbanListCtrl* GetSelListCtrl() const;

	DWORD GetTaskID(HTREEITEM hti) const;
	DWORD GetTaskID(int nItem) const;
	DWORD GetListTaskID(DWORD nItemData) const;
	
	BOOL IsDragging() const;
	void NotifyParentAttibuteChange(LPCTSTR szStatus);
	void NotifyParentSelectionChange();
	BOOL GetListCtrlAttributeValue(CKanbanListCtrl* pDestList, const CPoint& ptScreen, CString& sValue);

	BOOL UpdateData(const ITaskList12* pTasks, HTASKITEM hTask, IUI_UPDATETYPE nUpdate, IUI_ATTRIBUTEEDIT nEditAttribute, BOOL bAndSiblings);
	BOOL RebuildData(const ITaskList12* pTasks);
	BOOL AddTaskToData(const ITaskList12* pTasks, HTASKITEM hTask);

	static int CALLBACK SortProc(LPARAM lParam1, LPARAM lParam2, LPARAM lParamSort);
	static COLORREF GetColor(COLORREF crBase, double dLighter, BOOL bSelected);
	static CString GetTaskAllocTo(const ITaskList12* pTasks, HTASKITEM hTask);
	static BOOL WantAttributeUpdate(int nEditAttrib, int nAttribMask);
	static int Compare(const CString& sText1, const CString& sText2);
	static BOOL RebuildListContents(CKanbanListCtrl* pList, const CKanbanItemArrayMap& mapKIArray);

	static int ListSortProc(const void* pV1, const void* pV2);

};

#endif // !defined(AFX_KanbanTREELIST_H__016B94F3_1D28_4532_97EF_95F1D9D5CE55__INCLUDED_)
