; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	D:\_code\RTFContentCtrl\RRECRuler.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG171899 DB	'E', 00H, 'D', 00H, 'I', 00H, 'T', 00H, 00H, 00H
	ORG $+2
$SG171933 DB	'%', 00H, 'i', 00H, 00H, 00H
	ORG $+2
$SG171951 DB	'%', 00H, 'i', 00H, 00H, 00H
CONST	ENDS
_DATA	SEGMENT
_THIS_FILE DB	'RRECRuler.cpp', 00H
_DATA	ENDS
PUBLIC	??_7CRRECRuler@@6B@				; CRRECRuler::`vftable'
PUBLIC	??0CRRECRuler@@QAE@XZ				; CRRECRuler::CRRECRuler
PUBLIC	??_R4CRRECRuler@@6B@				; CRRECRuler::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCRRECRuler@@@8				; CRRECRuler `RTTI Type Descriptor'
PUBLIC	??_R3CRRECRuler@@8				; CRRECRuler::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CRRECRuler@@8				; CRRECRuler::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CRRECRuler@@8			; CRRECRuler::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CWnd@@8				; CWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCWnd@@@8				; CWnd `RTTI Type Descriptor'
PUBLIC	??_R3CWnd@@8					; CWnd::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CWnd@@8					; CWnd::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCmdTarget@@8			; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCCmdTarget@@@8				; CCmdTarget `RTTI Type Descriptor'
PUBLIC	??_R3CCmdTarget@@8				; CCmdTarget::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCmdTarget@@8				; CCmdTarget::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	?GetMessageMap@CRRECRuler@@MBEPBUAFX_MSGMAP@@XZ	; CRRECRuler::GetMessageMap
PUBLIC	?Create@CRRECRuler@@UAEHABVCRect@@PAVCWnd@@I@Z	; CRRECRuler::Create
EXTRN	??1CDWordArray@@UAE@XZ:PROC			; CDWordArray::~CDWordArray
EXTRN	??1CWnd@@UAE@XZ:PROC				; CWnd::~CWnd
EXTRN	__imp__GetSysColor@4:PROC
EXTRN	?IsMetricMeasurementSystem@Misc@@YAHXZ:PROC	; Misc::IsMetricMeasurementSystem
EXTRN	??0CDWordArray@@QAE@XZ:PROC			; CDWordArray::CDWordArray
EXTRN	??0CWnd@@QAE@XZ:PROC				; CWnd::CWnd
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ:PROC ; CWnd::GetRuntimeClass
EXTRN	??_ECRRECRuler@@UAEPAXI@Z:PROC			; CRRECRuler::`vector deleting destructor'
EXTRN	?Serialize@CObject@@UAEXAAVCArchive@@@Z:PROC	; CObject::Serialize
EXTRN	?AssertValid@CWnd@@UBEXXZ:PROC			; CWnd::AssertValid
EXTRN	?Dump@CWnd@@UBEXAAVCDumpContext@@@Z:PROC	; CWnd::Dump
EXTRN	?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:PROC ; CCmdTarget::OnCmdMsg
EXTRN	?OnFinalRelease@CWnd@@UAEXXZ:PROC		; CWnd::OnFinalRelease
EXTRN	?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:PROC	; CCmdTarget::IsInvokeAllowed
EXTRN	?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:PROC ; CCmdTarget::GetDispatchIID
EXTRN	?GetTypeInfoCount@CCmdTarget@@UAEIXZ:PROC	; CCmdTarget::GetTypeInfoCount
EXTRN	?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:PROC ; CCmdTarget::GetTypeLibCache
EXTRN	?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:PROC ; CCmdTarget::GetTypeLib
EXTRN	?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:PROC ; CCmdTarget::GetCommandMap
EXTRN	?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:PROC ; CCmdTarget::GetDispatchMap
EXTRN	?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:PROC ; CCmdTarget::GetConnectionMap
EXTRN	?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ:PROC ; CWnd::GetInterfaceMap
EXTRN	?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ:PROC ; CCmdTarget::GetEventSinkMap
EXTRN	?OnCreateAggregates@CCmdTarget@@UAEHXZ:PROC	; CCmdTarget::OnCreateAggregates
EXTRN	?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:PROC ; CCmdTarget::GetInterfaceHook
EXTRN	?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:PROC ; CCmdTarget::GetExtraConnectionPoints
EXTRN	?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:PROC ; CCmdTarget::GetConnectionHook
EXTRN	?PreSubclassWindow@CWnd@@UAEXXZ:PROC		; CWnd::PreSubclassWindow
EXTRN	?Create@CWnd@@UAEHPB_W0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z:PROC ; CWnd::Create
EXTRN	?CreateEx@CWnd@@UAEHKPB_W0KABUtagRECT@@PAV1@IPAX@Z:PROC ; CWnd::CreateEx
EXTRN	?CreateEx@CWnd@@UAEHKPB_W0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z:PROC ; CWnd::CreateEx
EXTRN	?DestroyWindow@CWnd@@UAEHXZ:PROC		; CWnd::DestroyWindow
EXTRN	?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTW@@@Z:PROC ; CWnd::PreCreateWindow
EXTRN	?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z:PROC	; CWnd::CalcWindowRect
EXTRN	?GetMenu@CWnd@@UBEPAVCMenu@@XZ:PROC		; CWnd::GetMenu
EXTRN	?SetMenu@CWnd@@UAEHPAVCMenu@@@Z:PROC		; CWnd::SetMenu
EXTRN	?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOW@@@Z:PROC ; CWnd::OnToolHitTest
EXTRN	?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z:PROC ; CWnd::GetScrollBarCtrl
EXTRN	?WinHelpW@CWnd@@UAEXKI@Z:PROC			; CWnd::WinHelpW
EXTRN	?HtmlHelpW@CWnd@@UAEXKI@Z:PROC			; CWnd::HtmlHelpW
EXTRN	?WinHelpInternal@CWnd@@UAEXKI@Z:PROC		; CWnd::WinHelpInternal
EXTRN	?ContinueModal@CWnd@@UAEHXZ:PROC		; CWnd::ContinueModal
EXTRN	?EndModalLoop@CWnd@@UAEXH@Z:PROC		; CWnd::EndModalLoop
EXTRN	?OnDrawIconicThumbnailOrLivePreview@CWnd@@UAEXAAVCDC@@VCRect@@VCSize@@HAAH@Z:PROC ; CWnd::OnDrawIconicThumbnailOrLivePreview
EXTRN	?EnsureStdObj@CWnd@@UAEJXZ:PROC			; CWnd::EnsureStdObj
EXTRN	?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z:PROC ; CWnd::get_accParent
EXTRN	?get_accChildCount@CWnd@@UAEJPAJ@Z:PROC		; CWnd::get_accChildCount
EXTRN	?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z:PROC ; CWnd::get_accChild
EXTRN	?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accName
EXTRN	?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accValue
EXTRN	?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accDescription
EXTRN	?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::get_accRole
EXTRN	?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::get_accState
EXTRN	?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accHelp
EXTRN	?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z:PROC ; CWnd::get_accHelpTopic
EXTRN	?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accKeyboardShortcut
EXTRN	?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z:PROC	; CWnd::get_accFocus
EXTRN	?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z:PROC ; CWnd::get_accSelection
EXTRN	?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z:PROC ; CWnd::get_accDefaultAction
EXTRN	?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z:PROC	; CWnd::accSelect
EXTRN	?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z:PROC ; CWnd::accLocation
EXTRN	?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z:PROC ; CWnd::accNavigate
EXTRN	?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z:PROC	; CWnd::accHitTest
EXTRN	?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z:PROC ; CWnd::accDoDefaultAction
EXTRN	?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z:PROC	; CWnd::put_accName
EXTRN	?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z:PROC ; CWnd::put_accValue
EXTRN	?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z:PROC ; CWnd::SetProxy
EXTRN	?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z:PROC	; CWnd::CreateAccessibleProxy
EXTRN	?OnCommand@CWnd@@MAEHIJ@Z:PROC			; CWnd::OnCommand
EXTRN	?OnNotify@CWnd@@MAEHIJPAJ@Z:PROC		; CWnd::OnNotify
EXTRN	?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ:PROC ; CWnd::GetSuperWndProcAddr
EXTRN	?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z:PROC ; CWnd::DoDataExchange
EXTRN	?BeginModalState@CWnd@@UAEXXZ:PROC		; CWnd::BeginModalState
EXTRN	?EndModalState@CWnd@@UAEXXZ:PROC		; CWnd::EndModalState
EXTRN	?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z:PROC ; CWnd::PreTranslateMessage
EXTRN	?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z:PROC ; CWnd::OnAmbientProperty
EXTRN	?WindowProc@CWnd@@MAEJIIJ@Z:PROC		; CWnd::WindowProc
EXTRN	?OnWndMsg@CWnd@@MAEHIIJPAJ@Z:PROC		; CWnd::OnWndMsg
EXTRN	?DefWindowProcW@CWnd@@MAEJIIJ@Z:PROC		; CWnd::DefWindowProcW
EXTRN	?PostNcDestroy@CWnd@@MAEXXZ:PROC		; CWnd::PostNcDestroy
EXTRN	?OnChildNotify@CWnd@@MAEHIIJPAJ@Z:PROC		; CWnd::OnChildNotify
EXTRN	?OnTouchInputs@CWnd@@MAEHIPAUtagTOUCHINPUT@@@Z:PROC ; CWnd::OnTouchInputs
EXTRN	?OnTouchInput@CWnd@@MAEHVCPoint@@HHPAUtagTOUCHINPUT@@@Z:PROC ; CWnd::OnTouchInput
EXTRN	?GetGestureStatus@CWnd@@MAEKVCPoint@@@Z:PROC	; CWnd::GetGestureStatus
EXTRN	?OnGestureZoom@CWnd@@MAEHVCPoint@@J@Z:PROC	; CWnd::OnGestureZoom
EXTRN	?OnGesturePan@CWnd@@MAEHVCPoint@@0@Z:PROC	; CWnd::OnGesturePan
EXTRN	?OnGestureRotate@CWnd@@MAEHVCPoint@@N@Z:PROC	; CWnd::OnGestureRotate
EXTRN	?OnGestureTwoFingerTap@CWnd@@MAEHVCPoint@@@Z:PROC ; CWnd::OnGestureTwoFingerTap
EXTRN	?OnGesturePressAndTap@CWnd@@MAEHVCPoint@@J@Z:PROC ; CWnd::OnGesturePressAndTap
EXTRN	?CheckAutoCenter@CWnd@@UAEHXZ:PROC		; CWnd::CheckAutoCenter
EXTRN	?IsFrameWnd@CWnd@@UBEHXZ:PROC			; CWnd::IsFrameWnd
EXTRN	?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z:PROC ; CWnd::CreateControlContainer
EXTRN	?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z:PROC ; CWnd::CreateControlSite
EXTRN	?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z:PROC ; CWnd::SetOccDialogInfo
EXTRN	?GetOccDialogInfo@CWnd@@MAEPAU_AFX_OCC_DIALOG_INFO@@XZ:PROC ; CWnd::GetOccDialogInfo
;	COMDAT ??_R2CObject@@8
; File d:\_code\rtfcontentctrl\rrecruler.cpp
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
_DATA	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R2CCmdTarget@@8
rdata$r	SEGMENT
??_R2CCmdTarget@@8 DD FLAT:??_R1A@?0A@EA@CCmdTarget@@8	; CCmdTarget::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CCmdTarget@@8
rdata$r	SEGMENT
??_R3CCmdTarget@@8 DD 00H				; CCmdTarget::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CCmdTarget@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
_DATA	SEGMENT
??_R0?AVCCmdTarget@@@8 DD FLAT:??_7type_info@@6B@	; CCmdTarget `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCmdTarget@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CCmdTarget@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCmdTarget@@8 DD FLAT:??_R0?AVCCmdTarget@@@8 ; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCmdTarget@@8
rdata$r	ENDS
;	COMDAT ??_R2CWnd@@8
rdata$r	SEGMENT
??_R2CWnd@@8 DD	FLAT:??_R1A@?0A@EA@CWnd@@8		; CWnd::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CWnd@@8
rdata$r	SEGMENT
??_R3CWnd@@8 DD	00H					; CWnd::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CWnd@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCWnd@@@8
_DATA	SEGMENT
??_R0?AVCWnd@@@8 DD FLAT:??_7type_info@@6B@		; CWnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCWnd@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CWnd@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CWnd@@8 DD FLAT:??_R0?AVCWnd@@@8		; CWnd::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CWnd@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CRRECRuler@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CRRECRuler@@8 DD FLAT:??_R0?AVCRRECRuler@@@8 ; CRRECRuler::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CRRECRuler@@8
rdata$r	ENDS
;	COMDAT ??_R2CRRECRuler@@8
rdata$r	SEGMENT
??_R2CRRECRuler@@8 DD FLAT:??_R1A@?0A@EA@CRRECRuler@@8	; CRRECRuler::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CWnd@@8
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CRRECRuler@@8
rdata$r	SEGMENT
??_R3CRRECRuler@@8 DD 00H				; CRRECRuler::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CRRECRuler@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCRRECRuler@@@8
_DATA	SEGMENT
??_R0?AVCRRECRuler@@@8 DD FLAT:??_7type_info@@6B@	; CRRECRuler `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCRRECRuler@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CRRECRuler@@6B@
rdata$r	SEGMENT
??_R4CRRECRuler@@6B@ DD 00H				; CRRECRuler::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCRRECRuler@@@8
	DD	FLAT:??_R3CRRECRuler@@8
rdata$r	ENDS
;	COMDAT ??_7CRRECRuler@@6B@
CONST	SEGMENT
??_7CRRECRuler@@6B@ DD FLAT:??_R4CRRECRuler@@6B@	; CRRECRuler::`vftable'
	DD	FLAT:?GetRuntimeClass@CWnd@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECRRECRuler@@UAEPAXI@Z
	DD	FLAT:?Serialize@CObject@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CWnd@@UBEXXZ
	DD	FLAT:?Dump@CWnd@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CCmdTarget@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CWnd@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CRRECRuler@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CWnd@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?PreSubclassWindow@CWnd@@UAEXXZ
	DD	FLAT:?Create@CWnd@@UAEHPB_W0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPB_W0KABUtagRECT@@PAV1@IPAX@Z
	DD	FLAT:?CreateEx@CWnd@@UAEHKPB_W0KHHHHPAUHWND__@@PAUHMENU__@@PAX@Z
	DD	FLAT:?DestroyWindow@CWnd@@UAEHXZ
	DD	FLAT:?PreCreateWindow@CWnd@@UAEHAAUtagCREATESTRUCTW@@@Z
	DD	FLAT:?CalcWindowRect@CWnd@@UAEXPAUtagRECT@@I@Z
	DD	FLAT:?GetMenu@CWnd@@UBEPAVCMenu@@XZ
	DD	FLAT:?SetMenu@CWnd@@UAEHPAVCMenu@@@Z
	DD	FLAT:?OnToolHitTest@CWnd@@UBEHVCPoint@@PAUtagTOOLINFOW@@@Z
	DD	FLAT:?GetScrollBarCtrl@CWnd@@UBEPAVCScrollBar@@H@Z
	DD	FLAT:?WinHelpW@CWnd@@UAEXKI@Z
	DD	FLAT:?HtmlHelpW@CWnd@@UAEXKI@Z
	DD	FLAT:?WinHelpInternal@CWnd@@UAEXKI@Z
	DD	FLAT:?ContinueModal@CWnd@@UAEHXZ
	DD	FLAT:?EndModalLoop@CWnd@@UAEXH@Z
	DD	FLAT:?OnDrawIconicThumbnailOrLivePreview@CWnd@@UAEXAAVCDC@@VCRect@@VCSize@@HAAH@Z
	DD	FLAT:?EnsureStdObj@CWnd@@UAEJXZ
	DD	FLAT:?get_accParent@CWnd@@UAEJPAPAUIDispatch@@@Z
	DD	FLAT:?get_accChildCount@CWnd@@UAEJPAJ@Z
	DD	FLAT:?get_accChild@CWnd@@UAEJUtagVARIANT@@PAPAUIDispatch@@@Z
	DD	FLAT:?get_accName@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accValue@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accDescription@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accRole@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accState@CWnd@@UAEJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?get_accHelp@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accHelpTopic@CWnd@@UAEJPAPA_WUtagVARIANT@@PAJ@Z
	DD	FLAT:?get_accKeyboardShortcut@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?get_accFocus@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accSelection@CWnd@@UAEJPAUtagVARIANT@@@Z
	DD	FLAT:?get_accDefaultAction@CWnd@@UAEJUtagVARIANT@@PAPA_W@Z
	DD	FLAT:?accSelect@CWnd@@UAEJJUtagVARIANT@@@Z
	DD	FLAT:?accLocation@CWnd@@UAEJPAJ000UtagVARIANT@@@Z
	DD	FLAT:?accNavigate@CWnd@@UAEJJUtagVARIANT@@PAU2@@Z
	DD	FLAT:?accHitTest@CWnd@@UAEJJJPAUtagVARIANT@@@Z
	DD	FLAT:?accDoDefaultAction@CWnd@@UAEJUtagVARIANT@@@Z
	DD	FLAT:?put_accName@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?put_accValue@CWnd@@UAEJUtagVARIANT@@PA_W@Z
	DD	FLAT:?SetProxy@CWnd@@UAEJPAUIAccessibleProxy@@@Z
	DD	FLAT:?CreateAccessibleProxy@CWnd@@UAEJIJPAJ@Z
	DD	FLAT:?OnCommand@CWnd@@MAEHIJ@Z
	DD	FLAT:?OnNotify@CWnd@@MAEHIJPAJ@Z
	DD	FLAT:?GetSuperWndProcAddr@CWnd@@MAEPAP6GJPAUHWND__@@IIJ@ZXZ
	DD	FLAT:?DoDataExchange@CWnd@@MAEXPAVCDataExchange@@@Z
	DD	FLAT:?BeginModalState@CWnd@@UAEXXZ
	DD	FLAT:?EndModalState@CWnd@@UAEXXZ
	DD	FLAT:?PreTranslateMessage@CWnd@@UAEHPAUtagMSG@@@Z
	DD	FLAT:?OnAmbientProperty@CWnd@@UAEHPAVCOleControlSite@@JPAUtagVARIANT@@@Z
	DD	FLAT:?WindowProc@CWnd@@MAEJIIJ@Z
	DD	FLAT:?OnWndMsg@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?DefWindowProcW@CWnd@@MAEJIIJ@Z
	DD	FLAT:?PostNcDestroy@CWnd@@MAEXXZ
	DD	FLAT:?OnChildNotify@CWnd@@MAEHIIJPAJ@Z
	DD	FLAT:?OnTouchInputs@CWnd@@MAEHIPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?OnTouchInput@CWnd@@MAEHVCPoint@@HHPAUtagTOUCHINPUT@@@Z
	DD	FLAT:?GetGestureStatus@CWnd@@MAEKVCPoint@@@Z
	DD	FLAT:?OnGestureZoom@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?OnGesturePan@CWnd@@MAEHVCPoint@@0@Z
	DD	FLAT:?OnGestureRotate@CWnd@@MAEHVCPoint@@N@Z
	DD	FLAT:?OnGestureTwoFingerTap@CWnd@@MAEHVCPoint@@@Z
	DD	FLAT:?OnGesturePressAndTap@CWnd@@MAEHVCPoint@@J@Z
	DD	FLAT:?CheckAutoCenter@CWnd@@UAEHXZ
	DD	FLAT:?IsFrameWnd@CWnd@@UBEHXZ
	DD	FLAT:?CreateControlContainer@CWnd@@MAEHPAPAVCOleControlContainer@@@Z
	DD	FLAT:?CreateControlSite@CWnd@@MAEHPAVCOleControlContainer@@PAPAVCOleControlSite@@IABU_GUID@@@Z
	DD	FLAT:?SetOccDialogInfo@CWnd@@MAEHPAU_AFX_OCC_DIALOG_INFO@@@Z
	DD	FLAT:?GetOccDialogInfo@CWnd@@MAEPAU_AFX_OCC_DIALOG_INFO@@XZ
	DD	FLAT:?Create@CRRECRuler@@UAEHABVCRect@@PAVCWnd@@I@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CRRECRuler@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CRRECRuler@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CRRECRuler@@QAE@XZ$1
__ehfuncinfo$??0CRRECRuler@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CRRECRuler@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
;	COMDAT ??0CRRECRuler@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CRRECRuler@@QAE@XZ PROC				; CRRECRuler::CRRECRuler, COMDAT
; _this$ = ecx

; 52   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CRRECRuler@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CWnd@@QAE@XZ				; CWnd::CWnd
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CRRECRuler@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??0CDWordArray@@QAE@XZ			; CDWordArray::CDWordArray
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 53   : 	
; 54   : 	m_physicalInch = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+124], 0

; 55   : 	m_mode = Misc::IsMetricMeasurementSystem() ? MODE_METRIC : MODE_INCH; 	m_margin = 0;

	call	?IsMetricMeasurementSystem@Misc@@YAHXZ	; Misc::IsMetricMeasurementSystem
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+120], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+116], 0

; 56   : 	m_crBack = GetSysColor(COLOR_3DFACE);

	mov	esi, esp
	push	15					; 0000000fH
	call	DWORD PTR __imp__GetSysColor@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+148], eax

; 57   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CRRECRuler@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CWnd@@UAE@XZ				; CWnd::~CWnd
__unwindfunclet$??0CRRECRuler@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	jmp	??1CDWordArray@@UAE@XZ			; CDWordArray::~CDWordArray
__ehhandler$??0CRRECRuler@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-12]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CRRECRuler@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CRRECRuler@@QAE@XZ ENDP				; CRRECRuler::CRRECRuler
PUBLIC	??1CRRECRuler@@UAE@XZ				; CRRECRuler::~CRRECRuler
EXTRN	??3CObject@@SGXPAX@Z:PROC			; CObject::operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCRRECRuler@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCRRECRuler@@UAEPAXI@Z PROC				; CRRECRuler::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CRRECRuler@@UAE@XZ			; CRRECRuler::~CRRECRuler
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3CObject@@SGXPAX@Z			; CObject::operator delete
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCRRECRuler@@UAEPAXI@Z ENDP				; CRRECRuler::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CRRECRuler@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CRRECRuler@@UAE@XZ$0
__ehfuncinfo$??1CRRECRuler@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CRRECRuler@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CRRECRuler@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CRRECRuler@@UAE@XZ PROC				; CRRECRuler::~CRRECRuler, COMDAT
; _this$ = ecx

; 71   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CRRECRuler@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CRRECRuler@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 72   : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??1CDWordArray@@UAE@XZ			; CDWordArray::~CDWordArray
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CWnd@@UAE@XZ				; CWnd::~CWnd
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CRRECRuler@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CWnd@@UAE@XZ				; CWnd::~CWnd
__ehhandler$??1CRRECRuler@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CRRECRuler@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CRRECRuler@@UAE@XZ ENDP				; CRRECRuler::~CRRECRuler
PUBLIC	?GetThisMessageMap@CRRECRuler@@KGPBUAFX_MSGMAP@@XZ ; CRRECRuler::GetThisMessageMap
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetMessageMap@CRRECRuler@@MBEPBUAFX_MSGMAP@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMessageMap@CRRECRuler@@MBEPBUAFX_MSGMAP@@XZ PROC	; CRRECRuler::GetMessageMap, COMDAT
; _this$ = ecx

; 74   : BEGIN_MESSAGE_MAP(CRRECRuler, CWnd)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	call	?GetThisMessageMap@CRRECRuler@@KGPBUAFX_MSGMAP@@XZ ; CRRECRuler::GetThisMessageMap
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMessageMap@CRRECRuler@@MBEPBUAFX_MSGMAP@@XZ ENDP	; CRRECRuler::GetMessageMap
_TEXT	ENDS
PUBLIC	?OnPaint@CRRECRuler@@IAEXXZ			; CRRECRuler::OnPaint
PUBLIC	?OnEraseBkgnd@CRRECRuler@@IAEHPAVCDC@@@Z	; CRRECRuler::OnEraseBkgnd
PUBLIC	?OnLButtonDown@CRRECRuler@@IAEXIVCPoint@@@Z	; CRRECRuler::OnLButtonDown
PUBLIC	?OnLButtonUp@CRRECRuler@@IAEXIVCPoint@@@Z	; CRRECRuler::OnLButtonUp
PUBLIC	?OnMouseMove@CRRECRuler@@IAEXIVCPoint@@@Z	; CRRECRuler::OnMouseMove
PUBLIC	?OnEnable@CRRECRuler@@IAEXH@Z			; CRRECRuler::OnEnable
EXTRN	?GetThisMessageMap@CWnd@@KGPBUAFX_MSGMAP@@XZ:PROC ; CWnd::GetThisMessageMap
;	COMDAT ?_messageEntries@?1??GetThisMessageMap@CRRECRuler@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B
CONST	SEGMENT
?_messageEntries@?1??GetThisMessageMap@CRRECRuler@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B DD 0fH ; `CRRECRuler::GetThisMessageMap'::`2'::_messageEntries
	DD	00H
	DD	00H
	DD	00H
	DD	013H
	DD	FLAT:?OnPaint@CRRECRuler@@IAEXXZ
	DD	014H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:?OnEraseBkgnd@CRRECRuler@@IAEHPAVCDC@@@Z
	DD	0201H
	DD	00H
	DD	00H
	DD	00H
	DD	035H
	DD	FLAT:?OnLButtonDown@CRRECRuler@@IAEXIVCPoint@@@Z
	DD	0202H
	DD	00H
	DD	00H
	DD	00H
	DD	035H
	DD	FLAT:?OnLButtonUp@CRRECRuler@@IAEXIVCPoint@@@Z
	DD	0200H
	DD	00H
	DD	00H
	DD	00H
	DD	035H
	DD	FLAT:?OnMouseMove@CRRECRuler@@IAEXIVCPoint@@@Z
	DD	0aH
	DD	00H
	DD	00H
	DD	00H
	DD	014H
	DD	FLAT:?OnEnable@CRRECRuler@@IAEXH@Z
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ?messageMap@?1??GetThisMessageMap@CRRECRuler@@KGPBUAFX_MSGMAP@@XZ@4U3@B
CONST	SEGMENT
?messageMap@?1??GetThisMessageMap@CRRECRuler@@KGPBUAFX_MSGMAP@@XZ@4U3@B DD FLAT:?GetThisMessageMap@CWnd@@KGPBUAFX_MSGMAP@@XZ ; `CRRECRuler::GetThisMessageMap'::`2'::messageMap
	DD	FLAT:?_messageEntries@?1??GetThisMessageMap@CRRECRuler@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ?GetThisMessageMap@CRRECRuler@@KGPBUAFX_MSGMAP@@XZ
_TEXT	SEGMENT
?GetThisMessageMap@CRRECRuler@@KGPBUAFX_MSGMAP@@XZ PROC	; CRRECRuler::GetThisMessageMap, COMDAT

; 74   : BEGIN_MESSAGE_MAP(CRRECRuler, CWnd)

	push	ebp
	mov	ebp, esp

; 75   : 	ON_WM_PAINT()
; 76   : 	ON_WM_ERASEBKGND()
; 77   : 	ON_WM_LBUTTONDOWN()
; 78   : 	ON_WM_LBUTTONUP()
; 79   : 	ON_WM_MOUSEMOVE()
; 80   : 	ON_WM_ENABLE()
; 81   : END_MESSAGE_MAP()

	mov	eax, OFFSET ?messageMap@?1??GetThisMessageMap@CRRECRuler@@KGPBUAFX_MSGMAP@@XZ@4U3@B
	pop	ebp
	ret	0
?GetThisMessageMap@CRRECRuler@@KGPBUAFX_MSGMAP@@XZ ENDP	; CRRECRuler::GetThisMessageMap
_TEXT	ENDS
EXTRN	??1CClientDC@@UAE@XZ:PROC			; CClientDC::~CClientDC
EXTRN	?GetDeviceCaps@CDC@@QBEHH@Z:PROC		; CDC::GetDeviceCaps
EXTRN	??0CClientDC@@QAE@PAVCWnd@@@Z:PROC		; CClientDC::CClientDC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Create@CRRECRuler@@UAEHABVCRect@@PAVCWnd@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@CRRECRuler@@UAEHABVCRect@@PAVCWnd@@I@Z$0
__ehfuncinfo$?Create@CRRECRuler@@UAEHABVCRect@@PAVCWnd@@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Create@CRRECRuler@@UAEHABVCRect@@PAVCWnd@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Create@CRRECRuler@@UAEHABVCRect@@PAVCWnd@@I@Z
_TEXT	SEGMENT
_dc$171883 = -44					; size = 20
_result$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_rect$ = 8						; size = 4
_parent$ = 12						; size = 4
_id$ = 16						; size = 4
?Create@CRRECRuler@@UAEHABVCRect@@PAVCWnd@@I@Z PROC	; CRRECRuler::Create, COMDAT
; _this$ = ecx

; 98   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Create@CRRECRuler@@UAEHABVCRect@@PAVCWnd@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 99   : 	BOOL result = CWnd::Create( NULL, NULL, WS_CHILD | WS_VISIBLE, rect, parent, id );

	push	0
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rect$[ebp]
	push	edx
	push	1342177280				; 50000000H
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Create@CWnd@@UAEHPB_W0KABUtagRECT@@PAV1@IPAUCCreateContext@@@Z ; CWnd::Create
	mov	DWORD PTR _result$[ebp], eax

; 100  : 	if( result )

	cmp	DWORD PTR _result$[ebp], 0
	je	SHORT $LN1@Create

; 101  : 	{
; 102  : 		CClientDC dc( this );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dc$171883[ebp]
	call	??0CClientDC@@QAE@PAVCWnd@@@Z		; CClientDC::CClientDC
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 103  : 		m_physicalInch = dc.GetDeviceCaps( LOGPIXELSX );

	push	88					; 00000058H
	lea	ecx, DWORD PTR _dc$171883[ebp]
	call	?GetDeviceCaps@CDC@@QBEHH@Z		; CDC::GetDeviceCaps
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+124], eax

; 104  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dc$171883[ebp]
	call	??1CClientDC@@UAE@XZ			; CClientDC::~CClientDC
$LN1@Create:

; 105  : 
; 106  : 	return result;

	mov	eax, DWORD PTR _result$[ebp]

; 107  : 
; 108  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Create
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN8@Create:
	DD	1
	DD	$LN7@Create
$LN7@Create:
	DD	-44					; ffffffd4H
	DD	20					; 00000014H
	DD	$LN5@Create
$LN5@Create:
	DB	100					; 00000064H
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Create@CRRECRuler@@UAEHABVCRect@@PAVCWnd@@I@Z$0:
	lea	ecx, DWORD PTR _dc$171883[ebp]
	jmp	??1CClientDC@@UAE@XZ			; CClientDC::~CClientDC
__ehhandler$?Create@CRRECRuler@@UAEHABVCRect@@PAVCWnd@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Create@CRRECRuler@@UAEHABVCRect@@PAVCWnd@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Create@CRRECRuler@@UAEHABVCRect@@PAVCWnd@@I@Z ENDP	; CRRECRuler::Create
PUBLIC	__real@4000000000000000
PUBLIC	__real@400451eb851eb852
PUBLIC	__real@4020000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__$ArrayPad$
EXTRN	??1CPaintDC@@UAE@XZ:PROC			; CPaintDC::~CPaintDC
EXTRN	??1CDC@@UAE@XZ:PROC				; CDC::~CDC
EXTRN	??1CBitmap@@UAE@XZ:PROC				; CBitmap::~CBitmap
EXTRN	??1CThemed@@UAE@XZ:PROC				; CThemed::~CThemed
EXTRN	?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z:PROC		; CDC::BitBlt
EXTRN	??ACDWordArray@@QAEAAKH@Z:PROC			; CDWordArray::operator[]
EXTRN	?GetSize@CDWordArray@@QBEHXZ:PROC		; CDWordArray::GetSize
EXTRN	__imp_??1?$CStringT@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	?DrawTextW@CDC@@QAEHABV?$CStringT@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@PAUtagRECT@@I@Z:PROC ; CDC::DrawTextW
EXTRN	__imp_?Format@?$CStringT@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAAXPB_WZZ:PROC
EXTRN	?SetRect@CRect@@QAEXHHHH@Z:PROC			; CRect::SetRect
EXTRN	__imp_??0?$CStringT@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	?LineTo@CDC@@QAEHHH@Z:PROC			; CDC::LineTo
EXTRN	?MoveTo@CDC@@QAE?AVCPoint@@HH@Z:PROC		; CDC::MoveTo
EXTRN	?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z:PROC ; CDC::SelectStockObject
EXTRN	?SetTextColor@CDC@@UAEKK@Z:PROC			; CDC::SetTextColor
EXTRN	?SetBkColor@CDC@@UAEKK@Z:PROC			; CDC::SetBkColor
EXTRN	?InflateRect@CRect@@QAEXHH@Z:PROC		; CRect::InflateRect
EXTRN	?DeflateRect@CRect@@QAEXHH@Z:PROC		; CRect::DeflateRect
EXTRN	?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z:PROC	; CDC::Draw3dRect
EXTRN	?GetThemeColor@CThemed@@QAEKHHH@Z:PROC		; CThemed::GetThemeColor
EXTRN	?DrawBackground@CThemed@@QAEHPAVCDC@@HHABVCRect@@PBUtagRECT@@@Z:PROC ; CThemed::DrawBackground
EXTRN	?GetStyle@CWnd@@QBEKXZ:PROC			; CWnd::GetStyle
EXTRN	?InflateRect@CRect@@QAEXHHHH@Z:PROC		; CRect::InflateRect
EXTRN	?AreControlsThemed@CThemed@@SAHXZ:PROC		; CThemed::AreControlsThemed
EXTRN	??0CThemed@@QAE@PBVCWnd@@PB_W@Z:PROC		; CThemed::CThemed
EXTRN	?IsWindowEnabled@CWnd@@QBEHXZ:PROC		; CWnd::IsWindowEnabled
EXTRN	?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z:PROC	; CDC::FillSolidRect
EXTRN	?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z:PROC	; CDC::SelectObject
EXTRN	?CreateCompatibleDC@CDC@@QAEHPAV1@@Z:PROC	; CDC::CreateCompatibleDC
EXTRN	?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z:PROC ; CBitmap::CreateCompatibleBitmap
EXTRN	?Width@CRect@@QBEHXZ:PROC			; CRect::Width
EXTRN	?Height@CRect@@QBEHXZ:PROC			; CRect::Height
EXTRN	??0CBitmap@@QAE@XZ:PROC				; CBitmap::CBitmap
EXTRN	??0CDC@@QAE@XZ:PROC				; CDC::CDC
EXTRN	?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z:PROC	; CWnd::GetClientRect
EXTRN	??BCRect@@QAEPAUtagRECT@@XZ:PROC		; CRect::operator tagRECT *
EXTRN	??0CRect@@QAE@XZ:PROC				; CRect::CRect
EXTRN	?SendMessageW@CWnd@@QBEJIIJ@Z:PROC		; CWnd::SendMessageW
EXTRN	?GetParent@CWnd@@QBEPAV1@XZ:PROC		; CWnd::GetParent
EXTRN	?urm_GETSCROLLPOS@@3IA:DWORD			; urm_GETSCROLLPOS
EXTRN	??0CPaintDC@@QAE@PAVCWnd@@@Z:PROC		; CPaintDC::CPaintDC
EXTRN	__fltused:DWORD
EXTRN	__ftol2_sse:PROC
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@400451eb851eb852
CONST	SEGMENT
__real@400451eb851eb852 DQ 0400451eb851eb852r	; 2.54
CONST	ENDS
;	COMDAT __real@4020000000000000
CONST	SEGMENT
__real@4020000000000000 DQ 04020000000000000r	; 8
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?OnPaint@CRRECRuler@@IAEXXZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?OnPaint@CRRECRuler@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?OnPaint@CRRECRuler@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnPaint@CRRECRuler@@IAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OnPaint@CRRECRuler@@IAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?OnPaint@CRRECRuler@@IAEXXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?OnPaint@CRRECRuler@@IAEXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?OnPaint@CRRECRuler@@IAEXXZ$4
	DD	03H
	DD	FLAT:__unwindfunclet$?OnPaint@CRRECRuler@@IAEXXZ$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?OnPaint@CRRECRuler@@IAEXXZ
_TEXT	SEGMENT
$T172148 = -420						; size = 8
$T172147 = -412						; size = 8
$T172146 = -404						; size = 8
$T172145 = -396						; size = 8
$T172144 = -388						; size = 8
$T172143 = -380						; size = 8
$T172142 = -372						; size = 8
_x$171956 = -364					; size = 4
_max$ = -360						; size = 4
_count$171947 = -356					; size = 4
_counter$171946 = -348					; size = 4
_rectNum$171945 = -336					; size = 16
_cm2$171938 = -316					; size = 4
_cm$171935 = -312					; size = 4
_count$171929 = -308					; size = 4
_counter$171928 = -300					; size = 4
_rectInch$171927 = -288					; size = 16
_inch8$171914 = -268					; size = 4
_inch4$171911 = -264					; size = 4
_t$ = -260						; size = 4
_width$ = -256						; size = 4
_leftmarg$ = -252					; size = 4
_midpoint$ = -248					; size = 4
_nState$171901 = -244					; size = 4
_th$ = -236						; size = 12
_winRect$ = -216					; size = 16
_crText$ = -196						; size = 4
_crBack$ = -192						; size = 4
_bEnabled$ = -188					; size = 4
_oldbmp$ = -184						; size = 4
_bmp$ = -176						; size = 8
_dc$ = -160						; size = 16
_rect$ = -136						; size = 16
_pos$ = -116						; size = 4
_mainDC$ = -108						; size = 84
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?OnPaint@CRRECRuler@@IAEXXZ PROC			; CRRECRuler::OnPaint, COMDAT
; _this$ = ecx

; 124  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?OnPaint@CRRECRuler@@IAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 408				; 00000198H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-420]
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 	CPaintDC mainDC(this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _mainDC$[ebp]
	call	??0CPaintDC@@QAE@PAVCWnd@@@Z		; CPaintDC::CPaintDC
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 126  : 
; 127  : 	// Set up data
; 128  : 	int pos = GetParent()->SendMessage( urm_GETSCROLLPOS );

	push	0
	push	0
	mov	ecx, DWORD PTR ?urm_GETSCROLLPOS@@3IA	; urm_GETSCROLLPOS
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetParent@CWnd@@QBEPAV1@XZ		; CWnd::GetParent
	mov	ecx, eax
	call	?SendMessageW@CWnd@@QBEJIIJ@Z		; CWnd::SendMessageW
	mov	DWORD PTR _pos$[ebp], eax

; 129  : 
; 130  : 	CRect rect;

	lea	ecx, DWORD PTR _rect$[ebp]
	call	??0CRect@@QAE@XZ			; CRect::CRect

; 131  : 	GetClientRect( rect );

	lea	ecx, DWORD PTR _rect$[ebp]
	call	??BCRect@@QAEPAUtagRECT@@XZ		; CRect::operator tagRECT *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetClientRect@CWnd@@QBEXPAUtagRECT@@@Z	; CWnd::GetClientRect

; 132  : 
; 133  : 	// Create off-screen canvas
; 134  : 	CDC dc;

	lea	ecx, DWORD PTR _dc$[ebp]
	call	??0CDC@@QAE@XZ				; CDC::CDC
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 135  : 	CBitmap bmp;

	lea	ecx, DWORD PTR _bmp$[ebp]
	call	??0CBitmap@@QAE@XZ			; CBitmap::CBitmap
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 136  : 	bmp.CreateCompatibleBitmap( &mainDC, rect.Width(), rect.Height() );

	lea	ecx, DWORD PTR _rect$[ebp]
	call	?Height@CRect@@QBEHXZ			; CRect::Height
	push	eax
	lea	ecx, DWORD PTR _rect$[ebp]
	call	?Width@CRect@@QBEHXZ			; CRect::Width
	push	eax
	lea	edx, DWORD PTR _mainDC$[ebp]
	push	edx
	lea	ecx, DWORD PTR _bmp$[ebp]
	call	?CreateCompatibleBitmap@CBitmap@@QAEHPAVCDC@@HH@Z ; CBitmap::CreateCompatibleBitmap

; 137  : 	dc.CreateCompatibleDC( &mainDC );

	lea	eax, DWORD PTR _mainDC$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?CreateCompatibleDC@CDC@@QAEHPAV1@@Z	; CDC::CreateCompatibleDC

; 138  : 	CBitmap* oldbmp = dc.SelectObject( &bmp );

	lea	ecx, DWORD PTR _bmp$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject
	mov	DWORD PTR _oldbmp$[ebp], eax

; 139  : 
; 140  : 	dc.FillSolidRect( rect, m_crBack);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	push	eax
	lea	ecx, DWORD PTR _rect$[ebp]
	call	??BCRect@@QAEPAUtagRECT@@XZ		; CRect::operator tagRECT *
	push	eax
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z	; CDC::FillSolidRect

; 141  : 
; 142  : 	// Set up canvas
; 143  : 	BOOL bEnabled = IsWindowEnabled();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsWindowEnabled@CWnd@@QBEHXZ		; CWnd::IsWindowEnabled
	mov	DWORD PTR _bEnabled$[ebp], eax

; 144  : 
; 145  : 	COLORREF crBack = GetSysColor(bEnabled ? COLOR_WINDOW : COLOR_3DFACE);

	mov	ecx, DWORD PTR _bEnabled$[ebp]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, -10				; fffffff6H
	add	ecx, 15					; 0000000fH
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__GetSysColor@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _crBack$[ebp], eax

; 146  : 	COLORREF crText = GetSysColor(bEnabled ? COLOR_WINDOWTEXT : COLOR_3DSHADOW);

	xor	edx, edx
	cmp	DWORD PTR _bEnabled$[ebp], 0
	sete	dl
	lea	edx, DWORD PTR [edx*8+8]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__GetSysColor@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _crText$[ebp], eax

; 147  : 
; 148  : 	// Set up data for the inner ruler window
; 149  : 	CRect winRect( rect );

	mov	eax, DWORD PTR _rect$[ebp]
	mov	DWORD PTR _winRect$[ebp], eax
	mov	ecx, DWORD PTR _rect$[ebp+4]
	mov	DWORD PTR _winRect$[ebp+4], ecx
	mov	edx, DWORD PTR _rect$[ebp+8]
	mov	DWORD PTR _winRect$[ebp+8], edx
	mov	eax, DWORD PTR _rect$[ebp+12]
	mov	DWORD PTR _winRect$[ebp+12], eax

; 150  : 	winRect.top += 3;

	mov	ecx, DWORD PTR _winRect$[ebp+4]
	add	ecx, 3
	mov	DWORD PTR _winRect$[ebp+4], ecx

; 151  : 	winRect.bottom -= 5;

	mov	edx, DWORD PTR _winRect$[ebp+12]
	sub	edx, 5
	mov	DWORD PTR _winRect$[ebp+12], edx

; 152  : 	winRect.right -= 3;

	mov	eax, DWORD PTR _winRect$[ebp+8]
	sub	eax, 3
	mov	DWORD PTR _winRect$[ebp+8], eax

; 153  : 	winRect.left += m_margin - 2;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	eax, DWORD PTR _winRect$[ebp]
	lea	ecx, DWORD PTR [eax+edx-2]
	mov	DWORD PTR _winRect$[ebp], ecx

; 154  : 
; 155  : 	if (bEnabled) // else same as dialog bk color

	cmp	DWORD PTR _bEnabled$[ebp], 0
	je	SHORT $LN27@OnPaint

; 156  : 		dc.FillSolidRect( winRect, GetSysColor(COLOR_WINDOW));

	mov	esi, esp
	push	5
	call	DWORD PTR __imp__GetSysColor@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	lea	ecx, DWORD PTR _winRect$[ebp]
	call	??BCRect@@QAEPAUtagRECT@@XZ		; CRect::operator tagRECT *
	push	eax
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?FillSolidRect@CDC@@QAEXPBUtagRECT@@K@Z	; CDC::FillSolidRect
$LN27@OnPaint:

; 157  : 
; 158  : 	// Frame the inside
; 159  : 	CThemed th(this, _T("EDIT"));

	push	OFFSET $SG171899
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	ecx, DWORD PTR _th$[ebp]
	call	??0CThemed@@QAE@PBVCWnd@@PB_W@Z		; CThemed::CThemed
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 160  : 
; 161  : 	if (th.AreControlsThemed()) 

	call	?AreControlsThemed@CThemed@@SAHXZ	; CThemed::AreControlsThemed
	test	eax, eax
	je	$LN26@OnPaint

; 162  : 	{
; 163  : 		winRect.InflateRect(0, 1, 0, 1);

	push	1
	push	0
	push	1
	push	0
	lea	ecx, DWORD PTR _winRect$[ebp]
	call	?InflateRect@CRect@@QAEXHHHH@Z		; CRect::InflateRect

; 164  : 
; 165  : 		int nState = ETS_NORMAL;

	mov	DWORD PTR _nState$171901[ebp], 1

; 166  : 
; 167  : 		if (!bEnabled)

	cmp	DWORD PTR _bEnabled$[ebp], 0
	jne	SHORT $LN25@OnPaint

; 168  : 			nState = ETS_DISABLED;

	mov	DWORD PTR _nState$171901[ebp], 4
	jmp	SHORT $LN23@OnPaint
$LN25@OnPaint:

; 169  : 		else if (GetStyle() & ES_READONLY)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStyle@CWnd@@QBEKXZ			; CWnd::GetStyle
	and	eax, 2048				; 00000800H
	je	SHORT $LN23@OnPaint

; 170  : 			
; 171  : 			nState = ETS_READONLY;

	mov	DWORD PTR _nState$171901[ebp], 6
$LN23@OnPaint:

; 172  : 
; 173  : 		th.DrawBackground(&dc, EP_EDITTEXT, nState, winRect);

	push	0
	lea	eax, DWORD PTR _winRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nState$171901[ebp]
	push	ecx
	push	1
	lea	edx, DWORD PTR _dc$[ebp]
	push	edx
	lea	ecx, DWORD PTR _th$[ebp]
	call	?DrawBackground@CThemed@@QAEHPAVCDC@@HHABVCRect@@PBUtagRECT@@@Z ; CThemed::DrawBackground

; 174  : 
; 175  : 		// get the theme bk color for the text
; 176  : 		crBack = th.GetThemeColor(EP_EDITTEXT, nState, TMT_FILLCOLOR);

	push	3802					; 00000edaH
	mov	eax, DWORD PTR _nState$171901[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _th$[ebp]
	call	?GetThemeColor@CThemed@@QAEKHHH@Z	; CThemed::GetThemeColor
	mov	DWORD PTR _crBack$[ebp], eax

; 177  : 	}
; 178  : 	else

	jmp	$LN22@OnPaint
$LN26@OnPaint:

; 179  : 	{
; 180  : 		dc.Draw3dRect(winRect, ::GetSysColor(COLOR_3DSHADOW), ::GetSysColor(COLOR_3DHILIGHT));

	mov	esi, esp
	push	20					; 00000014H
	call	DWORD PTR __imp__GetSysColor@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	esi, esp
	push	16					; 00000010H
	call	DWORD PTR __imp__GetSysColor@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	lea	ecx, DWORD PTR _winRect$[ebp]
	call	??BCRect@@QAEPAUtagRECT@@XZ		; CRect::operator tagRECT *
	push	eax
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z	; CDC::Draw3dRect

; 181  : 		winRect.DeflateRect(1, 1);

	push	1
	push	1
	lea	ecx, DWORD PTR _winRect$[ebp]
	call	?DeflateRect@CRect@@QAEXHH@Z		; CRect::DeflateRect

; 182  : 		dc.Draw3dRect(winRect, ::GetSysColor(COLOR_3DDKSHADOW), ::GetSysColor(COLOR_3DFACE));

	mov	esi, esp
	push	15					; 0000000fH
	call	DWORD PTR __imp__GetSysColor@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	esi, esp
	push	21					; 00000015H
	call	DWORD PTR __imp__GetSysColor@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	lea	ecx, DWORD PTR _winRect$[ebp]
	call	??BCRect@@QAEPAUtagRECT@@XZ		; CRect::operator tagRECT *
	push	eax
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?Draw3dRect@CDC@@QAEXPBUtagRECT@@KK@Z	; CDC::Draw3dRect

; 183  : 		winRect.InflateRect(1, 1);

	push	1
	push	1
	lea	ecx, DWORD PTR _winRect$[ebp]
	call	?InflateRect@CRect@@QAEXHH@Z		; CRect::InflateRect
$LN22@OnPaint:

; 184  : 	}
; 185  : 
; 186  : 	int midpoint = winRect.top + ( winRect.Height() / 2 );

	lea	ecx, DWORD PTR _winRect$[ebp]
	call	?Height@CRect@@QBEHXZ			; CRect::Height
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _winRect$[ebp+4]
	mov	DWORD PTR _midpoint$[ebp], eax

; 187  : 	int leftmarg = winRect.left + 2 - pos;

	mov	ecx, DWORD PTR _winRect$[ebp]
	add	ecx, 2
	sub	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _leftmarg$[ebp], ecx

; 188  : 	int width = winRect.Height();

	lea	ecx, DWORD PTR _winRect$[ebp]
	call	?Height@CRect@@QBEHXZ			; CRect::Height
	mov	DWORD PTR _width$[ebp], eax

; 189  : 	int t;
; 190  : 
; 191  : 	// Print the values in the ruler scale
; 192  : 	dc.SetBkColor(crBack);

	mov	edx, DWORD PTR _crBack$[ebp]
	push	edx
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?SetBkColor@CDC@@UAEKK@Z		; CDC::SetBkColor

; 193  : 	dc.SetTextColor(crText);

	mov	eax, DWORD PTR _crText$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?SetTextColor@CDC@@UAEKK@Z		; CDC::SetTextColor

; 194  : 	dc.SelectStockObject( BLACK_PEN );

	push	7
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z ; CDC::SelectStockObject

; 195  : 	dc.SelectStockObject( DEFAULT_GUI_FONT );

	push	17					; 00000011H
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?SelectStockObject@CDC@@UAEPAVCGdiObject@@H@Z ; CDC::SelectStockObject

; 196  : 	
; 197  : 	if( m_mode == MODE_INCH )

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+120], 0
	jne	$LN21@OnPaint

; 198  : 	{
; 199  : 		int inch4 = ( int ) ( ( double ) m_physicalInch / 4.0 +.5 );

	mov	edx, DWORD PTR _this$[ebp]
	fild	DWORD PTR [edx+124]
	fdiv	QWORD PTR __real@4010000000000000
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	mov	DWORD PTR _inch4$171911[ebp], eax

; 200  : 		int inch8 = ( int ) ( ( double ) m_physicalInch / 8.0 +.5 );

	mov	eax, DWORD PTR _this$[ebp]
	fild	DWORD PTR [eax+124]
	fdiv	QWORD PTR __real@4020000000000000
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	mov	DWORD PTR _inch8$171914[ebp], eax

; 201  : 
; 202  : 		// Drawing scale markers
; 203  : 		for( t = ( leftmarg + ( int ) ( inch8 +.5 ) ) ; t < rect.right - m_margin ; t += ( int ) ( inch8 + .5 ) )

	fild	DWORD PTR _inch8$171914[ebp]
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	add	eax, DWORD PTR _leftmarg$[ebp]
	mov	DWORD PTR _t$[ebp], eax
	jmp	SHORT $LN20@OnPaint
$LN19@OnPaint:
	fild	DWORD PTR _inch8$171914[ebp]
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	add	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _t$[ebp], eax
$LN20@OnPaint:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rect$[ebp+8]
	sub	edx, DWORD PTR [ecx+116]
	cmp	DWORD PTR _t$[ebp], edx
	jge	SHORT $LN18@OnPaint

; 204  : 		{
; 205  : 			dc.MoveTo( t, midpoint - 1 );

	mov	eax, DWORD PTR _midpoint$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T172142[ebp]
	push	edx
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?MoveTo@CDC@@QAE?AVCPoint@@HH@Z		; CDC::MoveTo

; 206  : 			dc.LineTo( t, midpoint + 1 );

	mov	eax, DWORD PTR _midpoint$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?LineTo@CDC@@QAEHHH@Z			; CDC::LineTo

; 207  : 		}

	jmp	SHORT $LN19@OnPaint
$LN18@OnPaint:

; 208  : 
; 209  : 		for( t = leftmarg + inch4 ; t < rect.right - m_margin ; t += inch4 )

	mov	edx, DWORD PTR _leftmarg$[ebp]
	add	edx, DWORD PTR _inch4$171911[ebp]
	mov	DWORD PTR _t$[ebp], edx
	jmp	SHORT $LN17@OnPaint
$LN16@OnPaint:
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, DWORD PTR _inch4$171911[ebp]
	mov	DWORD PTR _t$[ebp], eax
$LN17@OnPaint:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _rect$[ebp+8]
	sub	edx, DWORD PTR [ecx+116]
	cmp	DWORD PTR _t$[ebp], edx
	jge	SHORT $LN15@OnPaint

; 210  : 		{
; 211  : 			dc.MoveTo( t, midpoint - 3 );

	mov	eax, DWORD PTR _midpoint$[ebp]
	sub	eax, 3
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T172143[ebp]
	push	edx
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?MoveTo@CDC@@QAE?AVCPoint@@HH@Z		; CDC::MoveTo

; 212  : 			dc.LineTo( t, midpoint + 3 );

	mov	eax, DWORD PTR _midpoint$[ebp]
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?LineTo@CDC@@QAEHHH@Z			; CDC::LineTo

; 213  : 		}

	jmp	SHORT $LN16@OnPaint
$LN15@OnPaint:

; 214  : 
; 215  : 		CRect rectInch;

	lea	ecx, DWORD PTR _rectInch$171927[ebp]
	call	??0CRect@@QAE@XZ			; CRect::CRect

; 216  : 		CString counter;

	mov	esi, esp
	lea	ecx, DWORD PTR _counter$171928[ebp]
	call	DWORD PTR __imp_??0?$CStringT@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 217  : 		int count = 1;

	mov	DWORD PTR _count$171929[ebp], 1

; 218  : 
; 219  : 		// Drawing numbers
; 220  : 		for( t = leftmarg + m_physicalInch ; t < rect.right - m_margin ; t += m_physicalInch )

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _leftmarg$[ebp]
	add	eax, DWORD PTR [edx+124]
	mov	DWORD PTR _t$[ebp], eax
	jmp	SHORT $LN14@OnPaint
$LN13@OnPaint:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _t$[ebp]
	add	edx, DWORD PTR [ecx+124]
	mov	DWORD PTR _t$[ebp], edx
$LN14@OnPaint:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rect$[ebp+8]
	sub	ecx, DWORD PTR [eax+116]
	cmp	DWORD PTR _t$[ebp], ecx
	jge	$LN12@OnPaint

; 221  : 		{
; 222  : 
; 223  : 			rectInch.SetRect( t - width / 2, winRect.top + 2, t + width / 2, winRect.bottom - 2 );

	mov	edx, DWORD PTR _winRect$[ebp+12]
	sub	edx, 2
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	eax, DWORD PTR _winRect$[ebp+4]
	add	eax, 2
	push	eax
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _t$[ebp]
	sub	ecx, eax
	push	ecx
	lea	ecx, DWORD PTR _rectInch$171927[ebp]
	call	?SetRect@CRect@@QAEXHHHH@Z		; CRect::SetRect

; 224  : 			counter.Format( _T( "%i" ), count );

	mov	esi, esp
	mov	edx, DWORD PTR _count$171929[ebp]
	push	edx
	push	OFFSET $SG171933
	lea	eax, DWORD PTR _counter$171928[ebp]
	push	eax
	call	DWORD PTR __imp_?Format@?$CStringT@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAAXPB_WZZ
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 225  : 			dc.DrawText( counter, rectInch, DT_SINGLELINE | DT_CENTER | DT_VCENTER );

	push	37					; 00000025H
	lea	ecx, DWORD PTR _rectInch$171927[ebp]
	call	??BCRect@@QAEPAUtagRECT@@XZ		; CRect::operator tagRECT *
	push	eax
	lea	ecx, DWORD PTR _counter$171928[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?DrawTextW@CDC@@QAEHABV?$CStringT@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextW

; 226  : 			count++;

	mov	edx, DWORD PTR _count$171929[ebp]
	add	edx, 1
	mov	DWORD PTR _count$171929[ebp], edx

; 227  : 
; 228  : 		}

	jmp	$LN13@OnPaint
$LN12@OnPaint:

; 229  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	esi, esp
	lea	ecx, DWORD PTR _counter$171928[ebp]
	call	DWORD PTR __imp_??1?$CStringT@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp

; 230  : 	else

	jmp	$LN11@OnPaint
$LN21@OnPaint:

; 231  : 	{
; 232  : 		int cm = ( int ) ( ( double ) m_physicalInch / 2.54 + .5 );

	mov	eax, DWORD PTR _this$[ebp]
	fild	DWORD PTR [eax+124]
	fdiv	QWORD PTR __real@400451eb851eb852
	fadd	QWORD PTR __real@3fe0000000000000
	call	__ftol2_sse
	mov	DWORD PTR _cm$171935[ebp], eax

; 233  : 		int cm2 = ( int ) ( ( double ) cm / 2.0 );

	fild	DWORD PTR _cm$171935[ebp]
	fdiv	QWORD PTR __real@4000000000000000
	call	__ftol2_sse
	mov	DWORD PTR _cm2$171938[ebp], eax

; 234  : 
; 235  : 		// Drawing scale markers
; 236  : 		for( t = leftmarg + cm2 ; t < rect.right - m_margin ; t += cm2 )

	mov	ecx, DWORD PTR _leftmarg$[ebp]
	add	ecx, DWORD PTR _cm2$171938[ebp]
	mov	DWORD PTR _t$[ebp], ecx
	jmp	SHORT $LN10@OnPaint
$LN9@OnPaint:
	mov	edx, DWORD PTR _t$[ebp]
	add	edx, DWORD PTR _cm2$171938[ebp]
	mov	DWORD PTR _t$[ebp], edx
$LN10@OnPaint:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rect$[ebp+8]
	sub	ecx, DWORD PTR [eax+116]
	cmp	DWORD PTR _t$[ebp], ecx
	jge	SHORT $LN8@OnPaint

; 237  : 		{
; 238  : 			dc.MoveTo( t, midpoint - 1 );

	mov	edx, DWORD PTR _midpoint$[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T172144[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?MoveTo@CDC@@QAE?AVCPoint@@HH@Z		; CDC::MoveTo

; 239  : 			dc.LineTo( t, midpoint + 2 );

	mov	edx, DWORD PTR _midpoint$[ebp]
	add	edx, 2
	push	edx
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?LineTo@CDC@@QAEHHH@Z			; CDC::LineTo

; 240  : 		}

	jmp	SHORT $LN9@OnPaint
$LN8@OnPaint:

; 241  : 
; 242  : 		CRect rectNum;

	lea	ecx, DWORD PTR _rectNum$171945[ebp]
	call	??0CRect@@QAE@XZ			; CRect::CRect

; 243  : 		CString counter;

	mov	esi, esp
	lea	ecx, DWORD PTR _counter$171946[ebp]
	call	DWORD PTR __imp_??0?$CStringT@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	BYTE PTR __$EHRec$[ebp+8], 5

; 244  : 		int count = 1;

	mov	DWORD PTR _count$171947[ebp], 1

; 245  : 
; 246  : 		// Drawing numbers
; 247  : 		for( t = leftmarg + cm ; t < rect.right - m_margin ; t += cm )

	mov	ecx, DWORD PTR _leftmarg$[ebp]
	add	ecx, DWORD PTR _cm$171935[ebp]
	mov	DWORD PTR _t$[ebp], ecx
	jmp	SHORT $LN7@OnPaint
$LN6@OnPaint:
	mov	edx, DWORD PTR _t$[ebp]
	add	edx, DWORD PTR _cm$171935[ebp]
	mov	DWORD PTR _t$[ebp], edx
$LN7@OnPaint:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _rect$[ebp+8]
	sub	ecx, DWORD PTR [eax+116]
	cmp	DWORD PTR _t$[ebp], ecx
	jge	$LN5@OnPaint

; 248  : 		{
; 249  : 			rectNum.SetRect( t - width / 2, winRect.top + 2, t + width / 2, winRect.bottom - 2 );

	mov	edx, DWORD PTR _winRect$[ebp+12]
	sub	edx, 2
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	add	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	eax, DWORD PTR _winRect$[ebp+4]
	add	eax, 2
	push	eax
	mov	eax, DWORD PTR _width$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _t$[ebp]
	sub	ecx, eax
	push	ecx
	lea	ecx, DWORD PTR _rectNum$171945[ebp]
	call	?SetRect@CRect@@QAEXHHHH@Z		; CRect::SetRect

; 250  : 			counter.Format( _T( "%i" ), count );

	mov	esi, esp
	mov	edx, DWORD PTR _count$171947[ebp]
	push	edx
	push	OFFSET $SG171951
	lea	eax, DWORD PTR _counter$171946[ebp]
	push	eax
	call	DWORD PTR __imp_?Format@?$CStringT@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAAXPB_WZZ
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 251  : 			dc.DrawText( counter, rectNum, DT_SINGLELINE | DT_CENTER | DT_VCENTER );

	push	37					; 00000025H
	lea	ecx, DWORD PTR _rectNum$171945[ebp]
	call	??BCRect@@QAEPAUtagRECT@@XZ		; CRect::operator tagRECT *
	push	eax
	lea	ecx, DWORD PTR _counter$171946[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?DrawTextW@CDC@@QAEHABV?$CStringT@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@PAUtagRECT@@I@Z ; CDC::DrawTextW

; 252  : 			count++;

	mov	edx, DWORD PTR _count$171947[ebp]
	add	edx, 1
	mov	DWORD PTR _count$171947[ebp], edx

; 253  : 
; 254  : 		}

	jmp	$LN6@OnPaint
$LN5@OnPaint:

; 255  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	esi, esp
	lea	ecx, DWORD PTR _counter$171946[ebp]
	call	DWORD PTR __imp_??1?$CStringT@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@OnPaint:

; 256  : 
; 257  : 	// Draw tab markers
; 258  : 	int max = m_tabs.GetSize();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	?GetSize@CDWordArray@@QBEHXZ		; CDWordArray::GetSize
	mov	DWORD PTR _max$[ebp], eax

; 259  : 	for( t = 0 ; t < max ; t++ )

	mov	DWORD PTR _t$[ebp], 0
	jmp	SHORT $LN4@OnPaint
$LN3@OnPaint:
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 1
	mov	DWORD PTR _t$[ebp], eax
$LN4@OnPaint:
	mov	ecx, DWORD PTR _t$[ebp]
	cmp	ecx, DWORD PTR _max$[ebp]
	jge	$LN2@OnPaint

; 260  : 	{
; 261  : 
; 262  : 		int x = ( leftmarg + m_tabs[ t ] - 2 );

	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??ACDWordArray@@QAEAAKH@Z		; CDWordArray::operator[]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _leftmarg$[ebp]
	lea	edx, DWORD PTR [ecx+eax-2]
	mov	DWORD PTR _x$171956[ebp], edx

; 263  : 		if( x > winRect.left && x + 3 < winRect.right )

	mov	eax, DWORD PTR _x$171956[ebp]
	cmp	eax, DWORD PTR _winRect$[ebp]
	jle	$LN1@OnPaint
	mov	ecx, DWORD PTR _x$171956[ebp]
	add	ecx, 3
	cmp	ecx, DWORD PTR _winRect$[ebp+8]
	jge	$LN1@OnPaint

; 264  : 		{
; 265  : 			dc.MoveTo( x, midpoint + 5 );

	mov	edx, DWORD PTR _midpoint$[ebp]
	add	edx, 5
	push	edx
	mov	eax, DWORD PTR _x$171956[ebp]
	push	eax
	lea	ecx, DWORD PTR $T172145[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?MoveTo@CDC@@QAE?AVCPoint@@HH@Z		; CDC::MoveTo

; 266  : 			dc.LineTo( x + 6, midpoint + 5 );

	mov	edx, DWORD PTR _midpoint$[ebp]
	add	edx, 5
	push	edx
	mov	eax, DWORD PTR _x$171956[ebp]
	add	eax, 6
	push	eax
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?LineTo@CDC@@QAEHHH@Z			; CDC::LineTo

; 267  : 			dc.MoveTo( x, midpoint + 6 );

	mov	ecx, DWORD PTR _midpoint$[ebp]
	add	ecx, 6
	push	ecx
	mov	edx, DWORD PTR _x$171956[ebp]
	push	edx
	lea	eax, DWORD PTR $T172146[ebp]
	push	eax
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?MoveTo@CDC@@QAE?AVCPoint@@HH@Z		; CDC::MoveTo

; 268  : 			dc.LineTo( x + 6, midpoint + 6 );

	mov	ecx, DWORD PTR _midpoint$[ebp]
	add	ecx, 6
	push	ecx
	mov	edx, DWORD PTR _x$171956[ebp]
	add	edx, 6
	push	edx
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?LineTo@CDC@@QAEHHH@Z			; CDC::LineTo

; 269  : 
; 270  : 			dc.MoveTo( x + 2, midpoint + 7 );

	mov	eax, DWORD PTR _midpoint$[ebp]
	add	eax, 7
	push	eax
	mov	ecx, DWORD PTR _x$171956[ebp]
	add	ecx, 2
	push	ecx
	lea	edx, DWORD PTR $T172147[ebp]
	push	edx
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?MoveTo@CDC@@QAE?AVCPoint@@HH@Z		; CDC::MoveTo

; 271  : 			dc.LineTo( x + 2, midpoint + 10 );

	mov	eax, DWORD PTR _midpoint$[ebp]
	add	eax, 10					; 0000000aH
	push	eax
	mov	ecx, DWORD PTR _x$171956[ebp]
	add	ecx, 2
	push	ecx
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?LineTo@CDC@@QAEHHH@Z			; CDC::LineTo

; 272  : 			dc.MoveTo( x + 3, midpoint + 7 );

	mov	edx, DWORD PTR _midpoint$[ebp]
	add	edx, 7
	push	edx
	mov	eax, DWORD PTR _x$171956[ebp]
	add	eax, 3
	push	eax
	lea	ecx, DWORD PTR $T172148[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?MoveTo@CDC@@QAE?AVCPoint@@HH@Z		; CDC::MoveTo

; 273  : 			dc.LineTo( x + 3, midpoint + 10 );

	mov	edx, DWORD PTR _midpoint$[ebp]
	add	edx, 10					; 0000000aH
	push	edx
	mov	eax, DWORD PTR _x$171956[ebp]
	add	eax, 3
	push	eax
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?LineTo@CDC@@QAEHHH@Z			; CDC::LineTo
$LN1@OnPaint:

; 274  : 		}
; 275  : 	}

	jmp	$LN3@OnPaint
$LN2@OnPaint:

; 276  : 
; 277  : 	//... and out to screen
; 278  : 	mainDC.BitBlt( 0, 0, rect.Width(), rect.Height(), &dc, 0, 0, SRCCOPY );

	push	13369376				; 00cc0020H
	push	0
	push	0
	lea	ecx, DWORD PTR _dc$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _rect$[ebp]
	call	?Height@CRect@@QBEHXZ			; CRect::Height
	push	eax
	lea	ecx, DWORD PTR _rect$[ebp]
	call	?Width@CRect@@QBEHXZ			; CRect::Width
	push	eax
	push	0
	push	0
	lea	ecx, DWORD PTR _mainDC$[ebp]
	call	?BitBlt@CDC@@QAEHHHHHPAV1@HHK@Z		; CDC::BitBlt

; 279  : 	dc.SelectObject( oldbmp );

	mov	edx, DWORD PTR _oldbmp$[ebp]
	push	edx
	lea	ecx, DWORD PTR _dc$[ebp]
	call	?SelectObject@CDC@@QAEPAVCBitmap@@PAV2@@Z ; CDC::SelectObject

; 280  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _th$[ebp]
	call	??1CThemed@@UAE@XZ			; CThemed::~CThemed
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _bmp$[ebp]
	call	??1CBitmap@@UAE@XZ			; CBitmap::~CBitmap
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _dc$[ebp]
	call	??1CDC@@UAE@XZ				; CDC::~CDC
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _mainDC$[ebp]
	call	??1CPaintDC@@UAE@XZ			; CPaintDC::~CPaintDC
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN48@OnPaint
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 420				; 000001a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN48@OnPaint:
	DD	10					; 0000000aH
	DD	$LN47@OnPaint
$LN47@OnPaint:
	DD	-108					; ffffff94H
	DD	84					; 00000054H
	DD	$LN36@OnPaint
	DD	-136					; ffffff78H
	DD	16					; 00000010H
	DD	$LN37@OnPaint
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN38@OnPaint
	DD	-176					; ffffff50H
	DD	8
	DD	$LN39@OnPaint
	DD	-216					; ffffff28H
	DD	16					; 00000010H
	DD	$LN40@OnPaint
	DD	-236					; ffffff14H
	DD	12					; 0000000cH
	DD	$LN41@OnPaint
	DD	-288					; fffffee0H
	DD	16					; 00000010H
	DD	$LN42@OnPaint
	DD	-300					; fffffed4H
	DD	4
	DD	$LN43@OnPaint
	DD	-336					; fffffeb0H
	DD	16					; 00000010H
	DD	$LN44@OnPaint
	DD	-348					; fffffea4H
	DD	4
	DD	$LN45@OnPaint
$LN45@OnPaint:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN44@OnPaint:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	0
$LN43@OnPaint:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN42@OnPaint:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
$LN41@OnPaint:
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN40@OnPaint:
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN39@OnPaint:
	DB	98					; 00000062H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
$LN38@OnPaint:
	DB	100					; 00000064H
	DB	99					; 00000063H
	DB	0
$LN37@OnPaint:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	0
$LN36@OnPaint:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	68					; 00000044H
	DB	67					; 00000043H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?OnPaint@CRRECRuler@@IAEXXZ$0:
	lea	ecx, DWORD PTR _mainDC$[ebp]
	jmp	??1CPaintDC@@UAE@XZ			; CPaintDC::~CPaintDC
__unwindfunclet$?OnPaint@CRRECRuler@@IAEXXZ$1:
	lea	ecx, DWORD PTR _dc$[ebp]
	jmp	??1CDC@@UAE@XZ				; CDC::~CDC
__unwindfunclet$?OnPaint@CRRECRuler@@IAEXXZ$2:
	lea	ecx, DWORD PTR _bmp$[ebp]
	jmp	??1CBitmap@@UAE@XZ			; CBitmap::~CBitmap
__unwindfunclet$?OnPaint@CRRECRuler@@IAEXXZ$3:
	lea	ecx, DWORD PTR _th$[ebp]
	jmp	??1CThemed@@UAE@XZ			; CThemed::~CThemed
__unwindfunclet$?OnPaint@CRRECRuler@@IAEXXZ$4:
	mov	esi, esp
	lea	ecx, DWORD PTR _counter$171928[ebp]
	call	DWORD PTR __imp_??1?$CStringT@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__unwindfunclet$?OnPaint@CRRECRuler@@IAEXXZ$5:
	mov	esi, esp
	lea	ecx, DWORD PTR _counter$171946[ebp]
	call	DWORD PTR __imp_??1?$CStringT@_WV?$StrTraitMFC_DLL@_WV?$ChTraitsCRT@_W@ATL@@@@@ATL@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
__ehhandler$?OnPaint@CRRECRuler@@IAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-420]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?OnPaint@CRRECRuler@@IAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?OnPaint@CRRECRuler@@IAEXXZ ENDP			; CRRECRuler::OnPaint
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?OnEraseBkgnd@CRRECRuler@@IAEHPAVCDC@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?OnEraseBkgnd@CRRECRuler@@IAEHPAVCDC@@@Z PROC		; CRRECRuler::OnEraseBkgnd, COMDAT
; _this$ = ecx

; 294  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 295  : 	
; 296  : 	return TRUE;

	mov	eax, 1

; 297  : 
; 298  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?OnEraseBkgnd@CRRECRuler@@IAEHPAVCDC@@@Z ENDP		; CRRECRuler::OnEraseBkgnd
_TEXT	ENDS
PUBLIC	?SetMode@CRRECRuler@@QAEXH@Z			; CRRECRuler::SetMode
EXTRN	?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z:PROC ; CWnd::RedrawWindow
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetMode@CRRECRuler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mode$ = 8						; size = 4
?SetMode@CRRECRuler@@QAEXH@Z PROC			; CRRECRuler::SetMode, COMDAT
; _this$ = ecx

; 314  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 315  : 
; 316  : 	m_mode = mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+120], ecx

; 317  : 
; 318  : 	if( m_hWnd )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN2@SetMode

; 319  : 	{
; 320  : 
; 321  : 		RedrawWindow();

	push	261					; 00000105H
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z ; CWnd::RedrawWindow
$LN2@SetMode:

; 322  : 
; 323  : 	}
; 324  : 
; 325  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMode@CRRECRuler@@QAEXH@Z ENDP			; CRRECRuler::SetMode
_TEXT	ENDS
PUBLIC	?SetMargin@CRRECRuler@@QAEXH@Z			; CRRECRuler::SetMargin
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetMargin@CRRECRuler@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_margin$ = 8						; size = 4
?SetMargin@CRRECRuler@@QAEXH@Z PROC			; CRRECRuler::SetMargin, COMDAT
; _this$ = ecx

; 339  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 340  : 
; 341  : 	m_margin = margin;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _margin$[ebp]
	mov	DWORD PTR [eax+116], ecx

; 342  : 
; 343  : 	if( m_hWnd )

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN2@SetMargin

; 344  : 	{
; 345  : 
; 346  : 		RedrawWindow();

	push	261					; 00000105H
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RedrawWindow@CWnd@@QAEHPBUtagRECT@@PAVCRgn@@I@Z ; CWnd::RedrawWindow
$LN2@SetMargin:

; 347  : 
; 348  : 	}
; 349  : 
; 350  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetMargin@CRRECRuler@@QAEXH@Z ENDP			; CRRECRuler::SetMargin
_TEXT	ENDS
PUBLIC	?GetMode@CRRECRuler@@QBEHXZ			; CRRECRuler::GetMode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetMode@CRRECRuler@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMode@CRRECRuler@@QBEHXZ PROC			; CRRECRuler::GetMode, COMDAT
; _this$ = ecx

; 366  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 367  : 
; 368  : 	return m_mode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+120]

; 369  : 
; 370  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetMode@CRRECRuler@@QBEHXZ ENDP			; CRRECRuler::GetMode
_TEXT	ENDS
PUBLIC	?SetTabStops@CRRECRuler@@QAEXABVCDWordArray@@@Z	; CRRECRuler::SetTabStops
EXTRN	?UpdateWindow@CWnd@@QAEXXZ:PROC			; CWnd::UpdateWindow
EXTRN	?Invalidate@CWnd@@QAEXH@Z:PROC			; CWnd::Invalidate
EXTRN	?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ:PROC	; CWnd::GetSafeHwnd
EXTRN	?Add@CDWordArray@@QAEHK@Z:PROC			; CDWordArray::Add
EXTRN	??ACDWordArray@@QBEKH@Z:PROC			; CDWordArray::operator[]
EXTRN	?RemoveAll@CDWordArray@@QAEXXZ:PROC		; CDWordArray::RemoveAll
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetTabStops@CRRECRuler@@QAEXABVCDWordArray@@@Z
_TEXT	SEGMENT
_t$171985 = -12						; size = 4
_max$ = -8						; size = 4
_this$ = -4						; size = 4
_arr$ = 8						; size = 4
?SetTabStops@CRRECRuler@@QAEXABVCDWordArray@@@Z PROC	; CRRECRuler::SetTabStops, COMDAT
; _this$ = ecx

; 386  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 387  : 
; 388  : 	m_tabs.RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	?RemoveAll@CDWordArray@@QAEXXZ		; CDWordArray::RemoveAll

; 389  : 	int max = arr.GetSize();

	mov	ecx, DWORD PTR _arr$[ebp]
	call	?GetSize@CDWordArray@@QBEHXZ		; CDWordArray::GetSize
	mov	DWORD PTR _max$[ebp], eax

; 390  : 	for ( int t = 0 ; t < max ; t++ )

	mov	DWORD PTR _t$171985[ebp], 0
	jmp	SHORT $LN4@SetTabStop
$LN3@SetTabStop:
	mov	eax, DWORD PTR _t$171985[ebp]
	add	eax, 1
	mov	DWORD PTR _t$171985[ebp], eax
$LN4@SetTabStop:
	mov	ecx, DWORD PTR _t$171985[ebp]
	cmp	ecx, DWORD PTR _max$[ebp]
	jge	SHORT $LN2@SetTabStop

; 391  : 	{
; 392  : 		m_tabs.Add( arr[ t ] );

	mov	edx, DWORD PTR _t$171985[ebp]
	push	edx
	mov	ecx, DWORD PTR _arr$[ebp]
	call	??ACDWordArray@@QBEKH@Z			; CDWordArray::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	?Add@CDWordArray@@QAEHK@Z		; CDWordArray::Add

; 393  : 	}

	jmp	SHORT $LN3@SetTabStop
$LN2@SetTabStop:

; 394  : 
; 395  : 	if (GetSafeHwnd())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSafeHwnd@CWnd@@QBEPAUHWND__@@XZ	; CWnd::GetSafeHwnd
	test	eax, eax
	je	SHORT $LN5@SetTabStop

; 396  : 	{
; 397  : 		Invalidate(FALSE);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Invalidate@CWnd@@QAEXH@Z		; CWnd::Invalidate

; 398  : 		UpdateWindow();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateWindow@CWnd@@QAEXXZ		; CWnd::UpdateWindow
$LN5@SetTabStop:

; 399  : 	}
; 400  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTabStops@CRRECRuler@@QAEXABVCDWordArray@@@Z ENDP	; CRRECRuler::SetTabStops
_TEXT	ENDS
EXTRN	?OnLButtonDown@CWnd@@IAEXIVCPoint@@@Z:PROC	; CWnd::OnLButtonDown
EXTRN	?urm_RULERACTION@@3IA:DWORD			; urm_RULERACTION
EXTRN	?SetCapture@CWnd@@QAEPAV1@XZ:PROC		; CWnd::SetCapture
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?OnLButtonDown@CRRECRuler@@IAEXIVCPoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nFlags$ = 8						; size = 4
_point$ = 12						; size = 8
?OnLButtonDown@CRRECRuler@@IAEXIVCPoint@@@Z PROC	; CRRECRuler::OnLButtonDown, COMDAT
; _this$ = ecx

; 417  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 418  : 
; 419  : 	SetCapture();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetCapture@CWnd@@QAEPAV1@XZ		; CWnd::SetCapture

; 420  : 	GetParent()->SendMessage( urm_RULERACTION, DOWN, ( LPARAM ) &point );

	lea	eax, DWORD PTR _point$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR ?urm_RULERACTION@@3IA	; urm_RULERACTION
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetParent@CWnd@@QBEPAV1@XZ		; CWnd::GetParent
	mov	ecx, eax
	call	?SendMessageW@CWnd@@QBEJIIJ@Z		; CWnd::SendMessageW

; 421  : 	CWnd::OnLButtonDown( nFlags,  point );

	mov	edx, DWORD PTR _point$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nFlags$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnLButtonDown@CWnd@@IAEXIVCPoint@@@Z	; CWnd::OnLButtonDown

; 422  : 
; 423  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?OnLButtonDown@CRRECRuler@@IAEXIVCPoint@@@Z ENDP	; CRRECRuler::OnLButtonDown
_TEXT	ENDS
EXTRN	?OnLButtonUp@CWnd@@IAEXIVCPoint@@@Z:PROC	; CWnd::OnLButtonUp
EXTRN	__imp__ReleaseCapture@0:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?OnLButtonUp@CRRECRuler@@IAEXIVCPoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nFlags$ = 8						; size = 4
_point$ = 12						; size = 8
?OnLButtonUp@CRRECRuler@@IAEXIVCPoint@@@Z PROC		; CRRECRuler::OnLButtonUp, COMDAT
; _this$ = ecx

; 440  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 441  : 
; 442  : 	ReleaseCapture();

	mov	esi, esp
	call	DWORD PTR __imp__ReleaseCapture@0
	cmp	esi, esp
	call	__RTC_CheckEsp

; 443  : 	GetParent()->SendMessage( urm_RULERACTION, UP, ( LPARAM ) &point );

	lea	eax, DWORD PTR _point$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR ?urm_RULERACTION@@3IA	; urm_RULERACTION
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetParent@CWnd@@QBEPAV1@XZ		; CWnd::GetParent
	mov	ecx, eax
	call	?SendMessageW@CWnd@@QBEJIIJ@Z		; CWnd::SendMessageW

; 444  : 	CWnd::OnLButtonUp( nFlags,  point );

	mov	edx, DWORD PTR _point$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nFlags$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnLButtonUp@CWnd@@IAEXIVCPoint@@@Z	; CWnd::OnLButtonUp

; 445  : 
; 446  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?OnLButtonUp@CRRECRuler@@IAEXIVCPoint@@@Z ENDP		; CRRECRuler::OnLButtonUp
_TEXT	ENDS
EXTRN	?OnMouseMove@CWnd@@IAEXIVCPoint@@@Z:PROC	; CWnd::OnMouseMove
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?OnMouseMove@CRRECRuler@@IAEXIVCPoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nFlags$ = 8						; size = 4
_point$ = 12						; size = 8
?OnMouseMove@CRRECRuler@@IAEXIVCPoint@@@Z PROC		; CRRECRuler::OnMouseMove, COMDAT
; _this$ = ecx

; 463  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 464  : 
; 465  : 	GetParent()->SendMessage( urm_RULERACTION, MOVE, ( LPARAM ) &point );

	lea	eax, DWORD PTR _point$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR ?urm_RULERACTION@@3IA	; urm_RULERACTION
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetParent@CWnd@@QBEPAV1@XZ		; CWnd::GetParent
	mov	ecx, eax
	call	?SendMessageW@CWnd@@QBEJIIJ@Z		; CWnd::SendMessageW

; 466  : 	CWnd::OnMouseMove( nFlags,  point );

	mov	edx, DWORD PTR _point$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _point$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nFlags$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnMouseMove@CWnd@@IAEXIVCPoint@@@Z	; CWnd::OnMouseMove

; 467  : 
; 468  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?OnMouseMove@CRRECRuler@@IAEXIVCPoint@@@Z ENDP		; CRRECRuler::OnMouseMove
_TEXT	ENDS
EXTRN	?OnEnable@CWnd@@IAEXH@Z:PROC			; CWnd::OnEnable
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?OnEnable@CRRECRuler@@IAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bEnable$ = 8						; size = 4
?OnEnable@CRRECRuler@@IAEXH@Z PROC			; CRRECRuler::OnEnable, COMDAT
; _this$ = ecx

; 471  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 472  : 	CWnd::OnEnable(bEnable);

	mov	eax, DWORD PTR _bEnable$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?OnEnable@CWnd@@IAEXH@Z			; CWnd::OnEnable

; 473  : 	Invalidate(FALSE);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Invalidate@CWnd@@QAEXH@Z		; CWnd::Invalidate

; 474  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?OnEnable@CRRECRuler@@IAEXH@Z ENDP			; CRRECRuler::OnEnable
_TEXT	ENDS
END
