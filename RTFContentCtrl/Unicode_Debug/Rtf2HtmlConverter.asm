	TITLE	D:\_CODE\Shared\Rtf2HtmlConverter.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_1CC@LAMD@?$AAM?$AAa?$AAg?$AAe?$AAl?$AAl?$AAa?$AAn?$AA?5?$AAM?$AAS?$AAW?$AAH?$AAE?$AAE?$AAL?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@JDNM@?$AAM?$AAo?$AAu?$AAs?$AAe?$AAZ?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CA@JHCA@?$AAM?$AAS?$AAW?$AAH?$AAE?$AAE?$AAL?$AA_?$AAR?$AAO?$AAL?$AAL?$AAM?$AAS?$AAG?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CK@MMPP@?$AAM?$AAS?$AAH?$AA_?$AAW?$AAH?$AAE?$AAE?$AAL?$AAS?$AAU?$AAP?$AAP?$AAO?$AAR?$AAT?$AA_?$AAM?$AAS?$AAG@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CK@GMOB@?$AAM?$AAS?$AAH?$AA_?$AAS?$AAC?$AAR?$AAO?$AAL?$AAL?$AA_?$AAL?$AAI?$AAN?$AAE?$AAS?$AA_?$AAM?$AAS?$AAG@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0EK@DBHF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08PEKM@lpa?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0EK@BMNG@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08NDGO@lpw?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@DNCN@lpDevModeW?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@BLIP@lptmW?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@DMEN@lptmA?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@BKOP@lpDevModeA?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@CIAH@nBuf?5?$DM?5sizeof?$CIszBuffer?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0EK@FAHJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05BFMC@ATL?3?5?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@JIAP@?$AAA?$AAT?$AAL?$AA?3?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04GBK@p?$CB?$DN0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_04PPJP@p?$DN?$DN0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08DKKN@ppT?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_06CAMI@p?5?$DN?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_01PLJA@0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DO@ODPM@?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AAd?$AA?5?$AAo?$AAn?$AA?5?$AAt?$AAh@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@DKCN@pbstr?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@FGIH@m_str?5?$DN?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@EFGC@nLen?5?$DM?5511?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@FMJE@pStream?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CE@DAAN@vtSrc?5?$DN?$DN?5VT_I4?5?$HM?$HM?5vtSrc?5?$DN?$DN?5VT_ER@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_05NAGO@false?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@PEDK@?$CI?$CIHRESULT?$CJ?$CIhr?$CJ?5?$DO?$DN?50?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@JLLG@m_hKey?5?$DN?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0M@HBEP@m_hKey?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BA@IPJB@hKeyParent?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@KAIA@lRes?5?$DN?$DN?50L?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@MOGK@?$CIlRes?$CB?$DN0L?$CJ?5?$HM?$HM?5?$CIdwType?5?$DN?$DN?5?$CI?54?5?$CJ?$CJ?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CJ@KEEL@?$CIlRes?$CB?$DN0L?$CJ?5?$HM?$HM?5?$CIdwCount?5?$DN?$DN?5sizeof@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@KFMO@pdwCount?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0EK@BPLB@?$CIlRes?$CB?$DN0L?$CJ?5?$HM?$HM?5?$CIdwType?5?$DN?$DN?5?$CI?51?5?$CJ?$CJ?5@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0P@IKMD@lpszValue?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@EPCN@?$AAC?$AAL?$AAS?$AAI?$AAD?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_11A@?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_17LFFB@?$AA?5?$AA?9?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BE@JAHM@?$AAI?$AAn?$AAt?$AAe?$AAr?$AAf?$AAa?$AAc?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BI@BGHN@?$AA?$CI?$AAC?$AAL?$AAS?$AAI?$AAD?$AA?$DP?$AA?$DP?$AA?$DP?$AA?$CJ?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BE@OED@?$AA?5?$AA?9?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13DEJI@?$AA?6?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@FNGA@pThis?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CN@FAHF@pEntries?9?$DOpFunc?5?$DN?$DN?5?$CI?$CI_ATL_CREATO@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07OGJB@?$CBbBlind?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CO@CLJI@?$CInID?5?$DO?$DN?50x0200?5?$CG?$CG?5nID?5?$DM?$DN?50xffff?$CJ@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BM@PELO@?$AAU?$AAn?$AAk?$AAn?$AAo?$AAw?$AAn?$AA?5?$AAE?$AAr?$AAr?$AAo?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_07NEJA@pM?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CC@PFAC@pM?9?$DOcbSize?5?$DN?$DN?5sizeof?$CI_ATL_MODULE@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@LILG@pM?9?$DOm_pObjMap?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BB@FNKO@pM?9?$DOm_hInst?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BD@GEAG@pEntry?9?$DOiType?5?$DN?$DN?52?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@HOAP@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BJ@BIIP@0?5?$CB?$DN?5pMapEntries?9?$DOszData?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@BJHN@?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAR?$AAY?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BI@IMPG@pM?9?$DOm_hInstTypeLib?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19BNDH@?$AA?4?$AAt?$AAl?$AAb?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BK@CNNE@?$AAo?$AAl?$AAe?$AAa?$AAu?$AAt?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@FJNM@UnRegisterTypeLib?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BF@ICL@pDllVersionInfo?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0O@CDEE@DllGetVersion?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@MFGN@pdwMajor?5?$CB?$DN?50?5?$CG?$CG?5pdwMinor?5?$CB?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BK@DCHF@?$AAc?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BI@DNBD@?$AAs?$AAh?$AAe?$AAl?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0L@HMNK@pstrBuffer?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CH@OGBG@D?3?2_CODE?2Shared?2?4?4?23rdparty?2html@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BL@ELJA@wcslen?$CIpstrBuffer?$CJ?5?$DM?5nSize?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BI@OCJO@?$AA?$HL?$AA?2?$AAr?$AAt?$AAf?$AA1?$AA?2?$AAa?$AAn?$AAs?$AAi?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CA@GLLJ@?$AA?2?$AAd?$AAe?$AAf?$AAf?$AA0?$AA?$HL?$AA?2?$AAf?$AAo?$AAn?$AAt?$AAt?$AAb?$AAl?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DE@OGMM@?$AA?$HL?$AA?2?$AAf?$AA?$CF?$AAd?$AA?2?$AAf?$AAn?$AAi?$AAl?$AA?2?$AAf?$AAc?$AAh?$AAa?$AAr?$AAs?$AAe?$AAt?$AA0@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13GMOM@?$AA?$HN?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BK@LLIP@?$AA?$HL?$AA?2?$AAc?$AAo?$AAl?$AAo?$AAr?$AAt?$AAb?$AAl?$AA?5?$AA?$DL?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CO@FEDJ@?$AA?2?$AAr?$AAe?$AAd?$AA?$CF?$AAd?$AA?2?$AAg?$AAr?$AAe?$AAe?$AAn?$AA?$CF?$AAd?$AA?2?$AAb?$AAl?$AAu?$AAe?$AA?$CF@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CA@LEHK@?$AA?2?$AAp?$AAa?$AAr?$AAd?$AA?2?$AAp?$AAl?$AAa?$AAi?$AAn?$AA?2?$AAt?$AAx?$AA0?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@OFPE@?$AA?2?$AAf?$AAs?$AA?$CF?$AAd?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@FOJF@?$CKpszStart?5?$DN?$DN?5L?8?$DM?8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BC@HDMA@?$CKpszStart?5?$DN?$DN?5L?8?$DO?8?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13GDFC@?$AAb?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@GHPE@?$AAs?$AAt?$AAr?$AAo?$AAn?$AAg?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19GDBA@?$AA?2?$AAb?$AA1?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13FNM@?$AAi?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19GEAD@?$AA?2?$AAi?$AA1?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13PMFJ@?$AAu?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@JMIB@?$AA?2?$AAu?$AAl?$AA1?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_15PIM@?$AAb?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@PKF@?$AA?2?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13OGBF@?$AAp?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19NMIN@?$AA?2?$AAp?$AAa?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@FOLM@?$AA?2?$AAp?$AAa?$AAr?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19DMNK@?$AAb?$AAo?$AAd?$AAy?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BA@GFIG@?$AAb?$AAg?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BG@NBJG@?$AAl?$AAe?$AAf?$AAt?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BI@BCNB@?$AAr?$AAi?$AAg?$AAh?$AAt?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BE@EKOC@?$AAt?$AAo?$AAp?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BK@BDJC@?$AAb?$AAo?$AAt?$AAt?$AAo?$AAm?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@KJIA@?$AA?2?$AAm?$AAa?$AAr?$AAg?$AAt?$AA?$CF?$AAd?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@KHKH@?$AA?2?$AAm?$AAa?$AAr?$AAg?$AAb?$AA?$CF?$AAd?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@LDPJ@?$AA?2?$AAl?$AAi?$AA?$CF?$AAd?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@IIK@?$AA?2?$AAr?$AAi?$AA?$CF?$AAd?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19POGD@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@NMBO@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19HEI@?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19DPFF@?$AAf?$AAa?$AAc?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13JFGJ@?$AAa?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19MKE@?$AAh?$AAr?$AAe?$AAf?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19DBLE@?$AAs?$AAp?$AAa?$AAn?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_17GLBJ@?$AAd?$AAi?$AAv?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@CDLF@?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@DIJA@?$AAc?$AAe?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19LCLP@?$AA?2?$AAq?$AAc?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19EABO@?$AAl?$AAe?$AAf?$AAt?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19NDGP@?$AA?2?$AAq?$AAl?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@JIED@?$AAr?$AAi?$AAg?$AAh?$AAt?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19BAMP@?$AA?2?$AAq?$AAr?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BA@EPCE@?$AAj?$AAu?$AAs?$AAt?$AAi?$AAf?$AAy?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19BDLA@?$AA?2?$AAq?$AAj?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@BBAK@?$AAn?$AAo?$AAw?$AAr?$AAa?$AAp?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BE@KLEN@?$AA?2?$AAn?$AAo?$AAw?$AAw?$AAr?$AAa?$AAp?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@JCAI@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@DOCF@?$AAb?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BK@BJIG@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@MOGP@?$AAf?$AAi?$AAx?$AAe?$AAd?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BP@LEPM@wcscmp?$CIszValue?0?5L?$CCfixed?$CC?$CJ?5?$DN?$DN?50?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1EC@PEBJ@?$AA?2?$AAp?$AAa?$AAr?$AA?2?$AAt?$AAr?$AAo?$AAw?$AAd?$AA?5?$AA?2?$AAt?$AAr?$AAg?$AAa?$AAp?$AAh?$AA1?$AA0@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DA@FEHP@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAt?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DA@CFHL@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAl?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DA@OJMG@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAb?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1DA@EIDO@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAr?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_17HHNM@?$AAc?$AAo?$AAl?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@NBCC@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_08GMAA@lWidth?$DO0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1LC@KOAF@?$AA?2?$AAc?$AAl?$AAb?$AAr?$AAd?$AAr?$AAt?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw?$AA1?$AA5?$AA?2?$AAb?$AAr?$AAd@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BE@NEEH@?$AA?2?$AAc?$AAe?$AAl?$AAl?$AAx?$AA?$CF?$AAl?$AAd?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_15MNAG@?$AAt?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BA@PKMO@?$AA?2?$AAi?$AAn?$AAt?$AAb?$AAl?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_15BL@?$AAt?$AAd?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@DBMO@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$DN?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1CC@BFAL@?$AAb?$AAa?$AAc?$AAk?$AAg?$AAr?$AAo?$AAu?$AAn?$AAd?$AA?9?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_15GCI@?$AA?1?$AAb?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BA@GLJN@?$AA?1?$AAs?$AAt?$AAr?$AAo?$AAn?$AAg?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19MDDF@?$AA?2?$AAb?$AA0?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_15GAKG@?$AA?1?$AAi?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19MECG@?$AA?2?$AAi?$AA0?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_15JJCD@?$AA?1?$AAu?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BC@EJLG@?$AA?2?$AAu?$AAl?$AAn?$AAo?$AAn?$AAe?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_17KCPH@?$AA?1?$AAt?$AAr?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@GJEM@?$AA?2?$AAr?$AAo?$AAw?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_17GPOK@?$AA?1?$AAt?$AAd?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@CJDB@?$AA?2?$AAc?$AAe?$AAl?$AAl?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@KMPD@?$AA?1?$AAb?$AAo?$AAd?$AAy?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@GOEK@?$AA?1?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_15PABD@?$AA?1?$AAa?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@KBJN@?$AA?1?$AAs?$AAp?$AAa?$AAn?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19HPKF@?$AA?1?$AAd?$AAi?$AAv?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@ICNL@?$AA?1?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13IAJL@?$AA?$HL?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BG@MFAG@aContexts?4GetSize?$CI?$CJ?$DO0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_17GLOK@?$AA?$HN?$AA?$AN?$AA?6?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1M@FDAF@?$AA?2?$AAc?$AAf?$AA?$CF?$AAd?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BK@KEAH@?$AA?2?$AAh?$AAi?$AAg?$AAh?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?$CF?$AAd?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_19JGHG@?$AA?2?$AAf?$AA?$CF?$AAd?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13ECNF@?$AA?5?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_15BAGJ@?$AA?2?$AA?$HO?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13OGPI@?$AA?$CC?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13KOKC@?$AA?$CG?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13LLFA@?$AA?$DM?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_13BPHN@?$AA?$DO?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0N@MNGN@?$CKppstrPseudo?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BN@PHC@wcsstr?$CIpszTag?0?5L?$CCstyle?$DN?$CC?$CJ?$CB?$DN0?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1O@CHMO@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BG@HGJP@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAt?$AAe?$AAx?$AAt?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BG@PHDK@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AAf?$AAa?$AAc?$AAe?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_1BG@HNBC@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0EK@MDCF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0CA@ODKD@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
;	COMDAT ?IsValid@CMSWordHelper@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocslen@@YAIPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocscpy@@YAPAGPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?T2COLE@@YAPBGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OLE2CT@@YAPBGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?T2OLE@@YAPAGPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OLE2T@@YAPAGPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharNextO@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?A2WBSTR@@YAPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OLE2BSTR@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?T2BSTR@@YAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RevokeClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassObject@_ATL_OBJMAP_ENTRY@ATL@@QAGJKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlTrace2@ATL@@YAXKIPBGZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlSetChildSite@ATL@@YAJPAUIUnknown@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualGUID@ATL@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InlineIsEqualUnknown@ATL@@YAHABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Increment@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Decrement@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReplaceSingleQuote@CComModule@ATL@@SAXPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Apartment@CComApartment@ATL@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComBSTR@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComBSTR@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Length@CComBSTR@ATL@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??ICComBSTR@ATL@@QAEPAPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComBSTR@ATL@@QBEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CComBSTR@ATL@@QAEPAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AppendBSTR@CComBSTR@ATL@@QAEJPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@CComBSTR@ATL@@QAEJPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringW@CComBSTR@ATL@@QAE_NPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WriteToStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReadFromStream@CComBSTR@ATL@@QAEJPAUIStream@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CComVariant@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CComVariant@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8CComVariant@ATL@@QBE_NABUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CComVariant@ATL@@QAEJPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChangeType@CComVariant@ATL@@QAEJGPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalClear@CComVariant@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalCopy@CComVariant@ATL@@QAEXPBUtagVARIANT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRegKey@ATL@@QBEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CRegKey@ATL@@QAEXPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteSubKey@CRegKey@ATL@@QAEJPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CRegKey@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CRegKey@ATL@@QAEJPAUHKEY__@@PBGPAGKKPAU_SECURITY_ATTRIBUTES@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@CRegKey@ATL@@QAEJPAUHKEY__@@PBGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetKeyValue@CRegKey@ATL@@QAEJPBG00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetValue@CRegKey@ATL@@QAEJPBG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RecurseDeleteKey@CRegKey@ATL@@QAEJPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterProgID@CComModule@ATL@@SAJPBG00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBG1IK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBG1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDirLen@ATL@@YGIPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlComQIPtrAssign@ATL@@YGPAUIUnknown@@PAPAU2@PAU2@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlAdvise@ATL@@YGJPAUIUnknown@@0ABU_GUID@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_NextObjectMapEntry@ATL@@YAPAU_ATL_OBJMAP_ENTRY@1@PAU_ATL_MODULE@1@PAU21@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleInit@ATL@@YGJPAU_ATL_MODULE@1@PAU_ATL_OBJMAP_ENTRY@1@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterClassObjects@ATL@@YGJPAU_ATL_MODULE@1@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRevokeClassObjects@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleGetClassObject@ATL@@YGJPAU_ATL_MODULE@1@ABU_GUID@@1PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleTerm@ATL@@YGJPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddTermFunc@ATL@@YGJPAU_ATL_MODULE@1@P6GXK@ZK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlRegisterClassCategoriesHelper@ATL@@YGJABU_GUID@@PBU_ATL_CATMAP_ENTRY@1@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterServer@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServerEx@ATL@@YGJPAU_ATL_MODULE@1@HPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnregisterServer@ATL@@YGJPAU_ATL_MODULE@1@PBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUpdateRegistryFromResourceD@ATL@@YGJPAU_ATL_MODULE@1@PBGHPAU_ATL_REGMAP_ENTRY@1@PAUIRegistrar@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleLoadTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBGPAPAGPAPAUITypeLib@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleUnRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleRegisterTypeLib@ATL@@YGJPAU_ATL_MODULE@1@PBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleAddCreateWndData@ATL@@YGXPAU_ATL_MODULE@1@PAU_AtlCreateWndData@1@PAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlModuleExtractCreateWndData@ATL@@YGPAXPAU_ATL_MODULE@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPAUHINSTANCE__@@PAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetDllVersion@ATL@@YAJPBGPAU_DllVersionInfo@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CTypedPtrList@VCObList@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CTypedPtrList@VCObList@@PAV1@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTypedPtrList@VCObList@@PAV1@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CTypedPtrList@VCPtrList@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CTypedPtrList@VCPtrList@@PAV1@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTypedPtrList@VCPtrList@@PAV1@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CONTEXT@CHtmlToRtf@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Convert@CHtmlToRtf@@QAE?AVCString@@ABV2@ABUtagLOGFONTW@@KK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Parse@CHtmlToRtf@@QAE_NPBGAAPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddText@CHtmlToRtf@@QAEXAAPAGAAPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetStyleAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetColor@CHtmlToRtf@@QAEHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFontFace@CHtmlToRtf@@QAEHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFontSize@CHtmlToRtf@@QBEHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFontSize@CHtmlToRtf@@QBEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetInteger@CHtmlToRtf@@QBEHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1LINK@CHtmlToRtf@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4LINK@CHtmlToRtf@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CONTEXT@CHtmlToRtf@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0LINK@CHtmlToRtf@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CONTEXT@CHtmlToRtf@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0LINK@CHtmlToRtf@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CONTEXT@CHtmlToRtf@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E272
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E273
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E275
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E276
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E277
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E278
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E280
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E281
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E282
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E283
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E285
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E286
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E287
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E288
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E290
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E291
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E292
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E293
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRtfHtmlConverter@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRtfHtmlConverter@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRtfHtmlConverter@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsRTF@CRtfHtmlConverter@@SAHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CRtfHtmlConverter@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CleanupTemporaryImages@CRtfHtmlConverter@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertRtfToHtml@CRtfHtmlConverter@@QAEHPBDPBGAAVCString@@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertRtfToHtmlWithMSWord@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertRtfToHtmlWithIntenso@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertRtfToHtmlWithSautin@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ProcessMSWordHtml@CRtfHtmlConverter@@KAHABVCString@@AAV2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertHtmlToRtf@CRtfHtmlConverter@@QAEHPBDPBGAAVCString@@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertHtmlToRtfWithMSWord@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertHtmlToRtfWithViskoe@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CHtmlToRtf@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CHtmlToRtf@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleValArray@K@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleValArray@K@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertHtmlToRtfWithSautin@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAUIUnknown@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@ABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@PAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@ABU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEAAV0@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetInterfacePtr@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIUnknown@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIUnknown@@@ATL@@QBEPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIUnknown@@@ATL@@QAEPAPAUIUnknown@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8?$CComPtr@UIUnknown@@@ATL@@QBE_NPAUIUnknown@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIPersistStream@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIPersistStream@@@ATL@@QBEPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIPersistStream@@@ATL@@QAEPAPAUIPersistStream@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPointContainer@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPointContainer@@@ATL@@QAEPAPAUIConnectionPointContainer@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPointContainer@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPointContainer@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIConnectionPoint@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIConnectionPoint@@@ATL@@QAEPAPAUIConnectionPoint@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIConnectionPoint@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIConnectionPoint@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICreateErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICreateErrorInfo@@@ATL@@QAEPAPAUICreateErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICreateErrorInfo@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICreateErrorInfo@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIErrorInfo@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UIErrorInfo@@@ATL@@QBEPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIErrorInfo@@@ATL@@QAEPAPAUIErrorInfo@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UICatRegister@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UICatRegister@@@ATL@@QAEPAPAUICatRegister@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UICatRegister@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UICatRegister@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UIRegistrar@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UIRegistrar@@@ATL@@QAEPAPAUIRegistrar@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UIRegistrar@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIRegistrar@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CComPtr@UIRegistrar@@@ATL@@QAEPAUIRegistrar@@PAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CComPtr@UITypeLib@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CComPtr@UITypeLib@@@ATL@@QBEPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??I?$CComPtr@UITypeLib@@@ATL@@QAEPAPAUITypeLib@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??C?$CComPtr@UITypeLib@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UITypeLib@@@1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CTypedPtrList@VCObList@@PAV1@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CTypedPtrList@VCPtrList@@PAV1@@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAEHUtagLOGFONTW@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QBE?AUtagLOGFONTW@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CSimpleValArray@K@ATL@@QAEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CSimpleValArray@K@ATL@@QBEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleArray@K@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleArray@K@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@?$CSimpleArray@K@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CSimpleArray@K@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Find@?$CSimpleArray@K@ATL@@QBEHAAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAEHULINK@CHtmlToRtf@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QBE?AULINK@CHtmlToRtf@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEHAAUCONTEXT@CHtmlToRtf@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAt@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QBEAAUCONTEXT@CHtmlToRtf@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$_CTypedPtrList@VCObList@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$_CTypedPtrList@VCPtrList@@PAV1@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GLINK@CHtmlToRtf@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCONTEXT@CHtmlToRtf@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJABU_GUID@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateObject@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAEJPAGK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AddRef@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEHAAUtagLOGFONTW@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CSimpleArray@UtagLOGFONTW@@@ATL@@QBEAAUtagLOGFONTW@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CSimpleArray@K@ATL@@QAEHAAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CSimpleArray@K@ATL@@QBEAAKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEHAAULINK@CHtmlToRtf@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QBEAAULINK@CHtmlToRtf@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAtIndex@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEXHAAUCONTEXT@CHtmlToRtf@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetIID@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@SAABU_GUID@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Release@?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAtIndex@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEXHAAUtagLOGFONTW@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAtIndex@?$CSimpleArray@K@ATL@@QAEXHAAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetAtIndex@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEXHAAULINK@CHtmlToRtf@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Wrapper@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@AAUCONTEXT@CHtmlToRtf@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Wrapper@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@AAUtagLOGFONTW@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Wrapper@?$CSimpleArray@K@ATL@@QAE@AAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0Wrapper@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@AAULINK@CHtmlToRtf@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_CIP@UIUnknown@@$1?IID_IUnknown@@3U_GUID@@B@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2Wrapper@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@SAPAXIPAUCONTEXT@CHtmlToRtf@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2Wrapper@?$CSimpleArray@UtagLOGFONTW@@@ATL@@SAPAXIPAUtagLOGFONTW@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2Wrapper@?$CSimpleArray@K@ATL@@SAPAXIPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2Wrapper@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@SAPAXIPAULINK@CHtmlToRtf@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCNoTrackObject@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CNoTrackObject@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CNoTrackObject@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$_CTypedPtrList@VCPtrList@@PAV1@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$_CTypedPtrList@VCObList@@PAV1@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CRtfHtmlConverter@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szPseudo@?6??AddText@CHtmlToRtf@@QAEXAAPAGAAPBG@Z@4PAPBGA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?wcsstr@@YAPAGPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CTypedPtrList@VCPtrList@@PAV1@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7?$CTypedPtrList@VCObList@@PAV1@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?IsEqualGUID@@YAHABU_GUID@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?szThreadingModel@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBG1IK@Z@4QBGB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szApartment@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBG1IK@Z@4QBGB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szBoth@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBG1IK@Z@4QBGB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szIPS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBG1IK@Z@4QBGB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szAUTPRX32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBG1IK@Z@4QBGB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szLS32@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBG1IK@Z@4QBGB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szVIProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBG1IK@Z@4QBGB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?szProgID@?1??RegisterClassHelper@CComModule@ATL@@QAGJABU_GUID@@PBG1IK@Z@4QBGB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __GUID_00000000_0000_0000_c000_000000000046
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
FLAT	GROUP _DATA, CONST, _BSS, CRT$XCA, CRT$XCU, CRT$XCL, CRT$XCC, CRT$XCZ
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?GUID_ATLVer30@ATL@@3U_GUID@@A			; ATL::GUID_ATLVer30
PUBLIC	?m_libid@CComModule@ATL@@2U_GUID@@A		; ATL::CComModule::m_libid
PUBLIC	_IID_IInternalConnection
PUBLIC	_LIBID_ATLLib
PUBLIC	?RTFTAG@@3PBDB					; RTFTAG
PUBLIC	?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA	; ATL::CComApartment::ATL_CREATE_OBJECT
PUBLIC	_CLSID_Registrar
PUBLIC	_IID_IRegistrar
PUBLIC	_IID_IDocHostUIHandlerDispatch
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
;	COMDAT ?m_libid@CComModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CComModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CComModule::m_libid
_BSS	ENDS
;	COMDAT ?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA
_BSS	SEGMENT
?ATL_CREATE_OBJECT@CComApartment@ATL@@2IA DD 01H DUP (?) ; ATL::CComApartment::ATL_CREATE_OBJECT
_BSS	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?GUID_ATLVer30@ATL@@3U_GUID@@A
_DATA	SEGMENT
?GUID_ATLVer30@ATL@@3U_GUID@@A DD 0b62f5910H		; ATL::GUID_ATLVer30
	DW	06528H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
_DATA	ENDS
_DATA	SEGMENT
__szAfxTempl DB	'afxtempl.h', 00H
	ORG $+1
_THIS_FILE DB	'D:\_CODE\Shared\Rtf2HtmlConverter.cpp', 00H
	ORG $+2
?RTFTAG@@3PBDB DD FLAT:$SG81426				; RTFTAG
_DATA	ENDS
CRT$XCU	SEGMENT
_$S274	DD	FLAT:_$E273
_$S279	DD	FLAT:_$E278
_$S284	DD	FLAT:_$E283
_$S289	DD	FLAT:_$E288
_$S294	DD	FLAT:_$E293
CRT$XCU	ENDS
_DATA	SEGMENT
_?nImgCount@?5??ConvertRtfToHtml@CRtfHtmlConverter@@QAEHPBDPBGAAVCString@@1@Z@4HA DD 01H
$SG81426 DB	'{\rtf', 00H
	ORG $+2
$SG81441 DB	'H', 00H, 't', 00H, 'm', 00H, 'l', 00H, '2', 00H, 'R', 00H
	DB	't', 00H, 'f', 00H, 00H, 00H
	ORG $+2
$SG81452 DB	'R', 00H, 't', 00H, 'f', 00H, '2', 00H, 'H', 00H, 't', 00H
	DB	'm', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG81463 DB	's', 00H, 'r', 00H, 'c', 00H, '=', 00H, '"', 00H, 'C', 00H
	DB	':', 00H, '/', 00H, 00H, 00H
	ORG $+2
$SG81474 DB	's', 00H, 'r', 00H, 'c', 00H, '=', 00H, '"', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, ':', 00H, '/', 00H, '/', 00H, '/'
	DB	00H, 'C', 00H, ':', 00H, '/', 00H, 00H, 00H
_DATA	ENDS
EXTRN	__chkesp:NEAR
;	COMDAT _$E273
_TEXT	SEGMENT
_$E273	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	call	_$E272
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E273	ENDP
_TEXT	ENDS
EXTRN	_strlen:NEAR
_BSS	SEGMENT
_LENTAG	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT _$E272
_TEXT	SEGMENT
_$E272	PROC NEAR					; COMDAT

; 23   : const int LENTAG = strlen(RTFTAG); // in bytes

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR ?RTFTAG@@3PBDB		; RTFTAG
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _LENTAG, eax
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E272	ENDP
_TEXT	ENDS
;	COMDAT _$E278
_TEXT	SEGMENT
_$E278	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	call	_$E275
	call	_$E277
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E278	ENDP
_TEXT	ENDS
EXTRN	??0CString@@QAE@PBG@Z:NEAR			; CString::CString
_BSS	SEGMENT
_HTML2RTF_FNAME DD 01H DUP (?)
_BSS	ENDS
;	COMDAT _$E275
_TEXT	SEGMENT
_$E275	PROC NEAR					; COMDAT

; 27   : const CString HTML2RTF_FNAME(_T("Html2Rtf"));

	push	ebp
	mov	ebp, esp
	push	OFFSET FLAT:$SG81441
	mov	ecx, OFFSET FLAT:_HTML2RTF_FNAME
	call	??0CString@@QAE@PBG@Z			; CString::CString
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E275	ENDP
_TEXT	ENDS
EXTRN	_atexit:NEAR
;	COMDAT _$E277
_TEXT	SEGMENT
_$E277	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	push	OFFSET FLAT:_$E276
	call	_atexit
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E277	ENDP
_TEXT	ENDS
EXTRN	??1CString@@QAE@XZ:NEAR				; CString::~CString
;	COMDAT _$E276
_TEXT	SEGMENT
_$E276	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET FLAT:_HTML2RTF_FNAME
	call	??1CString@@QAE@XZ			; CString::~CString
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E276	ENDP
_TEXT	ENDS
;	COMDAT _$E283
_TEXT	SEGMENT
_$E283	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	call	_$E280
	call	_$E282
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E283	ENDP
_TEXT	ENDS
_BSS	SEGMENT
_RTF2HTML_FNAME DD 01H DUP (?)
_BSS	ENDS
;	COMDAT _$E280
_TEXT	SEGMENT
_$E280	PROC NEAR					; COMDAT

; 28   : const CString RTF2HTML_FNAME(_T("Rtf2Html"));

	push	ebp
	mov	ebp, esp
	push	OFFSET FLAT:$SG81452
	mov	ecx, OFFSET FLAT:_RTF2HTML_FNAME
	call	??0CString@@QAE@PBG@Z			; CString::CString
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E280	ENDP
_TEXT	ENDS
;	COMDAT _$E282
_TEXT	SEGMENT
_$E282	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	push	OFFSET FLAT:_$E281
	call	_atexit
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E282	ENDP
_TEXT	ENDS
;	COMDAT _$E281
_TEXT	SEGMENT
_$E281	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET FLAT:_RTF2HTML_FNAME
	call	??1CString@@QAE@XZ			; CString::~CString
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E281	ENDP
_TEXT	ENDS
;	COMDAT _$E288
_TEXT	SEGMENT
_$E288	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	call	_$E285
	call	_$E287
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E288	ENDP
_TEXT	ENDS
_BSS	SEGMENT
_INVALID_IMGSRC DD 01H DUP (?)
_BSS	ENDS
;	COMDAT _$E285
_TEXT	SEGMENT
_$E285	PROC NEAR					; COMDAT

; 29   : const CString INVALID_IMGSRC(_T("src=\"C:/"));

	push	ebp
	mov	ebp, esp
	push	OFFSET FLAT:$SG81463
	mov	ecx, OFFSET FLAT:_INVALID_IMGSRC
	call	??0CString@@QAE@PBG@Z			; CString::CString
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E285	ENDP
_TEXT	ENDS
;	COMDAT _$E287
_TEXT	SEGMENT
_$E287	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	push	OFFSET FLAT:_$E286
	call	_atexit
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E287	ENDP
_TEXT	ENDS
;	COMDAT _$E286
_TEXT	SEGMENT
_$E286	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET FLAT:_INVALID_IMGSRC
	call	??1CString@@QAE@XZ			; CString::~CString
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E286	ENDP
_TEXT	ENDS
;	COMDAT _$E293
_TEXT	SEGMENT
_$E293	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	call	_$E290
	call	_$E292
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E293	ENDP
_TEXT	ENDS
_BSS	SEGMENT
_VALID_IMGSRC DD 01H DUP (?)
_BSS	ENDS
;	COMDAT _$E290
_TEXT	SEGMENT
_$E290	PROC NEAR					; COMDAT

; 30   : const CString VALID_IMGSRC(_T("src=\"file:///C:/"));

	push	ebp
	mov	ebp, esp
	push	OFFSET FLAT:$SG81474
	mov	ecx, OFFSET FLAT:_VALID_IMGSRC
	call	??0CString@@QAE@PBG@Z			; CString::CString
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E290	ENDP
_TEXT	ENDS
;	COMDAT _$E292
_TEXT	SEGMENT
_$E292	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	push	OFFSET FLAT:_$E291
	call	_atexit
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E292	ENDP
_TEXT	ENDS
;	COMDAT _$E291
_TEXT	SEGMENT
_$E291	PROC NEAR					; COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET FLAT:_VALID_IMGSRC
	call	??1CString@@QAE@XZ			; CString::~CString
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
_$E291	ENDP
_TEXT	ENDS
PUBLIC	??0CRtfHtmlConverter@@QAE@XZ			; CRtfHtmlConverter::CRtfHtmlConverter
PUBLIC	??_7CRtfHtmlConverter@@6B@			; CRtfHtmlConverter::`vftable'
PUBLIC	??_GCRtfHtmlConverter@@UAEPAXI@Z		; CRtfHtmlConverter::`scalar deleting destructor'
PUBLIC	??_ECRtfHtmlConverter@@UAEPAXI@Z		; CRtfHtmlConverter::`vector deleting destructor'
EXTRN	??0CStringArray@@QAE@XZ:NEAR			; CStringArray::CStringArray
;	COMDAT ??_7CRtfHtmlConverter@@6B@
; File D:\_CODE\Shared\Rtf2HtmlConverter.cpp
CONST	SEGMENT
??_7CRtfHtmlConverter@@6B@ DD FLAT:??_ECRtfHtmlConverter@@UAEPAXI@Z ; CRtfHtmlConverter::`vftable'
CONST	ENDS
;	COMDAT ??0CRtfHtmlConverter@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CRtfHtmlConverter@@QAE@XZ PROC NEAR			; CRtfHtmlConverter::CRtfHtmlConverter, COMDAT

; 274  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CStringArray@@QAE@XZ			; CStringArray::CStringArray
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], OFFSET FLAT:??_7CRtfHtmlConverter@@6B@ ; CRtfHtmlConverter::`vftable'

; 275  : 
; 276  : }

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CRtfHtmlConverter@@QAE@XZ ENDP			; CRtfHtmlConverter::CRtfHtmlConverter
_TEXT	ENDS
PUBLIC	??1CRtfHtmlConverter@@UAE@XZ			; CRtfHtmlConverter::~CRtfHtmlConverter
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
;	COMDAT ??_GCRtfHtmlConverter@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCRtfHtmlConverter@@UAEPAXI@Z PROC NEAR		; CRtfHtmlConverter::`scalar deleting destructor', COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CRtfHtmlConverter@@UAE@XZ		; CRtfHtmlConverter::~CRtfHtmlConverter
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	test	eax, eax
	je	SHORT $L81692
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L81692:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCRtfHtmlConverter@@UAEPAXI@Z ENDP			; CRtfHtmlConverter::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Release@CRtfHtmlConverter@@QAEXXZ		; CRtfHtmlConverter::Release
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	??1CStringArray@@UAE@XZ:NEAR			; CStringArray::~CStringArray
;	COMDAT xdata$x
; File D:\_CODE\Shared\Rtf2HtmlConverter.cpp
xdata$x	SEGMENT
$T83091	DD	019930520H
	DD	01H
	DD	FLAT:$T83094
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T83094	DD	0ffffffffH
	DD	FLAT:$L83087
xdata$x	ENDS
;	COMDAT ??1CRtfHtmlConverter@@UAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12
_this$ = -16
??1CRtfHtmlConverter@@UAE@XZ PROC NEAR			; CRtfHtmlConverter::~CRtfHtmlConverter, COMDAT

; 279  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L83092
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET FLAT:??_7CRtfHtmlConverter@@6B@ ; CRtfHtmlConverter::`vftable'
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 280  : 	Release();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Release@CRtfHtmlConverter@@QAEXXZ	; CRtfHtmlConverter::Release

; 281  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CStringArray@@UAE@XZ			; CStringArray::~CStringArray
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L83087:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CStringArray@@UAE@XZ			; CStringArray::~CStringArray
	ret	0
$L83092:
	mov	eax, OFFSET FLAT:$T83091
	jmp	___CxxFrameHandler
text$x	ENDS
??1CRtfHtmlConverter@@UAE@XZ ENDP			; CRtfHtmlConverter::~CRtfHtmlConverter
PUBLIC	?IsRTF@CRtfHtmlConverter@@SAHPBD@Z		; CRtfHtmlConverter::IsRTF
EXTRN	__imp__strncmp:NEAR
;	COMDAT ?IsRTF@CRtfHtmlConverter@@SAHPBD@Z
_TEXT	SEGMENT
_szRTF$ = 8
?IsRTF@CRtfHtmlConverter@@SAHPBD@Z PROC NEAR		; CRtfHtmlConverter::IsRTF, COMDAT

; 284  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 285  : 	return (strncmp(szRTF, RTFTAG, LENTAG) == 0);

	mov	esi, esp
	mov	eax, DWORD PTR _LENTAG
	push	eax
	mov	ecx, DWORD PTR ?RTFTAG@@3PBDB		; RTFTAG
	push	ecx
	mov	edx, DWORD PTR _szRTF$[ebp]
	push	edx
	call	DWORD PTR __imp__strncmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__chkesp
	neg	eax
	sbb	eax, eax
	inc	eax

; 286  : }

	pop	esi
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
?IsRTF@CRtfHtmlConverter@@SAHPBD@Z ENDP			; CRtfHtmlConverter::IsRTF
_TEXT	ENDS
PUBLIC	?CleanupTemporaryImages@CRtfHtmlConverter@@IAEXXZ ; CRtfHtmlConverter::CleanupTemporaryImages
;	COMDAT ?Release@CRtfHtmlConverter@@QAEXXZ
_TEXT	SEGMENT
$T83102 = -4
$T83103 = -8
_this$ = -12
?Release@CRtfHtmlConverter@@QAEXXZ PROC NEAR		; CRtfHtmlConverter::Release, COMDAT

; 289  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 290  : 	delete m_pWordHelper;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR $T83103[ebp], ecx
	mov	edx, DWORD PTR $T83103[ebp]
	mov	DWORD PTR $T83102[ebp], edx
	cmp	DWORD PTR $T83102[ebp], 0
	je	SHORT $L83104
	mov	esi, esp
	push	1
	mov	eax, DWORD PTR $T83102[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T83102[ebp]
	call	DWORD PTR [edx]
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR -16+[ebp], eax
	jmp	SHORT $L83105
$L83104:
	mov	DWORD PTR -16+[ebp], 0
$L83105:

; 291  : 	m_pWordHelper = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 292  : 	
; 293  : 	CleanupTemporaryImages();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanupTemporaryImages@CRtfHtmlConverter@@IAEXXZ ; CRtfHtmlConverter::CleanupTemporaryImages

; 294  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@CRtfHtmlConverter@@QAEXXZ ENDP			; CRtfHtmlConverter::Release
_TEXT	ENDS
EXTRN	?GetSize@CStringArray@@QBEHXZ:NEAR		; CStringArray::GetSize
EXTRN	??ACStringArray@@QAEAAVCString@@H@Z:NEAR	; CStringArray::operator[]
EXTRN	?RemoveAt@CStringArray@@QAEXHH@Z:NEAR		; CStringArray::RemoveAt
EXTRN	??BCString@@QBEPBGXZ:NEAR			; CString::operator unsigned short const *
EXTRN	?DeleteFolder@FileMisc@@YAHPBGKPAX@Z:NEAR	; FileMisc::DeleteFolder
;	COMDAT ?CleanupTemporaryImages@CRtfHtmlConverter@@IAEXXZ
_TEXT	SEGMENT
_this$ = -12
_nFolder$ = -4
_sFolder$81711 = -8
?CleanupTemporaryImages@CRtfHtmlConverter@@IAEXXZ PROC NEAR ; CRtfHtmlConverter::CleanupTemporaryImages, COMDAT

; 297  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 298  : 	int nFolder = m_aTempImageFolders.GetSize();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetSize@CStringArray@@QBEHXZ		; CStringArray::GetSize
	mov	DWORD PTR _nFolder$[ebp], eax
$L81709:

; 299  : 	
; 300  : 	while (nFolder--)

	mov	eax, DWORD PTR _nFolder$[ebp]
	mov	ecx, DWORD PTR _nFolder$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _nFolder$[ebp], ecx
	test	eax, eax
	je	SHORT $L81710

; 302  : 		const CString& sFolder = m_aTempImageFolders[nFolder];

	mov	edx, DWORD PTR _nFolder$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??ACStringArray@@QAEAAVCString@@H@Z	; CStringArray::operator[]
	mov	DWORD PTR _sFolder$81711[ebp], eax

; 303  : 		
; 304  : 		if (FileMisc::DeleteFolder(sFolder))

	push	0
	push	1
	mov	ecx, DWORD PTR _sFolder$81711[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	call	?DeleteFolder@FileMisc@@YAHPBGKPAX@Z	; FileMisc::DeleteFolder
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $L81712

; 305  : 			m_aTempImageFolders.RemoveAt(nFolder);

	push	1
	mov	eax, DWORD PTR _nFolder$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?RemoveAt@CStringArray@@QAEXHH@Z	; CStringArray::RemoveAt
$L81712:

; 306  : 	}

	jmp	SHORT $L81709
$L81710:

; 307  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
?CleanupTemporaryImages@CRtfHtmlConverter@@IAEXXZ ENDP	; CRtfHtmlConverter::CleanupTemporaryImages
_TEXT	ENDS
PUBLIC	?ConvertRtfToHtml@CRtfHtmlConverter@@QAEHPBDPBGAAVCString@@1@Z ; CRtfHtmlConverter::ConvertRtfToHtml
PUBLIC	?ConvertRtfToHtmlWithMSWord@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z ; CRtfHtmlConverter::ConvertRtfToHtmlWithMSWord
PUBLIC	?ConvertRtfToHtmlWithIntenso@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z ; CRtfHtmlConverter::ConvertRtfToHtmlWithIntenso
PUBLIC	?ConvertRtfToHtmlWithSautin@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z ; CRtfHtmlConverter::ConvertRtfToHtmlWithSautin
EXTRN	?Add@CStringArray@@QAEHABVCString@@@Z:NEAR	; CStringArray::Add
EXTRN	?TerminatePath@FileMisc@@YAAAVCString@@AAV2@@Z:NEAR ; FileMisc::TerminatePath
EXTRN	__imp__RemoveDirectoryW@4:NEAR
EXTRN	??0CString@@QAE@XZ:NEAR				; CString::CString
EXTRN	?CreateFolder@FileMisc@@YAHPBG@Z:NEAR		; FileMisc::CreateFolder
EXTRN	?IsEmpty@CString@@QBEHXZ:NEAR			; CString::IsEmpty
EXTRN	??4CString@@QAEABV0@ABV0@@Z:NEAR		; CString::operator=
EXTRN	__imp__DeleteFileW@4:NEAR
EXTRN	?GetTempFolder@FileMisc@@YA?AVCString@@XZ:NEAR	; FileMisc::GetTempFolder
EXTRN	?GetTempFileNameW@FileMisc@@YA?AVCString@@PBG0@Z:NEAR ; FileMisc::GetTempFileNameW
EXTRN	?SaveFile@FileMisc@@YAHPBGPBD@Z:NEAR		; FileMisc::SaveFile
EXTRN	?Format@CString@@QAAXPBGZZ:NEAR			; CString::Format
;	COMDAT data
; File D:\_CODE\Shared\Rtf2HtmlConverter.cpp
data	SEGMENT
$SG81729 DB	'%', 00H, 's', 00H, 'i', 00H, 'm', 00H, 'g', 00H, '%', 00H
	DB	'd', 00H, 00H, 00H
$SG81733 DB	'r', 00H, 't', 00H, 'f', 00H, 00H, 00H
data	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T83118	DD	019930520H
	DD	05H
	DD	FLAT:$T83120
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T83120	DD	0ffffffffH
	DD	FLAT:$L83112
	DD	00H
	DD	FLAT:$L83113
	DD	01H
	DD	FLAT:$L83114
	DD	01H
	DD	FLAT:$L83115
	DD	03H
	DD	FLAT:$L83116
xdata$x	ENDS
;	COMDAT ?ConvertRtfToHtml@CRtfHtmlConverter@@QAEHPBDPBGAAVCString@@1@Z
_TEXT	SEGMENT
$T83110 = -36
$T83111 = -40
__$EHRec$ = -12
_szRTF$ = 8
_szCharSet$ = 12
_sHtml$ = 16
_szImageDir$ = 20
_this$ = -44
_sImageDir$ = -16
_sUniqueDir$ = -20
_bTempImageDir$ = -32
_sTempRtf$ = -28
_sTempHtml$ = -24
?ConvertRtfToHtml@CRtfHtmlConverter@@QAEHPBDPBGAAVCString@@1@Z PROC NEAR ; CRtfHtmlConverter::ConvertRtfToHtml, COMDAT

; 310  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L83119
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 311  : 	// sanity check
; 312  : 	if (!szRTF || !szRTF[0])

	cmp	DWORD PTR _szRTF$[ebp], 0
	je	SHORT $L81721
	mov	eax, DWORD PTR _szRTF$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $L81720
$L81721:

; 313  : 		return FALSE;

	xor	eax, eax
	jmp	$L81719
$L81720:

; 314  : 
; 315  : 	CString sImageDir(szImageDir), sUniqueDir;

	mov	edx, DWORD PTR _szImageDir$[ebp]
	push	edx
	lea	ecx, DWORD PTR _sImageDir$[ebp]
	call	??0CString@@QAE@PBG@Z			; CString::CString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sUniqueDir$[ebp]
	call	??0CString@@QAE@XZ			; CString::CString
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 316  : 	BOOL bTempImageDir = sImageDir.IsEmpty();

	lea	ecx, DWORD PTR _sImageDir$[ebp]
	call	?IsEmpty@CString@@QBEHXZ		; CString::IsEmpty
	mov	DWORD PTR _bTempImageDir$[ebp], eax

; 317  : 	
; 318  : 	if (bTempImageDir)

	cmp	DWORD PTR _bTempImageDir$[ebp], 0
	je	SHORT $L81725

; 319  : 		sImageDir = FileMisc::GetTempFolder();

	lea	eax, DWORD PTR $T83110[ebp]
	push	eax
	call	?GetTempFolder@FileMisc@@YA?AVCString@@XZ ; FileMisc::GetTempFolder
	add	esp, 4
	mov	DWORD PTR -48+[ebp], eax
	mov	ecx, DWORD PTR -48+[ebp]
	mov	DWORD PTR -52+[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR -52+[ebp]
	push	edx
	lea	ecx, DWORD PTR _sImageDir$[ebp]
	call	??4CString@@QAEABV0@ABV0@@Z		; CString::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T83110[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
$L81725:

; 323  : 	
; 324  : 	FileMisc::TerminatePath(sImageDir);

	lea	eax, DWORD PTR _sImageDir$[ebp]
	push	eax
	call	?TerminatePath@FileMisc@@YAAAVCString@@AAV2@@Z ; FileMisc::TerminatePath
	add	esp, 4

; 325  : 	sUniqueDir.Format(_T("%simg%d"), sImageDir, nImgCount++);

	mov	ecx, DWORD PTR _?nImgCount@?5??ConvertRtfToHtml@CRtfHtmlConverter@@QAEHPBDPBGAAVCString@@1@Z@4HA
	mov	DWORD PTR -56+[ebp], ecx
	mov	edx, DWORD PTR -56+[ebp]
	push	edx
	mov	eax, DWORD PTR _sImageDir$[ebp]
	push	eax
	push	OFFSET FLAT:$SG81729
	mov	ecx, DWORD PTR _?nImgCount@?5??ConvertRtfToHtml@CRtfHtmlConverter@@QAEHPBDPBGAAVCString@@1@Z@4HA
	add	ecx, 1
	mov	DWORD PTR _?nImgCount@?5??ConvertRtfToHtml@CRtfHtmlConverter@@QAEHPBDPBGAAVCString@@1@Z@4HA, ecx
	lea	edx, DWORD PTR _sUniqueDir$[ebp]
	push	edx
	call	?Format@CString@@QAAXPBGZZ		; CString::Format
	add	esp, 16					; 00000010H

; 326  : 
; 327  : 	FileMisc::DeleteFolder(sUniqueDir);

	push	0
	push	1
	lea	ecx, DWORD PTR _sUniqueDir$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	call	?DeleteFolder@FileMisc@@YAHPBGKPAX@Z	; FileMisc::DeleteFolder
	add	esp, 12					; 0000000cH

; 328  : 	FileMisc::CreateFolder(sUniqueDir);

	lea	ecx, DWORD PTR _sUniqueDir$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	call	?CreateFolder@FileMisc@@YAHPBG@Z	; FileMisc::CreateFolder
	add	esp, 4

; 329  : 	
; 330  : 	// track temp image folders for later cleanup
; 331  : 	if (bTempImageDir)

	cmp	DWORD PTR _bTempImageDir$[ebp], 0
	je	SHORT $L81730

; 332  : 		m_aTempImageFolders.Add(sUniqueDir);

	lea	eax, DWORD PTR _sUniqueDir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Add@CStringArray@@QAEHABVCString@@@Z	; CStringArray::Add
$L81730:

; 333  : 	
; 334  : 	// save rtf as temp Ansi file
; 335  : 	CString sTempRtf = FileMisc::GetTempFileName(RTF2HTML_FNAME, _T("rtf")), sTempHtml;

	push	OFFSET FLAT:$SG81733
	mov	ecx, OFFSET FLAT:_RTF2HTML_FNAME
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	lea	ecx, DWORD PTR _sTempRtf$[ebp]
	push	ecx
	call	?GetTempFileNameW@FileMisc@@YA?AVCString@@PBG0@Z ; FileMisc::GetTempFileNameW
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _sTempHtml$[ebp]
	call	??0CString@@QAE@XZ			; CString::CString
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 336  : 	FileMisc::SaveFile(sTempRtf, szRTF); 

	mov	edx, DWORD PTR _szRTF$[ebp]
	push	edx
	lea	ecx, DWORD PTR _sTempRtf$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	call	?SaveFile@FileMisc@@YAHPBGPBD@Z		; FileMisc::SaveFile
	add	esp, 8

; 337  : 
; 338  : 	// do the conversion
; 339  :  	if (ConvertRtfToHtmlWithSautin(sTempRtf, szCharSet, sHtml, sUniqueDir))

	lea	ecx, DWORD PTR _sUniqueDir$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	mov	eax, DWORD PTR _sHtml$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szCharSet$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sTempRtf$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConvertRtfToHtmlWithSautin@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z ; CRtfHtmlConverter::ConvertRtfToHtmlWithSautin
	test	eax, eax
	je	SHORT $L81735

; 343  :  	else if (ConvertRtfToHtmlWithMSWord(sTempRtf, szCharSet, sHtml, sUniqueDir))

	jmp	SHORT $L81739
$L81735:
	lea	ecx, DWORD PTR _sUniqueDir$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	mov	edx, DWORD PTR _sHtml$[ebp]
	push	edx
	mov	eax, DWORD PTR _szCharSet$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sTempRtf$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConvertRtfToHtmlWithMSWord@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z ; CRtfHtmlConverter::ConvertRtfToHtmlWithMSWord
	test	eax, eax
	je	SHORT $L81737

; 347  :  	else if (ConvertRtfToHtmlWithIntenso(sTempRtf, szCharSet, sHtml, sUniqueDir))

	jmp	SHORT $L81739
$L81737:
	lea	ecx, DWORD PTR _sUniqueDir$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	mov	ecx, DWORD PTR _sHtml$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szCharSet$[ebp]
	push	edx
	lea	ecx, DWORD PTR _sTempRtf$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConvertRtfToHtmlWithIntenso@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z ; CRtfHtmlConverter::ConvertRtfToHtmlWithIntenso
$L81739:

; 351  : 
; 352  : 
; 353  : 	// cleanup temp rtf file
; 354  : 	// NOTE: we clean up temporary image folders when we close
; 355  : 	DeleteFile(sTempRtf);

	lea	ecx, DWORD PTR _sTempRtf$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__DeleteFileW@4
	cmp	esi, esp
	call	__chkesp

; 356  : 	
; 357  : 	// cleanup empty 'permanent' image folders.
; 358  : 	// This will fail intentionally if the folder contains anything
; 359  : 	if (!bTempImageDir)

	cmp	DWORD PTR _bTempImageDir$[ebp], 0
	jne	SHORT $L81740

; 360  : 		RemoveDirectory(sUniqueDir);

	lea	ecx, DWORD PTR _sUniqueDir$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__RemoveDirectoryW@4
	cmp	esi, esp
	call	__chkesp
$L81740:

; 361  : 
; 362  : 	return !sHtml.IsEmpty();

	mov	ecx, DWORD PTR _sHtml$[ebp]
	call	?IsEmpty@CString@@QBEHXZ		; CString::IsEmpty
	neg	eax
	sbb	eax, eax
	inc	eax
	mov	DWORD PTR $T83111[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _sTempHtml$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _sTempRtf$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sUniqueDir$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sImageDir$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	eax, DWORD PTR $T83111[ebp]
$L81719:

; 363  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L83112:
	lea	ecx, DWORD PTR _sImageDir$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83113:
	lea	ecx, DWORD PTR _sUniqueDir$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83114:
	lea	ecx, DWORD PTR $T83110[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83115:
	lea	ecx, DWORD PTR _sTempRtf$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83116:
	lea	ecx, DWORD PTR _sTempHtml$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83119:
	mov	eax, OFFSET FLAT:$T83118
	jmp	___CxxFrameHandler
text$x	ENDS
?ConvertRtfToHtml@CRtfHtmlConverter@@QAEHPBDPBGAAVCString@@1@Z ENDP ; CRtfHtmlConverter::ConvertRtfToHtml
PUBLIC	?ProcessMSWordHtml@CRtfHtmlConverter@@KAHABVCString@@AAV2@@Z ; CRtfHtmlConverter::ProcessMSWordHtml
PUBLIC	?IsValid@CMSWordHelper@@QBEHXZ			; CMSWordHelper::IsValid
EXTRN	??0CMSWordHelper@@QAE@H@Z:NEAR			; CMSWordHelper::CMSWordHelper
EXTRN	?ConvertFile@CMSWordHelper@@QAEHABVCString@@W4WdOpenFormat@WordAPI@@0W4WdSaveFormat@4@W4MsoEncoding@4@@Z:NEAR ; CMSWordHelper::ConvertFile
EXTRN	?ReplaceExtension@FileMisc@@YAAAVCString@@AAV2@PBG@Z:NEAR ; FileMisc::ReplaceExtension
EXTRN	?LoadFile@FileMisc@@YAHPBGAAVCString@@H@Z:NEAR	; FileMisc::LoadFile
EXTRN	??2@YAPAXIPBDH@Z:NEAR				; operator new
EXTRN	??3@YAXPAXPBDH@Z:NEAR				; operator delete
;	COMDAT data
; File D:\_CODE\Shared\Rtf2HtmlConverter.cpp
data	SEGMENT
$SG81759 DB	'h', 00H, 't', 00H, 'm', 00H, 'l', 00H, 00H, 00H
data	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T83137	DD	019930520H
	DD	04H
	DD	FLAT:$T83139
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T83139	DD	0ffffffffH
	DD	FLAT:$L83132
	DD	0ffffffffH
	DD	FLAT:$L83133
	DD	01H
	DD	FLAT:$L83134
	DD	01H
	DD	FLAT:$L83135
xdata$x	ENDS
;	COMDAT ?ConvertRtfToHtmlWithMSWord@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z
_TEXT	SEGMENT
$T83126 = -24
$T83127 = -28
$T83130 = -32
$T83131 = -36
__$EHRec$ = -12
_szRtfFile$ = 8
_sHtml$ = 16
_szUniqueDir$ = 20
_this$ = -40
_bSuccess$ = -16
_sTempHtml$81758 = -20
?ConvertRtfToHtmlWithMSWord@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z PROC NEAR ; CRtfHtmlConverter::ConvertRtfToHtmlWithMSWord, COMDAT

; 366  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L83138
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR _this$[ebp], ecx

; 367  : 	BOOL bSuccess = FALSE;

	mov	DWORD PTR _bSuccess$[ebp], 0

; 368  : 
; 369  : 	// initialize first time
; 370  : 	if (m_pWordHelper == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $L81750

; 371  : 		m_pWordHelper = new CMSWordHelper(12);

	push	371					; 00000173H
	push	OFFSET FLAT:_THIS_FILE
	push	24					; 00000018H
	call	??2@YAPAXIPBDH@Z			; operator new
	add	esp, 12					; 0000000cH
	mov	DWORD PTR $T83127[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T83127[ebp], 0
	je	SHORT $L83128
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T83127[ebp]
	call	??0CMSWordHelper@@QAE@H@Z		; CMSWordHelper::CMSWordHelper
	mov	DWORD PTR -44+[ebp], eax
	jmp	SHORT $L83129
$L83128:
	mov	DWORD PTR -44+[ebp], 0
$L83129:
	mov	ecx, DWORD PTR -44+[ebp]
	mov	DWORD PTR $T83126[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T83126[ebp]
	mov	DWORD PTR [edx+4], eax
$L81750:

; 372  : 	
; 373  : 	if (m_pWordHelper->IsValid())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?IsValid@CMSWordHelper@@QBEHXZ		; CMSWordHelper::IsValid
	test	eax, eax
	je	$L81757

; 375  : 		// html file must be placed inside the unique folder
; 376  : 		CString sTempHtml(szUniqueDir);

	mov	edx, DWORD PTR _szUniqueDir$[ebp]
	push	edx
	lea	ecx, DWORD PTR _sTempHtml$81758[ebp]
	call	??0CString@@QAE@PBG@Z			; CString::CString
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 377  : 		FileMisc::ReplaceExtension(sTempHtml, _T("html"));

	push	OFFSET FLAT:$SG81759
	lea	eax, DWORD PTR _sTempHtml$81758[ebp]
	push	eax
	call	?ReplaceExtension@FileMisc@@YAAAVCString@@AAV2@PBG@Z ; FileMisc::ReplaceExtension
	add	esp, 8

; 378  : 		
; 379  : 		// prepare file system for Word else it will spit
; 380  : 		::DeleteFile(sTempHtml);

	lea	ecx, DWORD PTR _sTempHtml$81758[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__DeleteFileW@4
	cmp	esi, esp
	call	__chkesp

; 381  : 		
; 382  : 		bSuccess = m_pWordHelper->ConvertFile(szRtfFile, WordAPI::wdOpenFormatRTF, 
; 383  : 												sTempHtml, WordAPI::wdSaveFormatFilteredHTML);

	mov	ecx, DWORD PTR _szRtfFile$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T83130[ebp]
	call	??0CString@@QAE@PBG@Z			; CString::CString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	push	50001					; 0000c351H
	push	10					; 0000000aH
	lea	edx, DWORD PTR _sTempHtml$81758[ebp]
	push	edx
	push	3
	lea	eax, DWORD PTR $T83130[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?ConvertFile@CMSWordHelper@@QAEHABVCString@@W4WdOpenFormat@WordAPI@@0W4WdSaveFormat@4@W4MsoEncoding@4@@Z ; CMSWordHelper::ConvertFile
	mov	DWORD PTR _bSuccess$[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T83130[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString

; 384  : 		
; 385  : 		if (bSuccess && FileMisc::LoadFile(sTempHtml, sHtml))

	cmp	DWORD PTR _bSuccess$[ebp], 0
	je	SHORT $L81761
	push	0
	mov	edx, DWORD PTR _sHtml$[ebp]
	push	edx
	lea	ecx, DWORD PTR _sTempHtml$81758[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	call	?LoadFile@FileMisc@@YAHPBGAAVCString@@H@Z ; FileMisc::LoadFile
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $L81761

; 387  : 			bSuccess = (ProcessMSWordHtml(szUniqueDir, sHtml) > 0);

	mov	eax, DWORD PTR _szUniqueDir$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T83131[ebp]
	call	??0CString@@QAE@PBG@Z			; CString::CString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _sHtml$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T83131[ebp]
	push	edx
	call	?ProcessMSWordHtml@CRtfHtmlConverter@@KAHABVCString@@AAV2@@Z ; CRtfHtmlConverter::ProcessMSWordHtml
	add	esp, 8
	xor	ecx, ecx
	test	eax, eax
	setg	cl
	mov	DWORD PTR _bSuccess$[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T83131[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
$L81761:

; 389  : 
; 390  : 		// cleanup temp file
; 391  : 		::DeleteFile(sTempHtml);

	lea	ecx, DWORD PTR _sTempHtml$81758[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__DeleteFileW@4
	cmp	esi, esp
	call	__chkesp

; 392  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sTempHtml$81758[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
$L81757:

; 393  : 
; 394  : 	return bSuccess;

	mov	eax, DWORD PTR _bSuccess$[ebp]

; 395  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L83132:
	push	371					; 00000173H
	push	OFFSET FLAT:_THIS_FILE
	mov	eax, DWORD PTR $T83127[ebp]
	push	eax
	call	??3@YAXPAXPBDH@Z			; operator delete
	add	esp, 12					; 0000000cH
	ret	0
$L83133:
	lea	ecx, DWORD PTR _sTempHtml$81758[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83134:
	lea	ecx, DWORD PTR $T83130[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83135:
	lea	ecx, DWORD PTR $T83131[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83138:
	mov	eax, OFFSET FLAT:$T83137
	jmp	___CxxFrameHandler
text$x	ENDS
?ConvertRtfToHtmlWithMSWord@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z ENDP ; CRtfHtmlConverter::ConvertRtfToHtmlWithMSWord
EXTRN	?s_pWord@CMSWordHelper@@1PAV_Application@WordAPI@@A:DWORD ; CMSWordHelper::s_pWord
;	COMDAT ?IsValid@CMSWordHelper@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?IsValid@CMSWordHelper@@QBEHXZ PROC NEAR		; CMSWordHelper::IsValid, COMDAT

; 89   : 	BOOL IsValid() const { return (s_pWord != NULL); }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	cmp	DWORD PTR ?s_pWord@CMSWordHelper@@1PAV_Application@WordAPI@@A, 0 ; CMSWordHelper::s_pWord
	setne	al
	mov	esp, ebp
	pop	ebp
	ret	0
?IsValid@CMSWordHelper@@QBEHXZ ENDP			; CMSWordHelper::IsValid
_TEXT	ENDS
EXTRN	__imp__GetProcAddress@8:NEAR
EXTRN	__imp__LoadLibraryW@4:NEAR
EXTRN	??H@YG?AVCString@@ABV0@PBG@Z:NEAR		; operator+
EXTRN	??H@YG?AVCString@@PBGABV0@@Z:NEAR		; operator+
EXTRN	?GetAppFolder@FileMisc@@YA?AVCString@@PBG@Z:NEAR ; FileMisc::GetAppFolder
_BSS	SEGMENT
_?hMod@?1??ConvertRtfToHtmlWithIntenso@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z@4PAUHINSTANCE__@@A DD 01H DUP (?)
_?$S295@?1??ConvertRtfToHtmlWithIntenso@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z@4EA DB 01H DUP (?)
	ALIGN	4

$SG81808 DW	01H DUP (?)
	ALIGN	4

$SG81809 DW	01H DUP (?)
	ALIGN	4

$SG81810 DW	01H DUP (?)
	ALIGN	4

$SG81811 DW	01H DUP (?)
	ALIGN	4

$SG81812 DW	01H DUP (?)
_BSS	ENDS
;	COMDAT data
; File D:\_CODE\Shared\Rtf2HtmlConverter.cpp
data	SEGMENT
$SG81774 DB	'\', 00H, 'r', 00H, 't', 00H, 'f', 00H, '2', 00H, 'h', 00H
	DB	't', 00H, 'm', 00H, 'l', 00H, 'b', 00H, 'r', 00H, 'i', 00H, 'd'
	DB	00H, 'g', 00H, 'e', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H
	DB	00H, 00H
$SG81782 DB	'h', 00H, 't', 00H, 'm', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG81799 DB	'fnRtf2Html', 00H
	ORG $+1
$SG81804 DB	'/', 00H, 'C', 00H, 'S', 00H, ':', 00H, 00H, 00H
	ORG $+2
$SG81806 DB	'/', 00H, 'I', 00H, 'D', 00H, ':', 00H, '%', 00H, 's', 00H
	DB	00H, 00H
	ORG $+2
$SG81813 DB	'/', 00H, 'D', 00H, 'S', 00H, ':', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H
$SG81814 DB	'/', 00H, 'I', 00H, 'T', 00H, ':', 00H, 'p', 00H, 'n', 00H
	DB	'g', 00H, 00H, 00H
data	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T83163	DD	019930520H
	DD	0bH
	DD	FLAT:$T83165
	DD	01H
	DD	FLAT:$T83166
	DD	2 DUP(00H)
	ORG $+4
$T83165	DD	0ffffffffH
	DD	FLAT:$L83155
	DD	00H
	DD	FLAT:$L83156
	DD	0ffffffffH
	DD	FLAT:$L83156
	DD	02H
	DD	FLAT:$L83157
	DD	03H
	DD	00H
	DD	04H
	DD	FLAT:$L83158
	DD	05H
	DD	FLAT:$L83159
	DD	04H
	DD	FLAT:$L83159
	DD	07H
	DD	FLAT:$L83160
	DD	08H
	DD	FLAT:$L83161
	DD	03H
	DD	00H
$T83166	DD	04H
	DD	09H
	DD	0aH
	DD	01H
	DD	FLAT:$T83167
	ORG $+4
$T83167	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L83154
xdata$x	ENDS
;	COMDAT ?ConvertRtfToHtmlWithIntenso@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z
_TEXT	SEGMENT
$T83147 = -44
$T83148 = -48
$T83149 = -52
$T83152 = -56
__$EHRec$ = -16
_szRtfFile$ = 8
_szCharSet$ = 12
_sHtml$ = 16
_szUniqueDir$ = 20
_this$ = -60
_bSuccess$ = -24
_sRtf2HtmlPath$ = -28
_sTempHtml$ = -20
_fnRtf2Html$81797 = -32
_sCharSet$81801 = -40
_sImageDir$81805 = -36
?ConvertRtfToHtmlWithIntenso@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z PROC NEAR ; CRtfHtmlConverter::ConvertRtfToHtmlWithIntenso, COMDAT

; 398  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L83164
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	push	ecx
	lea	edi, DWORD PTR [ebp-124]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 399  : 	BOOL bSuccess = FALSE;

	mov	DWORD PTR _bSuccess$[ebp], 0

; 400  : 	
; 401  : 	CString sRtf2HtmlPath = FileMisc::GetAppFolder() + _T("\\rtf2htmlbridge.dll");

	push	0
	lea	eax, DWORD PTR $T83147[ebp]
	push	eax
	call	?GetAppFolder@FileMisc@@YA?AVCString@@PBG@Z ; FileMisc::GetAppFolder
	add	esp, 8
	mov	DWORD PTR -64+[ebp], eax
	mov	ecx, DWORD PTR -64+[ebp]
	mov	DWORD PTR -68+[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	push	OFFSET FLAT:$SG81774
	mov	edx, DWORD PTR -68+[ebp]
	push	edx
	lea	eax, DWORD PTR _sRtf2HtmlPath$[ebp]
	push	eax
	call	??H@YG?AVCString@@ABV0@PBG@Z		; operator+
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR $T83147[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString

; 402  : 	static HMODULE hMod = LoadLibrary(sRtf2HtmlPath);

	xor	ecx, ecx
	mov	cl, BYTE PTR _?$S295@?1??ConvertRtfToHtmlWithIntenso@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z@4EA
	and	ecx, 1
	test	ecx, ecx
	jne	SHORT $L81779
	mov	dl, BYTE PTR _?$S295@?1??ConvertRtfToHtmlWithIntenso@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z@4EA
	or	dl, 1
	mov	BYTE PTR _?$S295@?1??ConvertRtfToHtmlWithIntenso@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z@4EA, dl
	lea	ecx, DWORD PTR _sRtf2HtmlPath$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__LoadLibraryW@4
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _?hMod@?1??ConvertRtfToHtmlWithIntenso@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z@4PAUHINSTANCE__@@A, eax
$L81779:

; 403  : 	
; 404  : 	CString sTempHtml = FileMisc::GetTempFileName(RTF2HTML_FNAME, _T("html"));

	push	OFFSET FLAT:$SG81782
	mov	ecx, OFFSET FLAT:_RTF2HTML_FNAME
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	lea	eax, DWORD PTR _sTempHtml$[ebp]
	push	eax
	call	?GetTempFileNameW@FileMisc@@YA?AVCString@@PBG0@Z ; FileMisc::GetTempFileNameW
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+12], 3

; 405  : 
; 406  : 	if (hMod)

	cmp	DWORD PTR _?hMod@?1??ConvertRtfToHtmlWithIntenso@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z@4PAUHINSTANCE__@@A, 0
	je	$L81783

; 408  : 		typedef int (*PFNCONVERTRTF2HTML)(LPCTSTR, LPCTSTR, LPCTSTR, 
; 409  : 											LPCTSTR, LPCTSTR, LPCTSTR, 
; 410  : 											LPCTSTR, LPCTSTR, LPCTSTR, 
; 411  : 											LPCTSTR, LPCTSTR);
; 412  : 		
; 413  : 		try
; 414  : 		{

	mov	BYTE PTR __$EHRec$[ebp+12], 4

; 415  : 			PFNCONVERTRTF2HTML fnRtf2Html = (PFNCONVERTRTF2HTML)GetProcAddress(hMod, "fnRtf2Html");

	mov	esi, esp
	push	OFFSET FLAT:$SG81799
	mov	ecx, DWORD PTR _?hMod@?1??ConvertRtfToHtmlWithIntenso@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z@4PAUHINSTANCE__@@A
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _fnRtf2Html$81797[ebp], eax

; 416  : 			
; 417  : 			if (fnRtf2Html)

	cmp	DWORD PTR _fnRtf2Html$81797[ebp], 0
	je	$L81800

; 419  : 				// arguments
; 420  : 				CString sCharSet = _T("/CS:") + CString(szCharSet);

	mov	edx, DWORD PTR _szCharSet$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T83148[ebp]
	call	??0CString@@QAE@PBG@Z			; CString::CString
	mov	DWORD PTR -72+[ebp], eax
	mov	eax, DWORD PTR -72+[ebp]
	mov	DWORD PTR -76+[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	mov	ecx, DWORD PTR -76+[ebp]
	push	ecx
	push	OFFSET FLAT:$SG81804
	lea	edx, DWORD PTR _sCharSet$81801[ebp]
	push	edx
	call	??H@YG?AVCString@@PBGABV0@@Z		; operator+
	mov	DWORD PTR -80+[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR $T83148[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString

; 421  : 	
; 422  : 				CString sImageDir;

	lea	ecx, DWORD PTR _sImageDir$81805[ebp]
	call	??0CString@@QAE@XZ			; CString::CString
	mov	DWORD PTR -84+[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 8

; 423  : 				sImageDir.Format(_T("/ID:%s"), szUniqueDir);

	mov	eax, DWORD PTR _szUniqueDir$[ebp]
	push	eax
	push	OFFSET FLAT:$SG81806
	lea	ecx, DWORD PTR _sImageDir$81805[ebp]
	push	ecx
	call	?Format@CString@@QAAXPBGZZ		; CString::Format
	add	esp, 12					; 0000000cH

; 424  : 				
; 425  : 				bSuccess = fnRtf2Html(szRtfFile,					// rtf input file
; 426  : 										FileMisc::GetTempFolder(),  // folder for html output file
; 427  : 										sImageDir,					// folder for saving images
; 428  : 										_T("/IT:png"),				// image file format
; 429  : 										_T("/DS:content"),			// return only body of html
; 430  : 										sCharSet,					// character set
; 431  : 										_T(""),						// unused
; 432  : 										_T(""),						// unused 
; 433  : 										_T(""),						// unused 
; 434  : 										_T(""),						// unused 
; 435  : 										_T(""));					// unused

	lea	ecx, DWORD PTR _sCharSet$81801[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	mov	DWORD PTR -88+[ebp], eax
	lea	ecx, DWORD PTR _sImageDir$81805[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	mov	DWORD PTR -92+[ebp], eax
	lea	edx, DWORD PTR $T83149[ebp]
	push	edx
	call	?GetTempFolder@FileMisc@@YA?AVCString@@XZ ; FileMisc::GetTempFolder
	add	esp, 4
	mov	DWORD PTR -96+[ebp], eax
	mov	eax, DWORD PTR -96+[ebp]
	mov	DWORD PTR -100+[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 9
	mov	ecx, DWORD PTR -100+[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	mov	DWORD PTR -104+[ebp], eax
	mov	esi, esp
	push	OFFSET FLAT:$SG81808
	push	OFFSET FLAT:$SG81809
	push	OFFSET FLAT:$SG81810
	push	OFFSET FLAT:$SG81811
	push	OFFSET FLAT:$SG81812
	mov	ecx, DWORD PTR -88+[ebp]
	push	ecx
	push	OFFSET FLAT:$SG81813
	push	OFFSET FLAT:$SG81814
	mov	edx, DWORD PTR -92+[ebp]
	push	edx
	mov	eax, DWORD PTR -104+[ebp]
	push	eax
	mov	ecx, DWORD PTR _szRtfFile$[ebp]
	push	ecx
	call	DWORD PTR _fnRtf2Html$81797[ebp]
	add	esp, 44					; 0000002cH
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR -108+[ebp], eax
	mov	edx, DWORD PTR -108+[ebp]
	mov	DWORD PTR _bSuccess$[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 8
	lea	ecx, DWORD PTR $T83149[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString

; 436  : 				
; 437  : 				if (bSuccess)

	cmp	DWORD PTR _bSuccess$[ebp], 0
	je	SHORT $L81815

; 438  : 					bSuccess = (FileMisc::LoadFile(sTempHtml, sHtml) && !sHtml.IsEmpty());

	lea	ecx, DWORD PTR _sTempHtml$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	mov	DWORD PTR -112+[ebp], eax
	push	0
	mov	eax, DWORD PTR _sHtml$[ebp]
	push	eax
	mov	ecx, DWORD PTR -112+[ebp]
	push	ecx
	call	?LoadFile@FileMisc@@YAHPBGAAVCString@@H@Z ; FileMisc::LoadFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR -116+[ebp], eax
	cmp	DWORD PTR -116+[ebp], 0
	je	SHORT $L83150
	mov	ecx, DWORD PTR _sHtml$[ebp]
	call	?IsEmpty@CString@@QBEHXZ		; CString::IsEmpty
	mov	DWORD PTR -120+[ebp], eax
	cmp	DWORD PTR -120+[ebp], 0
	jne	SHORT $L83150
	mov	DWORD PTR -124+[ebp], 1
	jmp	SHORT $L83151
$L83150:
	mov	DWORD PTR -124+[ebp], 0
$L83151:
	mov	edx, DWORD PTR -124+[ebp]
	mov	DWORD PTR _bSuccess$[ebp], edx
$L81815:

; 439  : 			}

	mov	BYTE PTR __$EHRec$[ebp+12], 7
	lea	ecx, DWORD PTR _sImageDir$81805[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	lea	ecx, DWORD PTR _sCharSet$81801[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
$L81800:

; 441  : 		catch (...)

	jmp	SHORT $L81796
$L83154:

; 442  : 		{
; 443  : 			bSuccess = FALSE;

	mov	DWORD PTR _bSuccess$[ebp], 0

; 444  : 		}

	mov	eax, $L81796
	ret	0
$L81796:

; 445  : 	}

	mov	DWORD PTR __$EHRec$[ebp+12], 3
$L81783:

; 446  : 
; 447  : 	// cleanup
; 448  : 	DeleteFile(sTempHtml);

	lea	ecx, DWORD PTR _sTempHtml$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__DeleteFileW@4
	cmp	esi, esp
	call	__chkesp

; 449  : 
; 450  : 	return bSuccess;

	mov	eax, DWORD PTR _bSuccess$[ebp]
	mov	DWORD PTR $T83152[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _sTempHtml$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _sRtf2HtmlPath$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	eax, DWORD PTR $T83152[ebp]

; 451  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 124				; 0000007cH
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L83155:
	lea	ecx, DWORD PTR $T83147[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83156:
	lea	ecx, DWORD PTR _sRtf2HtmlPath$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83157:
	lea	ecx, DWORD PTR _sTempHtml$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83158:
	lea	ecx, DWORD PTR $T83148[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83159:
	lea	ecx, DWORD PTR _sCharSet$81801[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83160:
	lea	ecx, DWORD PTR _sImageDir$81805[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83161:
	lea	ecx, DWORD PTR $T83149[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83164:
	mov	eax, OFFSET FLAT:$T83163
	jmp	___CxxFrameHandler
text$x	ENDS
?ConvertRtfToHtmlWithIntenso@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z ENDP ; CRtfHtmlConverter::ConvertRtfToHtmlWithIntenso
EXTRN	?EncodeAsMultiByte@Misc@@YAAAVCString@@AAV2@I@Z:NEAR ; Misc::EncodeAsMultiByte
EXTRN	_strcpy:NEAR
EXTRN	?AfxAssertFailedLine@@YGHPBDH@Z:NEAR		; AfxAssertFailedLine
;	COMDAT data
; File D:\_CODE\Shared\Rtf2HtmlConverter.cpp
data	SEGMENT
$SG81825 DB	'r', 00H, 't', 00H, 'f', 00H, 't', 00H, 'o', 00H, 'h', 00H
	DB	't', 00H, 'm', 00H, 'l', 00H, '_', 00H, 's', 00H, 'a', 00H, 'u'
	DB	00H, 't', 00H, 'i', 00H, 'n', 00H, 's', 00H, 'o', 00H, 'f', 00H
	DB	't', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG81829 DB	'rtftohtml_file', 00H
	ORG $+1
$SG81837 DB	'flushlist', 00H
	ORG $+2
$SG81842 DB	'R', 00H, 't', 00H, 'f', 00H, '2', 00H, 'H', 00H, 't', 00H
	DB	'm', 00H, 'l', 00H, '.', 00H, 'h', 00H, 't', 00H, 'm', 00H, 00H
	DB	00H
	ORG $+2
$SG81846 DB	'.htm', 00H
	ORG $+3
$SG81847 DB	'Verdana', 00H
$SG81848 DB	'10', 00H
	ORG $+1
$SG81849 DB	'My Page', 00H
data	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T83178	DD	019930520H
	DD	03H
	DD	FLAT:$T83180
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T83180	DD	0ffffffffH
	DD	FLAT:$L83174
	DD	00H
	DD	FLAT:$L83175
	DD	01H
	DD	FLAT:$L83176
xdata$x	ENDS
;	COMDAT ?ConvertRtfToHtmlWithSautin@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z
_TEXT	SEGMENT
$T83173 = -1012
__$EHRec$ = -12
_szRtfFile$ = 8
_sHtml$ = 16
_szUniqueDir$ = 20
_this$ = -1016
_hMod$ = -16
_pfnConvert$ = -32
_pfnFlush$ = -28
_sOutputDir$ = -24
_sTempHtml$ = -20
_opt$ = -1008
_sRtfFile$ = -36
?ConvertRtfToHtmlWithSautin@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z PROC NEAR ; CRtfHtmlConverter::ConvertRtfToHtmlWithSautin, COMDAT

; 454  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L83179
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 1004				; 000003ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1016]
	mov	ecx, 251				; 000000fbH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 455  : 	// load library
; 456  : 	HINSTANCE hMod = LoadLibrary(_T("rtftohtml_sautinsoft.dll"));

	mov	esi, esp
	push	OFFSET FLAT:$SG81825
	call	DWORD PTR __imp__LoadLibraryW@4
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _hMod$[ebp], eax

; 457  : 	
; 458  : 	if (hMod==NULL) 

	cmp	DWORD PTR _hMod$[ebp], 0
	jne	SHORT $L81826

; 459  : 		return FALSE;

	xor	eax, eax
	jmp	$L81823
$L81826:

; 460  : 	
; 461  : 	// get function convert
; 462  : 	FNRTF2HTML_FILE pfnConvert = (FNRTF2HTML_FILE)GetProcAddress(hMod, "rtftohtml_file");

	mov	esi, esp
	push	OFFSET FLAT:$SG81829
	mov	eax, DWORD PTR _hMod$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _pfnConvert$[ebp], eax
$L81830:

; 463  : 	ASSERT(pfnConvert);

	cmp	DWORD PTR _pfnConvert$[ebp], 0
	jne	SHORT $L81833
	push	463					; 000001cfH
	push	OFFSET FLAT:_THIS_FILE
	call	?AfxAssertFailedLine@@YGHPBDH@Z		; AfxAssertFailedLine
	test	eax, eax
	je	SHORT $L81833
	int	3
$L81833:
	xor	ecx, ecx
	test	ecx, ecx
	jne	SHORT $L81830

; 464  : 
; 465  : 	if (!pfnConvert)

	cmp	DWORD PTR _pfnConvert$[ebp], 0
	jne	SHORT $L81834

; 466  : 		return FALSE;

	xor	eax, eax
	jmp	$L81823
$L81834:

; 467  : 
; 468  : 	// get function to release memory
; 469  : 	FNFLUSHLIST pfnFlush = (FNFLUSHLIST)GetProcAddress(hMod, "flushlist");

	mov	esi, esp
	push	OFFSET FLAT:$SG81837
	mov	edx, DWORD PTR _hMod$[ebp]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _pfnFlush$[ebp], eax

; 470  : 
; 471  : 	if (!pfnFlush)

	cmp	DWORD PTR _pfnFlush$[ebp], 0
	jne	SHORT $L81838

; 472  : 		return FALSE;

	xor	eax, eax
	jmp	$L81823
$L81838:

; 473  : 
; 474  : 	CString sOutputDir(szUniqueDir);

	mov	eax, DWORD PTR _szUniqueDir$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sOutputDir$[ebp]
	call	??0CString@@QAE@PBG@Z			; CString::CString
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 475  : 	FileMisc::TerminatePath(sOutputDir);

	lea	ecx, DWORD PTR _sOutputDir$[ebp]
	push	ecx
	call	?TerminatePath@FileMisc@@YAAAVCString@@AAV2@@Z ; FileMisc::TerminatePath
	add	esp, 4

; 476  : 
; 477  : 	CString sTempHtml(sOutputDir + _T("Rtf2Html.htm"));

	push	OFFSET FLAT:$SG81842
	lea	edx, DWORD PTR _sOutputDir$[ebp]
	push	edx
	lea	eax, DWORD PTR _sTempHtml$[ebp]
	push	eax
	call	??H@YG?AVCString@@ABV0@PBG@Z		; operator+
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 478  : 
; 479  : 	// output folder must be ansi
; 480  : #ifdef _UNICODE
; 481  : 	Misc::EncodeAsMultiByte(sOutputDir, CP_UTF8);

	push	65001					; 0000fde9H
	lea	ecx, DWORD PTR _sOutputDir$[ebp]
	push	ecx
	call	?EncodeAsMultiByte@Misc@@YAAAVCString@@AAV2@I@Z ; Misc::EncodeAsMultiByte
	add	esp, 8

; 482  : #endif
; 483  : 
; 484  : 	sautin_rtf2html_options opt = { 0 };

	mov	DWORD PTR _opt$[ebp], 0
	mov	ecx, 242				; 000000f2H
	xor	eax, eax
	lea	edi, DWORD PTR _opt$[ebp+4]
	rep stosd

; 485  : 	
; 486  : 	strcpy(opt.image_folder, (LPCSTR)(LPCTSTR)sOutputDir);

	lea	ecx, DWORD PTR _sOutputDir$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	lea	edx, DWORD PTR _opt$[ebp+228]
	push	edx
	call	_strcpy
	add	esp, 8

; 487  : 	strcpy(opt.extension, ".htm");

	push	OFFSET FLAT:$SG81846
	lea	eax, DWORD PTR _opt$[ebp+124]
	push	eax
	call	_strcpy
	add	esp, 8

; 488  : 	strcpy(opt.font_face, "Verdana");

	push	OFFSET FLAT:$SG81847
	lea	ecx, DWORD PTR _opt$[ebp+134]
	push	ecx
	call	_strcpy
	add	esp, 8

; 489  : 	strcpy(opt.font_size, "10");

	push	OFFSET FLAT:$SG81848
	lea	edx, DWORD PTR _opt$[ebp+184]
	push	edx
	call	_strcpy
	add	esp, 8

; 490  : 	strcpy(opt.title,"My Page");

	push	OFFSET FLAT:$SG81849
	lea	eax, DWORD PTR _opt$[ebp+4]
	push	eax
	call	_strcpy
	add	esp, 8

; 491  : 
; 492  : 	opt.encoding			= sautin_rtf2html_options::UTF_8;

	mov	DWORD PTR _opt$[ebp+220], 19		; 00000013H

; 493  : 	opt.html_type			= 1;

	mov	DWORD PTR _opt$[ebp], 1

; 494  : 	opt.preserve_font_color	= TRUE;

	mov	DWORD PTR _opt$[ebp+208], 1

; 495  : 	opt.preserve_font_face	= TRUE;

	mov	DWORD PTR _opt$[ebp+200], 1

; 496  : 	opt.preserve_font_size	= TRUE;

	mov	DWORD PTR _opt$[ebp+204], 1

; 497  : 	opt.preserve_images		= TRUE;

	mov	DWORD PTR _opt$[ebp+196], 1

; 498  : 	opt.table_borders		= 1;

	mov	DWORD PTR _opt$[ebp+216], 1

; 499  : 	opt.html_parts			= 1; //only between <body>...</body>

	mov	DWORD PTR _opt$[ebp+224], 1

; 500  : 
; 501  : 	// input file must be ansi encoded
; 502  : 	CString sRtfFile(szRtfFile);

	mov	ecx, DWORD PTR _szRtfFile$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sRtfFile$[ebp]
	call	??0CString@@QAE@PBG@Z			; CString::CString
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 503  : #ifdef _UNICODE
; 504  : 	Misc::EncodeAsMultiByte(sRtfFile, CP_UTF8);

	push	65001					; 0000fde9H
	lea	edx, DWORD PTR _sRtfFile$[ebp]
	push	edx
	call	?EncodeAsMultiByte@Misc@@YAAAVCString@@AAV2@I@Z ; Misc::EncodeAsMultiByte
	add	esp, 8

; 505  : #endif
; 506  : 	
; 507  : 	// converting
; 508  : 	if (0 == pfnConvert((LPSTR)(LPCTSTR)sRtfFile, (LPSTR)(LPCTSTR)sOutputDir, opt))

	mov	ebx, esp
	sub	esp, 972				; 000003ccH
	mov	ecx, 243				; 000000f3H
	lea	esi, DWORD PTR _opt$[ebp]
	mov	edi, esp
	rep movsd
	lea	ecx, DWORD PTR _sOutputDir$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	lea	ecx, DWORD PTR _sRtfFile$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	call	DWORD PTR _pfnConvert$[ebp]
	add	esp, 980				; 000003d4H
	cmp	ebx, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81858
$L81856:

; 510  : 		VERIFY(FileMisc::LoadFile(sTempHtml, sHtml));

	push	0
	mov	eax, DWORD PTR _sHtml$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sTempHtml$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	call	?LoadFile@FileMisc@@YAHPBGAAVCString@@H@Z ; FileMisc::LoadFile
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $L81859
	push	510					; 000001feH
	push	OFFSET FLAT:_THIS_FILE
	call	?AfxAssertFailedLine@@YGHPBDH@Z		; AfxAssertFailedLine
	test	eax, eax
	je	SHORT $L81859
	int	3
$L81859:
	xor	ecx, ecx
	test	ecx, ecx
	jne	SHORT $L81856
$L81858:

; 512  : 
; 513  : 	// release memory
; 514  : 	pfnFlush();

	mov	esi, esp
	call	DWORD PTR _pfnFlush$[ebp]
	cmp	esi, esp
	call	__chkesp

; 515  : 
; 516  : 	return !sHtml.IsEmpty();

	mov	ecx, DWORD PTR _sHtml$[ebp]
	call	?IsEmpty@CString@@QBEHXZ		; CString::IsEmpty
	neg	eax
	sbb	eax, eax
	inc	eax
	mov	DWORD PTR $T83173[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _sRtfFile$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sTempHtml$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sOutputDir$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	eax, DWORD PTR $T83173[ebp]
$L81823:

; 517  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 1016				; 000003f8H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L83174:
	lea	ecx, DWORD PTR _sOutputDir$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83175:
	lea	ecx, DWORD PTR _sTempHtml$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83176:
	lea	ecx, DWORD PTR _sRtfFile$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83179:
	mov	eax, OFFSET FLAT:$T83178
	jmp	___CxxFrameHandler
text$x	ENDS
?ConvertRtfToHtmlWithSautin@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z ENDP ; CRtfHtmlConverter::ConvertRtfToHtmlWithSautin
EXTRN	??0CString@@QAE@ABV0@@Z:NEAR			; CString::CString
EXTRN	?Mid@CString@@QBE?AV1@HH@Z:NEAR			; CString::Mid
EXTRN	?Replace@CString@@QAEHGG@Z:NEAR			; CString::Replace
EXTRN	?Replace@CString@@QAEHPBG0@Z:NEAR		; CString::Replace
EXTRN	?Find@CString@@QBEHGH@Z:NEAR			; CString::Find
EXTRN	?Find@CString@@QBEHPBG@Z:NEAR			; CString::Find
EXTRN	?GetFileNameFromPath@FileMisc@@YA?AVCString@@PBGH@Z:NEAR ; FileMisc::GetFileNameFromPath
;	COMDAT data
; File D:\_CODE\Shared\Rtf2HtmlConverter.cpp
data	SEGMENT
$SG81867 DB	'<', 00H, 'b', 00H, 'o', 00H, 'd', 00H, 'y', 00H, 00H, 00H
$SG81877 DB	'<', 00H, '/', 00H, 'b', 00H, 'o', 00H, 'd', 00H, 'y', 00H
	DB	'>', 00H, 00H, 00H
$SG81884 DB	's', 00H, 'r', 00H, 'c', 00H, '=', 00H, '"', 00H, 00H, 00H
$SG81889 DB	's', 00H, 'r', 00H, 'c', 00H, '=', 00H, '"', 00H, 00H, 00H
$SG81892 DB	's', 00H, 'r', 00H, 'c', 00H, '=', 00H, '"', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, ':', 00H, '/', 00H, '/', 00H, '/'
	DB	00H, 00H, 00H
$SG81894 DB	'm', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'-', 00H, 't', 00H, 'o', 00H, 'p', 00H, ':', 00H, '0', 00H, 'c'
	DB	00H, 'm', 00H, 00H, 00H
	ORG $+2
$SG81895 DB	'm', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'-', 00H, 'b', 00H, 'o', 00H, 't', 00H, 't', 00H, 'o', 00H, 'm'
	DB	00H, ':', 00H, '0', 00H, 'c', 00H, 'm', 00H, 00H, 00H
data	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T83193	DD	019930520H
	DD	05H
	DD	FLAT:$T83195
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T83195	DD	0ffffffffH
	DD	FLAT:$L83187
	DD	0ffffffffH
	DD	FLAT:$L83188
	DD	01H
	DD	FLAT:$L83189
	DD	02H
	DD	FLAT:$L83190
	DD	03H
	DD	FLAT:$L83191
xdata$x	ENDS
;	COMDAT ?ProcessMSWordHtml@CRtfHtmlConverter@@KAHABVCString@@AAV2@@Z
_TEXT	SEGMENT
$T83186 = -40
__$EHRec$ = -12
_sUniqueDir$ = 8
_sHtml$ = 12
_nStart$ = -20
_nEnd$ = -16
_sSrcFolderName$81885 = -32
_sInvalidLink$81888 = -24
_sValidLink$81891 = -36
_sDstFolderName$81893 = -28
?ProcessMSWordHtml@CRtfHtmlConverter@@KAHABVCString@@AAV2@@Z PROC NEAR ; CRtfHtmlConverter::ProcessMSWordHtml, COMDAT

; 520  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L83194
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax

; 521  : 	if (sHtml.IsEmpty())

	mov	ecx, DWORD PTR _sHtml$[ebp]
	call	?IsEmpty@CString@@QBEHXZ		; CString::IsEmpty
	test	eax, eax
	je	SHORT $L81865

; 522  : 		return FALSE;

	xor	eax, eax
	jmp	$L81864
$L81865:

; 523  : 
; 524  : 	// strip everything but the body
; 525  : 	int nStart = sHtml.Find(_T("<body"));

	push	OFFSET FLAT:$SG81867
	mov	ecx, DWORD PTR _sHtml$[ebp]
	call	?Find@CString@@QBEHPBG@Z		; CString::Find
	mov	DWORD PTR _nStart$[ebp], eax
$L81868:

; 526  : 	ASSERT(nStart >= 0);

	cmp	DWORD PTR _nStart$[ebp], 0
	jge	SHORT $L81871
	push	526					; 0000020eH
	push	OFFSET FLAT:_THIS_FILE
	call	?AfxAssertFailedLine@@YGHPBDH@Z		; AfxAssertFailedLine
	test	eax, eax
	je	SHORT $L81871
	int	3
$L81871:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $L81868

; 527  : 	
; 528  : 	// find next end tag
; 529  : 	nStart = sHtml.Find('>', nStart);

	mov	ecx, DWORD PTR _nStart$[ebp]
	push	ecx
	push	62					; 0000003eH
	mov	ecx, DWORD PTR _sHtml$[ebp]
	call	?Find@CString@@QBEHGH@Z			; CString::Find
	mov	DWORD PTR _nStart$[ebp], eax
$L81872:

; 530  : 	ASSERT(nStart >= 0);

	cmp	DWORD PTR _nStart$[ebp], 0
	jge	SHORT $L81875
	push	530					; 00000212H
	push	OFFSET FLAT:_THIS_FILE
	call	?AfxAssertFailedLine@@YGHPBDH@Z		; AfxAssertFailedLine
	test	eax, eax
	je	SHORT $L81875
	int	3
$L81875:
	xor	edx, edx
	test	edx, edx
	jne	SHORT $L81872

; 531  : 	
; 532  : 	int nEnd = sHtml.Find(_T("</body>"));

	push	OFFSET FLAT:$SG81877
	mov	ecx, DWORD PTR _sHtml$[ebp]
	call	?Find@CString@@QBEHPBG@Z		; CString::Find
	mov	DWORD PTR _nEnd$[ebp], eax
$L81878:

; 533  : 	ASSERT(nEnd > nStart);

	mov	eax, DWORD PTR _nEnd$[ebp]
	cmp	eax, DWORD PTR _nStart$[ebp]
	jg	SHORT $L81881
	push	533					; 00000215H
	push	OFFSET FLAT:_THIS_FILE
	call	?AfxAssertFailedLine@@YGHPBDH@Z		; AfxAssertFailedLine
	test	eax, eax
	je	SHORT $L81881
	int	3
$L81881:
	xor	ecx, ecx
	test	ecx, ecx
	jne	SHORT $L81878

; 534  : 	
; 535  : 	sHtml = sHtml.Mid(nStart + 1, nEnd - nStart - 1);

	mov	edx, DWORD PTR _nEnd$[ebp]
	sub	edx, DWORD PTR _nStart$[ebp]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _nStart$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR $T83186[ebp]
	push	ecx
	mov	ecx, DWORD PTR _sHtml$[ebp]
	call	?Mid@CString@@QBE?AV1@HH@Z		; CString::Mid
	mov	DWORD PTR -44+[ebp], eax
	mov	edx, DWORD PTR -44+[ebp]
	mov	DWORD PTR -48+[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR -48+[ebp]
	push	eax
	mov	ecx, DWORD PTR _sHtml$[ebp]
	call	??4CString@@QAEABV0@ABV0@@Z		; CString::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T83186[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString

; 536  : 
; 537  : 	// handle links to images which MSWord puts into a sub-folder 
; 538  : 	// using the filename followed by a localised string meaning 'files'
; 539  : 	if (sHtml.Find(_T("src=\"")) != -1)

	push	OFFSET FLAT:$SG81884
	mov	ecx, DWORD PTR _sHtml$[ebp]
	call	?Find@CString@@QBEHPBG@Z		; CString::Find
	cmp	eax, -1
	je	$L81883

; 541  : 		CString sSrcFolderName = FileMisc::GetFileNameFromPath(sUniqueDir);

	push	1
	mov	ecx, DWORD PTR _sUniqueDir$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	lea	ecx, DWORD PTR _sSrcFolderName$81885[ebp]
	push	ecx
	call	?GetFileNameFromPath@FileMisc@@YA?AVCString@@PBGH@Z ; FileMisc::GetFileNameFromPath
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 542  : 		
; 543  : 		// insert 'file:///' into image links
; 544  : 		CString sInvalidLink(_T("src=\"") + sSrcFolderName);

	lea	edx, DWORD PTR _sSrcFolderName$81885[ebp]
	push	edx
	push	OFFSET FLAT:$SG81889
	lea	eax, DWORD PTR _sInvalidLink$81888[ebp]
	push	eax
	call	??H@YG?AVCString@@PBGABV0@@Z		; operator+
	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 545  : 		CString sValidLink(_T("src=\"file:///") + sSrcFolderName);

	lea	ecx, DWORD PTR _sSrcFolderName$81885[ebp]
	push	ecx
	push	OFFSET FLAT:$SG81892
	lea	edx, DWORD PTR _sValidLink$81891[ebp]
	push	edx
	call	??H@YG?AVCString@@PBGABV0@@Z		; operator+
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 546  : 		
; 547  : 		sHtml.Replace(sInvalidLink, sValidLink);

	lea	ecx, DWORD PTR _sValidLink$81891[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	lea	ecx, DWORD PTR _sInvalidLink$81888[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	mov	ecx, DWORD PTR _sHtml$[ebp]
	call	?Replace@CString@@QAEHPBG0@Z		; CString::Replace

; 548  : 		
; 549  : 		// replace the image file paths with the passed-in unique path
; 550  : 		CString sDstFolderName(sUniqueDir);

	mov	eax, DWORD PTR _sUniqueDir$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sDstFolderName$81893[ebp]
	call	??0CString@@QAE@ABV0@@Z			; CString::CString
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 551  : 		sDstFolderName.Replace('\\', '/');

	push	47					; 0000002fH
	push	92					; 0000005cH
	lea	ecx, DWORD PTR _sDstFolderName$81893[ebp]
	call	?Replace@CString@@QAEHGG@Z		; CString::Replace

; 552  : 		
; 553  : 		sHtml.Replace(sSrcFolderName, sDstFolderName);

	lea	ecx, DWORD PTR _sDstFolderName$81893[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	lea	ecx, DWORD PTR _sSrcFolderName$81885[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	mov	ecx, DWORD PTR _sHtml$[ebp]
	call	?Replace@CString@@QAEHPBG0@Z		; CString::Replace

; 554  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _sDstFolderName$81893[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _sValidLink$81891[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _sInvalidLink$81888[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sSrcFolderName$81885[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
$L81883:

; 555  : 
; 556  : 	// Reduce the size of paragraph breaks
; 557  : 	sHtml.Replace(_T("margin-bottom:0cm"), _T("margin-top:0cm"));

	push	OFFSET FLAT:$SG81894
	push	OFFSET FLAT:$SG81895
	mov	ecx, DWORD PTR _sHtml$[ebp]
	call	?Replace@CString@@QAEHPBG0@Z		; CString::Replace

; 558  : 
; 559  : 	return !sHtml.IsEmpty();

	mov	ecx, DWORD PTR _sHtml$[ebp]
	call	?IsEmpty@CString@@QBEHXZ		; CString::IsEmpty
	neg	eax
	sbb	eax, eax
	inc	eax
$L81864:

; 560  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L83187:
	lea	ecx, DWORD PTR $T83186[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83188:
	lea	ecx, DWORD PTR _sSrcFolderName$81885[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83189:
	lea	ecx, DWORD PTR _sInvalidLink$81888[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83190:
	lea	ecx, DWORD PTR _sValidLink$81891[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83191:
	lea	ecx, DWORD PTR _sDstFolderName$81893[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83194:
	mov	eax, OFFSET FLAT:$T83193
	jmp	___CxxFrameHandler
text$x	ENDS
?ProcessMSWordHtml@CRtfHtmlConverter@@KAHABVCString@@AAV2@@Z ENDP ; CRtfHtmlConverter::ProcessMSWordHtml
PUBLIC	?ConvertHtmlToRtf@CRtfHtmlConverter@@QAEHPBDPBGAAVCString@@1@Z ; CRtfHtmlConverter::ConvertHtmlToRtf
PUBLIC	?ConvertHtmlToRtfWithMSWord@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z ; CRtfHtmlConverter::ConvertHtmlToRtfWithMSWord
PUBLIC	?ConvertHtmlToRtfWithSautin@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z ; CRtfHtmlConverter::ConvertHtmlToRtfWithSautin
;	COMDAT data
; File D:\_CODE\Shared\Rtf2HtmlConverter.cpp
data	SEGMENT
$SG81910 DB	'h', 00H, 't', 00H, 'm', 00H, 00H, 00H
data	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T83208	DD	019930520H
	DD	04H
	DD	FLAT:$T83210
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T83210	DD	0ffffffffH
	DD	FLAT:$L83203
	DD	00H
	DD	FLAT:$L83204
	DD	01H
	DD	FLAT:$L83205
	DD	01H
	DD	FLAT:$L83206
xdata$x	ENDS
;	COMDAT ?ConvertHtmlToRtf@CRtfHtmlConverter@@QAEHPBDPBGAAVCString@@1@Z
_TEXT	SEGMENT
$T83201 = -32
$T83202 = -36
__$EHRec$ = -12
_szHtml$ = 8
_szCharSet$ = 12
_sRtf$ = 16
_szImageDir$ = 20
_this$ = -40
_sImageDir$ = -16
_sUniqueDir$ = -20
_bTempImageDir$ = -28
_sTempHtml$ = -24
?ConvertHtmlToRtf@CRtfHtmlConverter@@QAEHPBDPBGAAVCString@@1@Z PROC NEAR ; CRtfHtmlConverter::ConvertHtmlToRtf, COMDAT

; 563  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L83209
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 	CString sImageDir(szImageDir), sUniqueDir;

	mov	eax, DWORD PTR _szImageDir$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sImageDir$[ebp]
	call	??0CString@@QAE@PBG@Z			; CString::CString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sUniqueDir$[ebp]
	call	??0CString@@QAE@XZ			; CString::CString
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 565  : 	BOOL bTempImageDir = sImageDir.IsEmpty();

	lea	ecx, DWORD PTR _sImageDir$[ebp]
	call	?IsEmpty@CString@@QBEHXZ		; CString::IsEmpty
	mov	DWORD PTR _bTempImageDir$[ebp], eax

; 566  : 	
; 567  : 	if (bTempImageDir)

	cmp	DWORD PTR _bTempImageDir$[ebp], 0
	je	SHORT $L81906

; 568  : 		sImageDir = FileMisc::GetTempFolder();

	lea	ecx, DWORD PTR $T83201[ebp]
	push	ecx
	call	?GetTempFolder@FileMisc@@YA?AVCString@@XZ ; FileMisc::GetTempFolder
	add	esp, 4
	mov	DWORD PTR -44+[ebp], eax
	mov	edx, DWORD PTR -44+[ebp]
	mov	DWORD PTR -48+[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR -48+[ebp]
	push	eax
	lea	ecx, DWORD PTR _sImageDir$[ebp]
	call	??4CString@@QAEABV0@ABV0@@Z		; CString::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T83201[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
$L81906:

; 569  : 	
; 570  : 	// save rtf as temp Ansi file
; 571  : 	CString sTempHtml = FileMisc::GetTempFileName(HTML2RTF_FNAME, _T("htm"));

	push	OFFSET FLAT:$SG81910
	mov	ecx, OFFSET FLAT:_HTML2RTF_FNAME
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	lea	ecx, DWORD PTR _sTempHtml$[ebp]
	push	ecx
	call	?GetTempFileNameW@FileMisc@@YA?AVCString@@PBG0@Z ; FileMisc::GetTempFileNameW
	add	esp, 12					; 0000000cH
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 572  : 	FileMisc::SaveFile(sTempHtml, szHtml); 

	mov	edx, DWORD PTR _szHtml$[ebp]
	push	edx
	lea	ecx, DWORD PTR _sTempHtml$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	call	?SaveFile@FileMisc@@YAHPBGPBD@Z		; FileMisc::SaveFile
	add	esp, 8

; 573  : 	
; 574  : 	if (ConvertHtmlToRtfWithSautin(sTempHtml, szCharSet, sRtf, sImageDir))

	lea	ecx, DWORD PTR _sImageDir$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	mov	eax, DWORD PTR _sRtf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szCharSet$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sTempHtml$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConvertHtmlToRtfWithSautin@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z ; CRtfHtmlConverter::ConvertHtmlToRtfWithSautin
	test	eax, eax
	je	SHORT $L81911

; 578  : 	else if (ConvertHtmlToRtfWithMSWord(sTempHtml, szCharSet, sRtf, sImageDir))

	jmp	SHORT $L81913
$L81911:
	lea	ecx, DWORD PTR _sImageDir$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	mov	edx, DWORD PTR _sRtf$[ebp]
	push	edx
	mov	eax, DWORD PTR _szCharSet$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sTempHtml$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConvertHtmlToRtfWithMSWord@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z ; CRtfHtmlConverter::ConvertHtmlToRtfWithMSWord
$L81913:

; 582  : // 	else if (ConvertHtmlToRtfWithViskoe(sTempHtml, szCharSet, sRtf, sImageDir))
; 583  : // 	{
; 584  : // 		// TODO
; 585  : // 	}
; 586  : 
; 587  : 	return !sRtf.IsEmpty();

	mov	ecx, DWORD PTR _sRtf$[ebp]
	call	?IsEmpty@CString@@QBEHXZ		; CString::IsEmpty
	neg	eax
	sbb	eax, eax
	inc	eax
	mov	DWORD PTR $T83202[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _sTempHtml$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sUniqueDir$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sImageDir$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	eax, DWORD PTR $T83202[ebp]

; 588  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L83203:
	lea	ecx, DWORD PTR _sImageDir$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83204:
	lea	ecx, DWORD PTR _sUniqueDir$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83205:
	lea	ecx, DWORD PTR $T83201[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83206:
	lea	ecx, DWORD PTR _sTempHtml$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83209:
	mov	eax, OFFSET FLAT:$T83208
	jmp	___CxxFrameHandler
text$x	ENDS
?ConvertHtmlToRtf@CRtfHtmlConverter@@QAEHPBDPBGAAVCString@@1@Z ENDP ; CRtfHtmlConverter::ConvertHtmlToRtf
;	COMDAT data
; File D:\_CODE\Shared\Rtf2HtmlConverter.cpp
data	SEGMENT
$SG81932 DB	'D', 00H, ':', 00H, '\', 00H, '%', 00H, 's', 00H, '.', 00H
	DB	'r', 00H, 't', 00H, 'f', 00H, 00H, 00H
data	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T83225	DD	019930520H
	DD	03H
	DD	FLAT:$T83227
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T83227	DD	0ffffffffH
	DD	FLAT:$L83221
	DD	0ffffffffH
	DD	FLAT:$L83222
	DD	01H
	DD	FLAT:$L83223
xdata$x	ENDS
;	COMDAT ?ConvertHtmlToRtfWithMSWord@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z
_TEXT	SEGMENT
_this$ = -36
_bSuccess$ = -16
_sTempRtf$81931 = -20
$T83216 = -24
$T83217 = -28
$T83220 = -32
__$EHRec$ = -12
_szHtmlFile$ = 8
_sRtf$ = 16
?ConvertHtmlToRtfWithMSWord@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z PROC NEAR ; CRtfHtmlConverter::ConvertHtmlToRtfWithMSWord, COMDAT

; 591  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L83226
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR _this$[ebp], ecx

; 592  : 	BOOL bSuccess = FALSE;

	mov	DWORD PTR _bSuccess$[ebp], 0

; 593  : 	
; 594  : 	// initialize first time
; 595  : 	if (m_pWordHelper == NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $L81923

; 596  : 		m_pWordHelper = new CMSWordHelper(12);

	push	596					; 00000254H
	push	OFFSET FLAT:_THIS_FILE
	push	24					; 00000018H
	call	??2@YAPAXIPBDH@Z			; operator new
	add	esp, 12					; 0000000cH
	mov	DWORD PTR $T83217[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T83217[ebp], 0
	je	SHORT $L83218
	push	12					; 0000000cH
	mov	ecx, DWORD PTR $T83217[ebp]
	call	??0CMSWordHelper@@QAE@H@Z		; CMSWordHelper::CMSWordHelper
	mov	DWORD PTR -40+[ebp], eax
	jmp	SHORT $L83219
$L83218:
	mov	DWORD PTR -40+[ebp], 0
$L83219:
	mov	ecx, DWORD PTR -40+[ebp]
	mov	DWORD PTR $T83216[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T83216[ebp]
	mov	DWORD PTR [edx+4], eax
$L81923:

; 597  : 	
; 598  : 	if (m_pWordHelper->IsValid())

	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?IsValid@CMSWordHelper@@QBEHXZ		; CMSWordHelper::IsValid
	test	eax, eax
	je	$L81930

; 600  : 		// html file must be placed inside the unique folder
; 601  : 		CString sTempRtf;

	lea	ecx, DWORD PTR _sTempRtf$81931[ebp]
	call	??0CString@@QAE@XZ			; CString::CString
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 602  : 		//sTempRtf.Format(_T("%s\\%s.rtf"), szUniqueDir, HTML2RTF_FNAME);
; 603  : 		sTempRtf.Format(_T("D:\\%s.rtf"), HTML2RTF_FNAME);

	mov	edx, DWORD PTR _HTML2RTF_FNAME
	push	edx
	push	OFFSET FLAT:$SG81932
	lea	eax, DWORD PTR _sTempRtf$81931[ebp]
	push	eax
	call	?Format@CString@@QAAXPBGZZ		; CString::Format
	add	esp, 12					; 0000000cH

; 604  : 		
; 605  : 		// prepare file system for Word else it will spit
; 606  : 		::DeleteFile(sTempRtf);

	lea	ecx, DWORD PTR _sTempRtf$81931[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__DeleteFileW@4
	cmp	esi, esp
	call	__chkesp

; 607  : 		
; 608  : 		bSuccess = m_pWordHelper->ConvertFile(szHtmlFile, WordAPI::wdOpenFormatWebPages, 
; 609  : 												sTempRtf, WordAPI::wdSaveFormatRTF);

	mov	ecx, DWORD PTR _szHtmlFile$[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T83220[ebp]
	call	??0CString@@QAE@PBG@Z			; CString::CString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	push	50001					; 0000c351H
	push	6
	lea	edx, DWORD PTR _sTempRtf$81931[ebp]
	push	edx
	push	7
	lea	eax, DWORD PTR $T83220[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	?ConvertFile@CMSWordHelper@@QAEHABVCString@@W4WdOpenFormat@WordAPI@@0W4WdSaveFormat@4@W4MsoEncoding@4@@Z ; CMSWordHelper::ConvertFile
	mov	DWORD PTR _bSuccess$[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T83220[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString

; 610  : 		
; 611  : 		if (bSuccess)

	cmp	DWORD PTR _bSuccess$[ebp], 0
	je	SHORT $L81934

; 612  : 			bSuccess = FileMisc::LoadFile(sTempRtf, sRtf);

	push	0
	mov	edx, DWORD PTR _sRtf$[ebp]
	push	edx
	lea	ecx, DWORD PTR _sTempRtf$81931[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	call	?LoadFile@FileMisc@@YAHPBGAAVCString@@H@Z ; FileMisc::LoadFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _bSuccess$[ebp], eax
$L81934:

; 613  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sTempRtf$81931[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
$L81930:

; 614  : 	
; 615  : 	return bSuccess;

	mov	eax, DWORD PTR _bSuccess$[ebp]

; 616  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L83221:
	push	596					; 00000254H
	push	OFFSET FLAT:_THIS_FILE
	mov	eax, DWORD PTR $T83217[ebp]
	push	eax
	call	??3@YAXPAXPBDH@Z			; operator delete
	add	esp, 12					; 0000000cH
	ret	0
$L83222:
	lea	ecx, DWORD PTR _sTempRtf$81931[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83223:
	lea	ecx, DWORD PTR $T83220[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83226:
	mov	eax, OFFSET FLAT:$T83225
	jmp	___CxxFrameHandler
text$x	ENDS
?ConvertHtmlToRtfWithMSWord@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z ENDP ; CRtfHtmlConverter::ConvertHtmlToRtfWithMSWord
PUBLIC	?ConvertHtmlToRtfWithViskoe@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z ; CRtfHtmlConverter::ConvertHtmlToRtfWithViskoe
PUBLIC	?Convert@CHtmlToRtf@@QAE?AVCString@@ABV2@ABUtagLOGFONTW@@KK@Z ; CHtmlToRtf::Convert
PUBLIC	??0CHtmlToRtf@@QAE@XZ				; CHtmlToRtf::CHtmlToRtf
PUBLIC	??1CHtmlToRtf@@QAE@XZ				; CHtmlToRtf::~CHtmlToRtf
;	COMDAT xdata$x
; File D:\_CODE\Shared\Rtf2HtmlConverter.cpp
xdata$x	SEGMENT
$T83239	DD	019930520H
	DD	03H
	DD	FLAT:$T83241
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T83241	DD	0ffffffffH
	DD	FLAT:$L83235
	DD	00H
	DD	FLAT:$L83236
	DD	01H
	DD	FLAT:$L83237
xdata$x	ENDS
;	COMDAT ?ConvertHtmlToRtfWithViskoe@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z
_TEXT	SEGMENT
_szHtmlFile$ = 8
_sRtf$ = 16
_this$ = -176
_bSuccess$ = -20
_sHtml$ = -16
_htm2Rtf$81945 = -72
_lf$81946 = -164
$T83233 = -168
$T83234 = -172
__$EHRec$ = -12
?ConvertHtmlToRtfWithViskoe@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z PROC NEAR ; CRtfHtmlConverter::ConvertHtmlToRtfWithViskoe, COMDAT

; 619  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L83240
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 172				; 000000acH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-184]
	mov	ecx, 43					; 0000002bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 620  : 	BOOL bSuccess = FALSE;

	mov	DWORD PTR _bSuccess$[ebp], 0

; 621  : 	CString sHtml;

	lea	ecx, DWORD PTR _sHtml$[ebp]
	call	??0CString@@QAE@XZ			; CString::CString
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 622  : 	
; 623  : 	if (FileMisc::LoadFile(szHtmlFile, sHtml))

	push	0
	lea	eax, DWORD PTR _sHtml$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szHtmlFile$[ebp]
	push	ecx
	call	?LoadFile@FileMisc@@YAHPBGAAVCString@@H@Z ; FileMisc::LoadFile
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$L81944

; 625  : 		CHtmlToRtf htm2Rtf;

	lea	ecx, DWORD PTR _htm2Rtf$81945[ebp]
	call	??0CHtmlToRtf@@QAE@XZ			; CHtmlToRtf::CHtmlToRtf
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 626  : 		LOGFONT lf = { 0 };

	mov	DWORD PTR _lf$81946[ebp], 0
	mov	ecx, 22					; 00000016H
	xor	eax, eax
	lea	edi, DWORD PTR _lf$81946[ebp+4]
	rep stosd

; 627  : 	
; 628  : 		sRtf = htm2Rtf.Convert(sHtml, lf, 0, 0x00ffffff);

	push	16777215				; 00ffffffH
	push	0
	lea	edx, DWORD PTR _lf$81946[ebp]
	push	edx
	lea	eax, DWORD PTR _sHtml$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T83233[ebp]
	push	ecx
	lea	ecx, DWORD PTR _htm2Rtf$81945[ebp]
	call	?Convert@CHtmlToRtf@@QAE?AVCString@@ABV2@ABUtagLOGFONTW@@KK@Z ; CHtmlToRtf::Convert
	mov	DWORD PTR -180+[ebp], eax
	mov	edx, DWORD PTR -180+[ebp]
	mov	DWORD PTR -184+[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	eax, DWORD PTR -184+[ebp]
	push	eax
	mov	ecx, DWORD PTR _sRtf$[ebp]
	call	??4CString@@QAEABV0@ABV0@@Z		; CString::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T83233[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString

; 629  : 	}

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _htm2Rtf$81945[ebp]
	call	??1CHtmlToRtf@@QAE@XZ			; CHtmlToRtf::~CHtmlToRtf
$L81944:

; 630  : 	
; 631  : 	return bSuccess;

	mov	ecx, DWORD PTR _bSuccess$[ebp]
	mov	DWORD PTR $T83234[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sHtml$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	eax, DWORD PTR $T83234[ebp]

; 632  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	add	esp, 184				; 000000b8H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L83235:
	lea	ecx, DWORD PTR _sHtml$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83236:
	lea	ecx, DWORD PTR _htm2Rtf$81945[ebp]
	call	??1CHtmlToRtf@@QAE@XZ			; CHtmlToRtf::~CHtmlToRtf
	ret	0
$L83237:
	lea	ecx, DWORD PTR $T83233[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83240:
	mov	eax, OFFSET FLAT:$T83239
	jmp	___CxxFrameHandler
text$x	ENDS
?ConvertHtmlToRtfWithViskoe@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z ENDP ; CRtfHtmlConverter::ConvertHtmlToRtfWithViskoe
PUBLIC	??_C@_0L@HMNK@pstrBuffer?$AA@			; `string'
PUBLIC	??_C@_0CH@OGBG@D?3?2_CODE?2Shared?2?4?4?23rdparty?2html@ ; `string'
PUBLIC	??_C@_0BL@ELJA@wcslen?$CIpstrBuffer?$CJ?5?$DM?5nSize?$AA@ ; `string'
PUBLIC	??_C@_1BI@OCJO@?$AA?$HL?$AA?2?$AAr?$AAt?$AAf?$AA1?$AA?2?$AAa?$AAn?$AAs?$AAi?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@GLLJ@?$AA?2?$AAd?$AAe?$AAf?$AAf?$AA0?$AA?$HL?$AA?2?$AAf?$AAo?$AAn?$AAt?$AAt?$AAb?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@OGMM@?$AA?$HL?$AA?2?$AAf?$AA?$CF?$AAd?$AA?2?$AAf?$AAn?$AAi?$AAl?$AA?2?$AAf?$AAc?$AAh?$AAa?$AAr?$AAs?$AAe?$AAt?$AA0@ ; `string'
PUBLIC	??_C@_13GMOM@?$AA?$HN?$AA?$AA@			; `string'
PUBLIC	??_C@_1BK@LLIP@?$AA?$HL?$AA?2?$AAc?$AAo?$AAl?$AAo?$AAr?$AAt?$AAb?$AAl?$AA?5?$AA?$DL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@FEDJ@?$AA?2?$AAr?$AAe?$AAd?$AA?$CF?$AAd?$AA?2?$AAg?$AAr?$AAe?$AAe?$AAn?$AA?$CF?$AAd?$AA?2?$AAb?$AAl?$AAu?$AAe?$AA?$CF@ ; `string'
PUBLIC	??_C@_1CA@LEHK@?$AA?2?$AAp?$AAa?$AAr?$AAd?$AA?2?$AAp?$AAl?$AAa?$AAi?$AAn?$AA?2?$AAt?$AAx?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@OFPE@?$AA?2?$AAf?$AAs?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_11A@?$AA?$AA@				; `string'
PUBLIC	?GetSize@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QBEHXZ ; ATL::CSimpleArray<tagLOGFONTW>::GetSize
PUBLIC	?RemoveAll@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEXXZ ; ATL::CSimpleArray<tagLOGFONTW>::RemoveAll
PUBLIC	?Add@?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAEHUtagLOGFONTW@@@Z ; ATL::CSimpleValArray<tagLOGFONTW>::Add
PUBLIC	??A?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QBE?AUtagLOGFONTW@@H@Z ; ATL::CSimpleValArray<tagLOGFONTW>::operator[]
PUBLIC	?GetSize@?$CSimpleArray@K@ATL@@QBEHXZ		; ATL::CSimpleArray<unsigned long>::GetSize
PUBLIC	?RemoveAll@?$CSimpleArray@K@ATL@@QAEXXZ		; ATL::CSimpleArray<unsigned long>::RemoveAll
PUBLIC	?Add@?$CSimpleValArray@K@ATL@@QAEHK@Z		; ATL::CSimpleValArray<unsigned long>::Add
PUBLIC	??A?$CSimpleValArray@K@ATL@@QBEKH@Z		; ATL::CSimpleValArray<unsigned long>::operator[]
PUBLIC	?RemoveAll@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEXXZ ; ATL::CSimpleArray<CHtmlToRtf::LINK>::RemoveAll
PUBLIC	?Parse@CHtmlToRtf@@QAE_NPBGAAPAG@Z		; CHtmlToRtf::Parse
PUBLIC	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z		; CHtmlToRtf::AddOutput
PUBLIC	?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ		; CHtmlToRtf::AddOutputV
PUBLIC	?GetFontSize@CHtmlToRtf@@QBEHH@Z		; CHtmlToRtf::GetFontSize
EXTRN	__imp__free:NEAR
EXTRN	__imp__malloc:NEAR
EXTRN	__imp___CrtDbgReport:NEAR
EXTRN	?GetLength@CString@@QBEHXZ:NEAR			; CString::GetLength
EXTRN	__imp__wcslen:NEAR
EXTRN	?GetBuffer@CString@@QAEPAGH@Z:NEAR		; CString::GetBuffer
EXTRN	?ReleaseBuffer@CString@@QAEXH@Z:NEAR		; CString::ReleaseBuffer
;	COMDAT ??_C@_11A@?$AA?$AA@
; File D:\_CODE\Shared\..\3rdparty\html2rtf.h
_BSS	SEGMENT
??_C@_11A@?$AA?$AA@ DW 01H DUP (?)			; `string'
_BSS	ENDS
;	COMDAT ??_C@_0L@HMNK@pstrBuffer?$AA@
_DATA	SEGMENT
??_C@_0L@HMNK@pstrBuffer?$AA@ DB 'pstrBuffer', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CH@OGBG@D?3?2_CODE?2Shared?2?4?4?23rdparty?2html@
_DATA	SEGMENT
??_C@_0CH@OGBG@D?3?2_CODE?2Shared?2?4?4?23rdparty?2html@ DB 'D:\_CODE\Sha'
	DB	'red\..\3rdparty\html2rtf.h', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BL@ELJA@wcslen?$CIpstrBuffer?$CJ?5?$DM?5nSize?$AA@
_DATA	SEGMENT
??_C@_0BL@ELJA@wcslen?$CIpstrBuffer?$CJ?5?$DM?5nSize?$AA@ DB 'wcslen(pstr'
	DB	'Buffer) < nSize', 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BI@OCJO@?$AA?$HL?$AA?2?$AAr?$AAt?$AAf?$AA1?$AA?2?$AAa?$AAn?$AAs?$AAi?$AA?$AA@
_DATA	SEGMENT
??_C@_1BI@OCJO@?$AA?$HL?$AA?2?$AAr?$AAt?$AAf?$AA1?$AA?2?$AAa?$AAn?$AAs?$AAi?$AA?$AA@ DB '{'
	DB	00H, '\', 00H, 'r', 00H, 't', 00H, 'f', 00H, '1', 00H, '\', 00H
	DB	'a', 00H, 'n', 00H, 's', 00H, 'i', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CA@GLLJ@?$AA?2?$AAd?$AAe?$AAf?$AAf?$AA0?$AA?$HL?$AA?2?$AAf?$AAo?$AAn?$AAt?$AAt?$AAb?$AAl?$AA?$AA@
_DATA	SEGMENT
??_C@_1CA@GLLJ@?$AA?2?$AAd?$AAe?$AAf?$AAf?$AA0?$AA?$HL?$AA?2?$AAf?$AAo?$AAn?$AAt?$AAt?$AAb?$AAl?$AA?$AA@ DB '\'
	DB	00H, 'd', 00H, 'e', 00H, 'f', 00H, 'f', 00H, '0', 00H, '{', 00H
	DB	'\', 00H, 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, 't', 00H, 'b'
	DB	00H, 'l', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DE@OGMM@?$AA?$HL?$AA?2?$AAf?$AA?$CF?$AAd?$AA?2?$AAf?$AAn?$AAi?$AAl?$AA?2?$AAf?$AAc?$AAh?$AAa?$AAr?$AAs?$AAe?$AAt?$AA0@
_DATA	SEGMENT
??_C@_1DE@OGMM@?$AA?$HL?$AA?2?$AAf?$AA?$CF?$AAd?$AA?2?$AAf?$AAn?$AAi?$AAl?$AA?2?$AAf?$AAc?$AAh?$AAa?$AAr?$AAs?$AAe?$AAt?$AA0@ DB '{'
	DB	00H, '\', 00H, 'f', 00H, '%', 00H, 'd', 00H, '\', 00H, 'f', 00H
	DB	'n', 00H, 'i', 00H, 'l', 00H, '\', 00H, 'f', 00H, 'c', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, 's', 00H, 'e', 00H, 't', 00H, '0', 00H
	DB	' ', 00H, '%', 00H, 's', 00H, ';', 00H, '}', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_13GMOM@?$AA?$HN?$AA?$AA@
_DATA	SEGMENT
??_C@_13GMOM@?$AA?$HN?$AA?$AA@ DB '}', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BK@LLIP@?$AA?$HL?$AA?2?$AAc?$AAo?$AAl?$AAo?$AAr?$AAt?$AAb?$AAl?$AA?5?$AA?$DL?$AA?$AA@
_DATA	SEGMENT
??_C@_1BK@LLIP@?$AA?$HL?$AA?2?$AAc?$AAo?$AAl?$AAo?$AAr?$AAt?$AAb?$AAl?$AA?5?$AA?$DL?$AA?$AA@ DB '{'
	DB	00H, '\', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H
	DB	't', 00H, 'b', 00H, 'l', 00H, ' ', 00H, ';', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CO@FEDJ@?$AA?2?$AAr?$AAe?$AAd?$AA?$CF?$AAd?$AA?2?$AAg?$AAr?$AAe?$AAe?$AAn?$AA?$CF?$AAd?$AA?2?$AAb?$AAl?$AAu?$AAe?$AA?$CF@
_DATA	SEGMENT
??_C@_1CO@FEDJ@?$AA?2?$AAr?$AAe?$AAd?$AA?$CF?$AAd?$AA?2?$AAg?$AAr?$AAe?$AAe?$AAn?$AA?$CF?$AAd?$AA?2?$AAb?$AAl?$AAu?$AAe?$AA?$CF@ DB '\'
	DB	00H, 'r', 00H, 'e', 00H, 'd', 00H, '%', 00H, 'd', 00H, '\', 00H
	DB	'g', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'n', 00H, '%', 00H, 'd'
	DB	00H, '\', 00H, 'b', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '%', 00H
	DB	'd', 00H, ';', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CA@LEHK@?$AA?2?$AAp?$AAa?$AAr?$AAd?$AA?2?$AAp?$AAl?$AAa?$AAi?$AAn?$AA?2?$AAt?$AAx?$AA0?$AA?$AA@
_DATA	SEGMENT
??_C@_1CA@LEHK@?$AA?2?$AAp?$AAa?$AAr?$AAd?$AA?2?$AAp?$AAl?$AAa?$AAi?$AAn?$AA?2?$AAt?$AAx?$AA0?$AA?$AA@ DB '\'
	DB	00H, 'p', 00H, 'a', 00H, 'r', 00H, 'd', 00H, '\', 00H, 'p', 00H
	DB	'l', 00H, 'a', 00H, 'i', 00H, 'n', 00H, '\', 00H, 't', 00H, 'x'
	DB	00H, '0', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@OFPE@?$AA?2?$AAf?$AAs?$AA?$CF?$AAd?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@OFPE@?$AA?2?$AAf?$AAs?$AA?$CF?$AAd?$AA?$AA@ DB '\', 00H, 'f', 00H
	DB	's', 00H, '%', 00H, 'd', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T83251	DD	019930520H
	DD	02H
	DD	FLAT:$T83253
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T83253	DD	0ffffffffH
	DD	FLAT:$L83246
	DD	00H
	DD	FLAT:$L83249
xdata$x	ENDS
;	COMDAT ?Convert@CHtmlToRtf@@QAE?AVCString@@ABV2@ABUtagLOGFONTW@@KK@Z
_TEXT	SEGMENT
_SIZE_FACTOR$ = -24
_nTextSize$ = -20
_nSize$ = -16
_pstrBuffer$ = -32
_pstrDest$ = -36
_bRes$ = -44
_sRTF$ = -40
_i$ = -28
_lf$80924 = -136
_clr$80932 = -140
$T83247 = -144
__$EHRec$ = -12
_sHTML$ = 12
_lf$ = 16
_clrText$ = 20
_clrBack$ = 24
___$ReturnUdt$ = 8
_this$ = -148
?Convert@CHtmlToRtf@@QAE?AVCString@@ABV2@ABUtagLOGFONTW@@KK@Z PROC NEAR ; CHtmlToRtf::Convert, COMDAT

; 71   : 	{ 

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L83252
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 136				; 00000088H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-148]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T83247[ebp], 0

; 72   : 		// Create a new output buffer 
; 73   : 		// We assume that we can create a correctly sized output 
; 74   : 		// buffer before we convert HTML to RTF... 
; 75   : 		const int SIZE_FACTOR = 2; 

	mov	DWORD PTR _SIZE_FACTOR$[ebp], 2

; 76   : 		unsigned int nTextSize = sHTML.GetLength(); 

	mov	ecx, DWORD PTR _sHTML$[ebp]
	call	?GetLength@CString@@QBEHXZ		; CString::GetLength
	mov	DWORD PTR _nTextSize$[ebp], eax

; 77   : 		unsigned int nSize = nTextSize * SIZE_FACTOR; 

	mov	eax, DWORD PTR _nTextSize$[ebp]
	shl	eax, 1
	mov	DWORD PTR _nSize$[ebp], eax

; 78   : 
; 79   : 		if (nSize < 1000) 

	cmp	DWORD PTR _nSize$[ebp], 1000		; 000003e8H
	jae	SHORT $L80899

; 80   : 			nSize = 1000; 

	mov	DWORD PTR _nSize$[ebp], 1000		; 000003e8H
$L80899:

; 81   : 
; 82   : 		LPTSTR pstrBuffer = (LPTSTR) malloc(nSize*sizeof(TCHAR)); 

	mov	ecx, DWORD PTR _nSize$[ebp]
	shl	ecx, 1
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__malloc
	add	esp, 4
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _pstrBuffer$[ebp], eax
$L80903:

; 83   : 		ATLASSERT(pstrBuffer); 

	cmp	DWORD PTR _pstrBuffer$[ebp], 0
	jne	SHORT $L80906
	mov	esi, esp
	push	OFFSET FLAT:??_C@_0L@HMNK@pstrBuffer?$AA@ ; `string'
	push	0
	push	83					; 00000053H
	push	OFFSET FLAT:??_C@_0CH@OGBG@D?3?2_CODE?2Shared?2?4?4?23rdparty?2html@ ; `string'
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__chkesp
	cmp	eax, 1
	jne	SHORT $L80906
	int	3
$L80906:
	xor	edx, edx
	test	edx, edx
	jne	SHORT $L80903

; 84   : 		
; 85   : 		// Initialize structures 
; 86   : 		m_aFonts.RemoveAll(); 

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEXXZ ; ATL::CSimpleArray<tagLOGFONTW>::RemoveAll

; 87   : 		m_aFonts.Add(lf); 

	sub	esp, 92					; 0000005cH
	mov	ecx, 23					; 00000017H
	mov	esi, DWORD PTR _lf$[ebp]
	mov	edi, esp
	rep movsd
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAEHUtagLOGFONTW@@@Z ; ATL::CSimpleValArray<tagLOGFONTW>::Add

; 88   : 		m_aColors.RemoveAll(); 

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?RemoveAll@?$CSimpleArray@K@ATL@@QAEXXZ	; ATL::CSimpleArray<unsigned long>::RemoveAll

; 89   : 		m_aColors.Add(clrText); 

	mov	eax, DWORD PTR _clrText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Add@?$CSimpleValArray@K@ATL@@QAEHK@Z	; ATL::CSimpleValArray<unsigned long>::Add

; 90   : 		m_aColors.Add(clrBack); 

	mov	ecx, DWORD PTR _clrBack$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Add@?$CSimpleValArray@K@ATL@@QAEHK@Z	; ATL::CSimpleValArray<unsigned long>::Add

; 91   : 		m_aLinks.RemoveAll(); 

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?RemoveAll@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEXXZ ; ATL::CSimpleArray<CHtmlToRtf::LINK>::RemoveAll

; 92   : 		
; 93   : 		// Parse HTML and convert it into RTF 
; 94   : 		LPTSTR pstrDest = pstrBuffer; 

	mov	edx, DWORD PTR _pstrBuffer$[ebp]
	mov	DWORD PTR _pstrDest$[ebp], edx

; 95   : 		m_clrBack = clrBack; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _clrBack$[ebp]
	mov	DWORD PTR [eax+40], ecx

; 96   : 		bool bRes = Parse(sHTML, pstrDest); 

	lea	edx, DWORD PTR _pstrDest$[ebp]
	push	edx
	mov	ecx, DWORD PTR _sHTML$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parse@CHtmlToRtf@@QAE_NPBGAAPAG@Z	; CHtmlToRtf::Parse
	mov	BYTE PTR _bRes$[ebp], al

; 97   : 		*pstrDest = _T('\0'); 

	mov	eax, DWORD PTR _pstrDest$[ebp]
	mov	WORD PTR [eax], 0
$L80911:

; 98   : 		ATLASSERT(_tcslen(pstrBuffer) < nSize); 

	mov	esi, esp
	mov	ecx, DWORD PTR _pstrBuffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__wcslen
	add	esp, 4
	cmp	esi, esp
	call	__chkesp
	cmp	eax, DWORD PTR _nSize$[ebp]
	jb	SHORT $L80914
	mov	esi, esp
	push	OFFSET FLAT:??_C@_0BL@ELJA@wcslen?$CIpstrBuffer?$CJ?5?$DM?5nSize?$AA@ ; `string'
	push	0
	push	98					; 00000062H
	push	OFFSET FLAT:??_C@_0CH@OGBG@D?3?2_CODE?2Shared?2?4?4?23rdparty?2html@ ; `string'
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__chkesp
	cmp	eax, 1
	jne	SHORT $L80914
	int	3
$L80914:
	xor	edx, edx
	test	edx, edx
	jne	SHORT $L80911

; 99   : 		if (!bRes) { 

	mov	eax, DWORD PTR _bRes$[ebp]
	and	eax, 255				; 000000ffH
	test	eax, eax
	jne	SHORT $L80916

; 100  : 			free(pstrBuffer); 

	mov	esi, esp
	mov	ecx, DWORD PTR _pstrBuffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__chkesp

; 101  : 			return _T(""); 

	push	OFFSET FLAT:??_C@_11A@?$AA?$AA@		; `string'
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CString@@QAE@PBG@Z			; CString::CString
	mov	edx, DWORD PTR $T83247[ebp]
	or	edx, 1
	mov	DWORD PTR $T83247[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$L80895
$L80916:

; 103  : 		clrBack = m_clrBack; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _clrBack$[ebp], ecx

; 104  : 		
; 105  : 		// Prepare RTF document... 
; 106  : 		CString sRTF;

	lea	ecx, DWORD PTR _sRTF$[ebp]
	call	??0CString@@QAE@XZ			; CString::CString
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 107  : 		pstrDest = sRTF.GetBuffer(nSize);

	mov	edx, DWORD PTR _nSize$[ebp]
	push	edx
	lea	ecx, DWORD PTR _sRTF$[ebp]
	call	?GetBuffer@CString@@QAEPAGH@Z		; CString::GetBuffer
	mov	DWORD PTR _pstrDest$[ebp], eax

; 108  : 
; 109  : 		AddOutput(pstrDest, _T("{\\rtf1\\ansi")); 

	push	OFFSET FLAT:??_C@_1BI@OCJO@?$AA?$HL?$AA?2?$AAr?$AAt?$AAf?$AA1?$AA?2?$AAa?$AAn?$AAs?$AAi?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _pstrDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 110  : 		// Add fonts 
; 111  : 		AddOutput(pstrDest, _T("\\deff0{\\fonttbl")); 

	push	OFFSET FLAT:??_C@_1CA@GLLJ@?$AA?2?$AAd?$AAe?$AAf?$AAf?$AA0?$AA?$HL?$AA?2?$AAf?$AAo?$AAn?$AAt?$AAt?$AAb?$AAl?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _pstrDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 112  : 		for(int i=0; i<m_aFonts.GetSize(); i++) { 

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L80921
$L80922:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$L80921:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QBEHXZ ; ATL::CSimpleArray<tagLOGFONTW>::GetSize
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $L80923

; 113  : 			LOGFONT lf = m_aFonts[i]; 

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lf$80924[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QBE?AUtagLOGFONTW@@H@Z ; ATL::CSimpleValArray<tagLOGFONTW>::operator[]

; 114  : 			AddOutputV(pstrDest, _T("{\\f%d\\fnil\\fcharset0 %s;}"), i, lf.lfFaceName); 

	lea	edx, DWORD PTR _lf$80924[ebp+28]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_1DE@OGMM@?$AA?$HL?$AA?2?$AAf?$AA?$CF?$AAd?$AA?2?$AAf?$AAn?$AAi?$AAl?$AA?2?$AAf?$AAc?$AAh?$AAa?$AAr?$AAs?$AAe?$AAt?$AA0@ ; `string'
	lea	ecx, DWORD PTR _pstrDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ	; CHtmlToRtf::AddOutputV
	add	esp, 20					; 00000014H

; 115  : 		} 

	jmp	SHORT $L80922
$L80923:

; 116  : 		AddOutput(pstrDest, _T("}")); 

	push	OFFSET FLAT:??_C@_13GMOM@?$AA?$HN?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _pstrDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 117  : 		// Add colors 
; 118  : 		AddOutput(pstrDest, _T("{\\colortbl ;")); 

	push	OFFSET FLAT:??_C@_1BK@LLIP@?$AA?$HL?$AA?2?$AAc?$AAo?$AAl?$AAo?$AAr?$AAt?$AAb?$AAl?$AA?5?$AA?$DL?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _pstrDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 119  : 		for(i=0; i<m_aColors.GetSize(); i++) { 

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L80929
$L80930:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$L80929:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetSize@?$CSimpleArray@K@ATL@@QBEHXZ	; ATL::CSimpleArray<unsigned long>::GetSize
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $L80931

; 120  : 			COLORREF clr = m_aColors[i]; 

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CSimpleValArray@K@ATL@@QBEKH@Z	; ATL::CSimpleValArray<unsigned long>::operator[]
	mov	DWORD PTR _clr$80932[ebp], eax

; 121  : 			AddOutputV(pstrDest, _T("\\red%d\\green%d\\blue%d;"),  
; 122  : 				GetRValue(clr), GetGValue(clr), GetBValue(clr)); 

	mov	ecx, DWORD PTR _clr$80932[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	push	ecx
	mov	edx, DWORD PTR _clr$80932[ebp]
	and	edx, 65535				; 0000ffffH
	sar	edx, 8
	and	edx, 255				; 000000ffH
	push	edx
	mov	eax, DWORD PTR _clr$80932[ebp]
	and	eax, 255				; 000000ffH
	push	eax
	push	OFFSET FLAT:??_C@_1CO@FEDJ@?$AA?2?$AAr?$AAe?$AAd?$AA?$CF?$AAd?$AA?2?$AAg?$AAr?$AAe?$AAe?$AAn?$AA?$CF?$AAd?$AA?2?$AAb?$AAl?$AAu?$AAe?$AA?$CF@ ; `string'
	lea	ecx, DWORD PTR _pstrDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ	; CHtmlToRtf::AddOutputV
	add	esp, 24					; 00000018H

; 123  : 		} 

	jmp	SHORT $L80930
$L80931:

; 124  : 		AddOutput(pstrDest, _T("}")); 

	push	OFFSET FLAT:??_C@_13GMOM@?$AA?$HN?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _pstrDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 125  : 		// Some other stuff 
; 126  : 		AddOutput(pstrDest, _T("\\pard\\plain\\tx0")); 

	push	OFFSET FLAT:??_C@_1CA@LEHK@?$AA?2?$AAp?$AAa?$AAr?$AAd?$AA?2?$AAp?$AAl?$AAa?$AAi?$AAn?$AA?2?$AAt?$AAx?$AA0?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _pstrDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 127  : 		AddOutputV(pstrDest, _T("\\fs%d"), GetFontSize(lf.lfHeight)); 

	mov	edx, DWORD PTR _lf$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFontSize@CHtmlToRtf@@QBEHH@Z	; CHtmlToRtf::GetFontSize
	push	eax
	push	OFFSET FLAT:??_C@_1M@OFPE@?$AA?2?$AAf?$AAs?$AA?$CF?$AAd?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _pstrDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ	; CHtmlToRtf::AddOutputV
	add	esp, 16					; 00000010H

; 128  : 		// Add converted buffer 
; 129  : 		AddOutput(pstrDest, pstrBuffer); 

	mov	eax, DWORD PTR _pstrBuffer$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pstrDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 130  : 		// Almost done 
; 131  : 		AddOutput(pstrDest, _T("}")); 

	push	OFFSET FLAT:??_C@_13GMOM@?$AA?$HN?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _pstrDest$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 132  : 		*pstrDest = _T('\0'); 

	mov	eax, DWORD PTR _pstrDest$[ebp]
	mov	WORD PTR [eax], 0

; 133  : 		
; 134  : 		free(pstrBuffer); 

	mov	esi, esp
	mov	ecx, DWORD PTR _pstrBuffer$[ebp]
	push	ecx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__chkesp

; 135  : 		sRTF.ReleaseBuffer();

	push	-1
	lea	ecx, DWORD PTR _sRTF$[ebp]
	call	?ReleaseBuffer@CString@@QAEXH@Z		; CString::ReleaseBuffer

; 136  : 
; 137  : 		return sRTF; 

	lea	edx, DWORD PTR _sRTF$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CString@@QAE@ABV0@@Z			; CString::CString
	mov	eax, DWORD PTR $T83247[ebp]
	or	al, 1
	mov	DWORD PTR $T83247[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sRTF$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$L80895:

; 138  : 	} 

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 148				; 00000094H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L83246:
	mov	eax, DWORD PTR $T83247[ebp]
	and	eax, 1
	test	eax, eax
	je	$L83248
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
$L83248:
	ret	0
$L83249:
	lea	ecx, DWORD PTR _sRTF$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83252:
	mov	eax, OFFSET FLAT:$T83251
	jmp	___CxxFrameHandler
text$x	ENDS
?Convert@CHtmlToRtf@@QAE?AVCString@@ABV2@ABUtagLOGFONTW@@KK@Z ENDP ; CHtmlToRtf::Convert
PUBLIC	??0?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@XZ ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::CSimpleArray<CHtmlToRtf::CONTEXT>
PUBLIC	??1?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@XZ ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::~CSimpleArray<CHtmlToRtf::CONTEXT>
PUBLIC	?GetSize@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QBEHXZ ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::GetSize
PUBLIC	?Add@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEHAAUCONTEXT@CHtmlToRtf@@@Z ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::Add
PUBLIC	?RemoveAt@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEHH@Z ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::RemoveAt
PUBLIC	??A?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QBEAAUCONTEXT@CHtmlToRtf@@H@Z ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::operator[]
PUBLIC	??_C@_0BC@FOJF@?$CKpszStart?5?$DN?$DN?5L?8?$DM?8?$AA@ ; `string'
PUBLIC	??_C@_0BC@HDMA@?$CKpszStart?5?$DN?$DN?5L?8?$DO?8?$AA@ ; `string'
PUBLIC	??_C@_13GDFC@?$AAb?$AA?$AA@			; `string'
PUBLIC	??_C@_1O@GHPE@?$AAs?$AAt?$AAr?$AAo?$AAn?$AAg?$AA?$AA@ ; `string'
PUBLIC	??_C@_19GDBA@?$AA?2?$AAb?$AA1?$AA?5?$AA?$AA@	; `string'
PUBLIC	??_C@_13FNM@?$AAi?$AA?$AA@			; `string'
PUBLIC	??_C@_19GEAD@?$AA?2?$AAi?$AA1?$AA?5?$AA?$AA@	; `string'
PUBLIC	??_C@_13PMFJ@?$AAu?$AA?$AA@			; `string'
PUBLIC	??_C@_1M@JMIB@?$AA?2?$AAu?$AAl?$AA1?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_15PIM@?$AAb?$AAr?$AA?$AA@			; `string'
PUBLIC	??_C@_1O@PKF@?$AA?2?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_13OGBF@?$AAp?$AA?$AA@			; `string'
PUBLIC	??_C@_19NMIN@?$AA?2?$AAp?$AAa?$AAr?$AA?$AA@	; `string'
PUBLIC	??_C@_1M@FOLM@?$AA?2?$AAp?$AAa?$AAr?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_19DMNK@?$AAb?$AAo?$AAd?$AAy?$AA?$AA@	; `string'
PUBLIC	??_C@_1BA@GFIG@?$AAb?$AAg?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@NBJG@?$AAl?$AAe?$AAf?$AAt?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@BCNB@?$AAr?$AAi?$AAg?$AAh?$AAt?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@EKOC@?$AAt?$AAo?$AAp?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@BDJC@?$AAb?$AAo?$AAt?$AAt?$AAo?$AAm?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@KJIA@?$AA?2?$AAm?$AAa?$AAr?$AAg?$AAt?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@KHKH@?$AA?2?$AAm?$AAa?$AAr?$AAg?$AAb?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@LDPJ@?$AA?2?$AAl?$AAi?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@IIK@?$AA?2?$AAr?$AAi?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_19POGD@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@	; `string'
PUBLIC	??_C@_1M@NMBO@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_19HEI@?$AAs?$AAi?$AAz?$AAe?$AA?$AA@	; `string'
PUBLIC	??_C@_19DPFF@?$AAf?$AAa?$AAc?$AAe?$AA?$AA@	; `string'
PUBLIC	??_C@_13JFGJ@?$AAa?$AA?$AA@			; `string'
PUBLIC	??_C@_19MKE@?$AAh?$AAr?$AAe?$AAf?$AA?$AA@	; `string'
PUBLIC	??_C@_19DBLE@?$AAs?$AAp?$AAa?$AAn?$AA?$AA@	; `string'
PUBLIC	??_C@_17GLBJ@?$AAd?$AAi?$AAv?$AA?$AA@		; `string'
PUBLIC	??_C@_1M@CDLF@?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@DIJA@?$AAc?$AAe?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_19LCLP@?$AA?2?$AAq?$AAc?$AA?5?$AA?$AA@	; `string'
PUBLIC	??_C@_19EABO@?$AAl?$AAe?$AAf?$AAt?$AA?$AA@	; `string'
PUBLIC	??_C@_19NDGP@?$AA?2?$AAq?$AAl?$AA?5?$AA?$AA@	; `string'
PUBLIC	??_C@_1M@JIED@?$AAr?$AAi?$AAg?$AAh?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_19BAMP@?$AA?2?$AAq?$AAr?$AA?5?$AA?$AA@	; `string'
PUBLIC	??_C@_1BA@EPCE@?$AAj?$AAu?$AAs?$AAt?$AAi?$AAf?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_19BDLA@?$AA?2?$AAq?$AAj?$AA?5?$AA?$AA@	; `string'
PUBLIC	??_C@_1O@BBAK@?$AAn?$AAo?$AAw?$AAr?$AAa?$AAp?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@KLEN@?$AA?2?$AAn?$AAo?$AAw?$AAw?$AAr?$AAa?$AAp?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@JCAI@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@DOCF@?$AAb?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@BJIG@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@MOGP@?$AAf?$AAi?$AAx?$AAe?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BP@LEPM@wcscmp?$CIszValue?0?5L?$CCfixed?$CC?$CJ?5?$DN?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_1EC@PEBJ@?$AA?2?$AAp?$AAa?$AAr?$AA?2?$AAt?$AAr?$AAo?$AAw?$AAd?$AA?5?$AA?2?$AAt?$AAr?$AAg?$AAa?$AAp?$AAh?$AA1?$AA0@ ; `string'
PUBLIC	??_C@_1DA@FEHP@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAt?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@ ; `string'
PUBLIC	??_C@_1DA@CFHL@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAl?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@ ; `string'
PUBLIC	??_C@_1DA@OJMG@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAb?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@ ; `string'
PUBLIC	??_C@_1DA@EIDO@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAr?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@ ; `string'
PUBLIC	??_C@_17HHNM@?$AAc?$AAo?$AAl?$AA?$AA@		; `string'
PUBLIC	??_C@_1M@NBCC@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@ ; `string'
PUBLIC	??_C@_08GMAA@lWidth?$DO0?$AA@			; `string'
PUBLIC	??_C@_1LC@KOAF@?$AA?2?$AAc?$AAl?$AAb?$AAr?$AAd?$AAr?$AAt?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw?$AA1?$AA5?$AA?2?$AAb?$AAr?$AAd@ ; `string'
PUBLIC	??_C@_1BE@NEEH@?$AA?2?$AAc?$AAe?$AAl?$AAl?$AAx?$AA?$CF?$AAl?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_15MNAG@?$AAt?$AAr?$AA?$AA@		; `string'
PUBLIC	??_C@_1BA@PKMO@?$AA?2?$AAi?$AAn?$AAt?$AAb?$AAl?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_15BL@?$AAt?$AAd?$AA?$AA@			; `string'
PUBLIC	??_C@_1O@DBMO@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$DN?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@BFAL@?$AAb?$AAa?$AAc?$AAk?$AAg?$AAr?$AAo?$AAu?$AAn?$AAd?$AA?9?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_15GCI@?$AA?1?$AAb?$AA?$AA@		; `string'
PUBLIC	??_C@_1BA@GLJN@?$AA?1?$AAs?$AAt?$AAr?$AAo?$AAn?$AAg?$AA?$AA@ ; `string'
PUBLIC	??_C@_19MDDF@?$AA?2?$AAb?$AA0?$AA?5?$AA?$AA@	; `string'
PUBLIC	??_C@_15GAKG@?$AA?1?$AAi?$AA?$AA@		; `string'
PUBLIC	??_C@_19MECG@?$AA?2?$AAi?$AA0?$AA?5?$AA?$AA@	; `string'
PUBLIC	??_C@_15JJCD@?$AA?1?$AAu?$AA?$AA@		; `string'
PUBLIC	??_C@_1BC@EJLG@?$AA?2?$AAu?$AAl?$AAn?$AAo?$AAn?$AAe?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_17KCPH@?$AA?1?$AAt?$AAr?$AA?$AA@		; `string'
PUBLIC	??_C@_1M@GJEM@?$AA?2?$AAr?$AAo?$AAw?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_17GPOK@?$AA?1?$AAt?$AAd?$AA?$AA@		; `string'
PUBLIC	??_C@_1O@CJDB@?$AA?2?$AAc?$AAe?$AAl?$AAl?$AA?5?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@KMPD@?$AA?1?$AAb?$AAo?$AAd?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@GOEK@?$AA?1?$AAf?$AAo?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_15PABD@?$AA?1?$AAa?$AA?$AA@		; `string'
PUBLIC	??_C@_1M@KBJN@?$AA?1?$AAs?$AAp?$AAa?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_19HPKF@?$AA?1?$AAd?$AAi?$AAv?$AA?$AA@	; `string'
PUBLIC	??_C@_1O@ICNL@?$AA?1?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_13IAJL@?$AA?$HL?$AA?$AA@			; `string'
PUBLIC	??_C@_0BG@MFAG@aContexts?4GetSize?$CI?$CJ?$DO0?$AA@ ; `string'
PUBLIC	??_C@_17GLOK@?$AA?$HN?$AA?$AN?$AA?6?$AA?$AA@	; `string'
PUBLIC	??_C@_1M@FDAF@?$AA?2?$AAc?$AAf?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@KEAH@?$AA?2?$AAh?$AAi?$AAg?$AAh?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?$CF?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_19JGHG@?$AA?2?$AAf?$AA?$CF?$AAd?$AA?$AA@	; `string'
PUBLIC	??_C@_13ECNF@?$AA?5?$AA?$AA@			; `string'
PUBLIC	??0LINK@CHtmlToRtf@@QAE@XZ			; CHtmlToRtf::LINK::LINK
PUBLIC	??0LINK@CHtmlToRtf@@QAE@ABU01@@Z		; CHtmlToRtf::LINK::LINK
PUBLIC	??1LINK@CHtmlToRtf@@QAE@XZ			; CHtmlToRtf::LINK::~LINK
PUBLIC	?wcsstr@@YAPAGPAGPBG@Z				; wcsstr
PUBLIC	??0CONTEXT@CHtmlToRtf@@QAE@XZ			; CHtmlToRtf::CONTEXT::CONTEXT
PUBLIC	??0CONTEXT@CHtmlToRtf@@QAE@ABU01@@Z		; CHtmlToRtf::CONTEXT::CONTEXT
PUBLIC	??4CONTEXT@CHtmlToRtf@@QAEAAU01@ABU01@@Z	; CHtmlToRtf::CONTEXT::operator=
PUBLIC	??1CONTEXT@CHtmlToRtf@@QAE@XZ			; CHtmlToRtf::CONTEXT::~CONTEXT
PUBLIC	?Add@?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAEHULINK@CHtmlToRtf@@@Z ; ATL::CSimpleValArray<CHtmlToRtf::LINK>::Add
PUBLIC	?AddText@CHtmlToRtf@@QAEXAAPAGAAPBG@Z		; CHtmlToRtf::AddText
PUBLIC	?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z	; CHtmlToRtf::GetAttribute
PUBLIC	?GetStyleAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z	; CHtmlToRtf::GetStyleAttribute
PUBLIC	?GetColor@CHtmlToRtf@@QAEHPBG@Z			; CHtmlToRtf::GetColor
PUBLIC	?GetFontFace@CHtmlToRtf@@QAEHPBG@Z		; CHtmlToRtf::GetFontFace
PUBLIC	?GetFontSize@CHtmlToRtf@@QBEHPBG@Z		; CHtmlToRtf::GetFontSize
PUBLIC	?GetInteger@CHtmlToRtf@@QBEHPBG@Z		; CHtmlToRtf::GetInteger
EXTRN	__imp__iswspace:NEAR
EXTRN	__imp__iswalnum:NEAR
EXTRN	__imp__GetDC@4:NEAR
EXTRN	??4CString@@QAEABV0@PBG@Z:NEAR			; CString::operator=
EXTRN	__imp__wcscmp:NEAR
EXTRN	__imp__CharLowerBuffW@8:NEAR
EXTRN	__imp__GetDeviceCaps@8:NEAR
;	COMDAT ??_C@_0BC@FOJF@?$CKpszStart?5?$DN?$DN?5L?8?$DM?8?$AA@
; File D:\_CODE\Shared\..\3rdparty\html2rtf.h
_DATA	SEGMENT
??_C@_0BC@FOJF@?$CKpszStart?5?$DN?$DN?5L?8?$DM?8?$AA@ DB '*pszStart == L'''
	DB	'<''', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BC@HDMA@?$CKpszStart?5?$DN?$DN?5L?8?$DO?8?$AA@
_DATA	SEGMENT
??_C@_0BC@HDMA@?$CKpszStart?5?$DN?$DN?5L?8?$DO?8?$AA@ DB '*pszStart == L'''
	DB	'>''', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_13GDFC@?$AAb?$AA?$AA@
_DATA	SEGMENT
??_C@_13GDFC@?$AAb?$AA?$AA@ DB 'b', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1O@GHPE@?$AAs?$AAt?$AAr?$AAo?$AAn?$AAg?$AA?$AA@
_DATA	SEGMENT
??_C@_1O@GHPE@?$AAs?$AAt?$AAr?$AAo?$AAn?$AAg?$AA?$AA@ DB 's', 00H, 't', 00H
	DB	'r', 00H, 'o', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_19GDBA@?$AA?2?$AAb?$AA1?$AA?5?$AA?$AA@
_DATA	SEGMENT
??_C@_19GDBA@?$AA?2?$AAb?$AA1?$AA?5?$AA?$AA@ DB '\', 00H, 'b', 00H, '1', 00H
	DB	' ', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_13FNM@?$AAi?$AA?$AA@
_DATA	SEGMENT
??_C@_13FNM@?$AAi?$AA?$AA@ DB 'i', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_19GEAD@?$AA?2?$AAi?$AA1?$AA?5?$AA?$AA@
_DATA	SEGMENT
??_C@_19GEAD@?$AA?2?$AAi?$AA1?$AA?5?$AA?$AA@ DB '\', 00H, 'i', 00H, '1', 00H
	DB	' ', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_13PMFJ@?$AAu?$AA?$AA@
_DATA	SEGMENT
??_C@_13PMFJ@?$AAu?$AA?$AA@ DB 'u', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@JMIB@?$AA?2?$AAu?$AAl?$AA1?$AA?5?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@JMIB@?$AA?2?$AAu?$AAl?$AA1?$AA?5?$AA?$AA@ DB '\', 00H, 'u', 00H, 'l'
	DB	00H, '1', 00H, ' ', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_15PIM@?$AAb?$AAr?$AA?$AA@
_DATA	SEGMENT
??_C@_15PIM@?$AAb?$AAr?$AA?$AA@ DB 'b', 00H, 'r', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1O@PKF@?$AA?2?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$AA@
_DATA	SEGMENT
??_C@_1O@PKF@?$AA?2?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$AA@ DB '\', 00H, 'l', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, ' ', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_13OGBF@?$AAp?$AA?$AA@
_DATA	SEGMENT
??_C@_13OGBF@?$AAp?$AA?$AA@ DB 'p', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_19NMIN@?$AA?2?$AAp?$AAa?$AAr?$AA?$AA@
_DATA	SEGMENT
??_C@_19NMIN@?$AA?2?$AAp?$AAa?$AAr?$AA?$AA@ DB '\', 00H, 'p', 00H, 'a', 00H
	DB	'r', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@FOLM@?$AA?2?$AAp?$AAa?$AAr?$AA?5?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@FOLM@?$AA?2?$AAp?$AAa?$AAr?$AA?5?$AA?$AA@ DB '\', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, ' ', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_19DMNK@?$AAb?$AAo?$AAd?$AAy?$AA?$AA@
_DATA	SEGMENT
??_C@_19DMNK@?$AAb?$AAo?$AAd?$AAy?$AA?$AA@ DB 'b', 00H, 'o', 00H, 'd', 00H
	DB	'y', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BA@GFIG@?$AAb?$AAg?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
_DATA	SEGMENT
??_C@_1BA@GFIG@?$AAb?$AAg?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ DB 'b', 00H, 'g'
	DB	00H, 'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BG@NBJG@?$AAl?$AAe?$AAf?$AAt?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@
_DATA	SEGMENT
??_C@_1BG@NBJG@?$AAl?$AAe?$AAf?$AAt?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@ DB 'l'
	DB	00H, 'e', 00H, 'f', 00H, 't', 00H, 'm', 00H, 'a', 00H, 'r', 00H
	DB	'g', 00H, 'i', 00H, 'n', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BI@BCNB@?$AAr?$AAi?$AAg?$AAh?$AAt?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@
_DATA	SEGMENT
??_C@_1BI@BCNB@?$AAr?$AAi?$AAg?$AAh?$AAt?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@ DB 'r'
	DB	00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'm', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BE@EKOC@?$AAt?$AAo?$AAp?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@
_DATA	SEGMENT
??_C@_1BE@EKOC@?$AAt?$AAo?$AAp?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@ DB 't'
	DB	00H, 'o', 00H, 'p', 00H, 'm', 00H, 'a', 00H, 'r', 00H, 'g', 00H
	DB	'i', 00H, 'n', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BK@BDJC@?$AAb?$AAo?$AAt?$AAt?$AAo?$AAm?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@
_DATA	SEGMENT
??_C@_1BK@BDJC@?$AAb?$AAo?$AAt?$AAt?$AAo?$AAm?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@ DB 'b'
	DB	00H, 'o', 00H, 't', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'm', 00H
	DB	'a', 00H, 'r', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BC@KJIA@?$AA?2?$AAm?$AAa?$AAr?$AAg?$AAt?$AA?$CF?$AAd?$AA?$AA@
_DATA	SEGMENT
??_C@_1BC@KJIA@?$AA?2?$AAm?$AAa?$AAr?$AAg?$AAt?$AA?$CF?$AAd?$AA?$AA@ DB '\'
	DB	00H, 'm', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 't', 00H, '%', 00H
	DB	'd', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BC@KHKH@?$AA?2?$AAm?$AAa?$AAr?$AAg?$AAb?$AA?$CF?$AAd?$AA?$AA@
_DATA	SEGMENT
??_C@_1BC@KHKH@?$AA?2?$AAm?$AAa?$AAr?$AAg?$AAb?$AA?$CF?$AAd?$AA?$AA@ DB '\'
	DB	00H, 'm', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'b', 00H, '%', 00H
	DB	'd', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@LDPJ@?$AA?2?$AAl?$AAi?$AA?$CF?$AAd?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@LDPJ@?$AA?2?$AAl?$AAi?$AA?$CF?$AAd?$AA?$AA@ DB '\', 00H, 'l', 00H
	DB	'i', 00H, '%', 00H, 'd', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@IIK@?$AA?2?$AAr?$AAi?$AA?$CF?$AAd?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@IIK@?$AA?2?$AAr?$AAi?$AA?$CF?$AAd?$AA?$AA@ DB '\', 00H, 'r', 00H
	DB	'i', 00H, '%', 00H, 'd', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_19POGD@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
_DATA	SEGMENT
??_C@_19POGD@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@ DB 'f', 00H, 'o', 00H, 'n', 00H
	DB	't', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@NMBO@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@NMBO@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ DB 'c', 00H, 'o', 00H, 'l'
	DB	00H, 'o', 00H, 'r', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_19HEI@?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
_DATA	SEGMENT
??_C@_19HEI@?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_19DPFF@?$AAf?$AAa?$AAc?$AAe?$AA?$AA@
_DATA	SEGMENT
??_C@_19DPFF@?$AAf?$AAa?$AAc?$AAe?$AA?$AA@ DB 'f', 00H, 'a', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_13JFGJ@?$AAa?$AA?$AA@
_DATA	SEGMENT
??_C@_13JFGJ@?$AAa?$AA?$AA@ DB 'a', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_19MKE@?$AAh?$AAr?$AAe?$AAf?$AA?$AA@
_DATA	SEGMENT
??_C@_19MKE@?$AAh?$AAr?$AAe?$AAf?$AA?$AA@ DB 'h', 00H, 'r', 00H, 'e', 00H
	DB	'f', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_19DBLE@?$AAs?$AAp?$AAa?$AAn?$AA?$AA@
_DATA	SEGMENT
??_C@_19DBLE@?$AAs?$AAp?$AAa?$AAn?$AA?$AA@ DB 's', 00H, 'p', 00H, 'a', 00H
	DB	'n', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_17GLBJ@?$AAd?$AAi?$AAv?$AA?$AA@
_DATA	SEGMENT
??_C@_17GLBJ@?$AAd?$AAi?$AAv?$AA?$AA@ DB 'd', 00H, 'i', 00H, 'v', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@CDLF@?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@CDLF@?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?$AA@ DB 'a', 00H, 'l', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1O@DIJA@?$AAc?$AAe?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
_DATA	SEGMENT
??_C@_1O@DIJA@?$AAc?$AAe?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ DB 'c', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_19LCLP@?$AA?2?$AAq?$AAc?$AA?5?$AA?$AA@
_DATA	SEGMENT
??_C@_19LCLP@?$AA?2?$AAq?$AAc?$AA?5?$AA?$AA@ DB '\', 00H, 'q', 00H, 'c', 00H
	DB	' ', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_19EABO@?$AAl?$AAe?$AAf?$AAt?$AA?$AA@
_DATA	SEGMENT
??_C@_19EABO@?$AAl?$AAe?$AAf?$AAt?$AA?$AA@ DB 'l', 00H, 'e', 00H, 'f', 00H
	DB	't', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_19NDGP@?$AA?2?$AAq?$AAl?$AA?5?$AA?$AA@
_DATA	SEGMENT
??_C@_19NDGP@?$AA?2?$AAq?$AAl?$AA?5?$AA?$AA@ DB '\', 00H, 'q', 00H, 'l', 00H
	DB	' ', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@JIED@?$AAr?$AAi?$AAg?$AAh?$AAt?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@JIED@?$AAr?$AAi?$AAg?$AAh?$AAt?$AA?$AA@ DB 'r', 00H, 'i', 00H, 'g'
	DB	00H, 'h', 00H, 't', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_19BAMP@?$AA?2?$AAq?$AAr?$AA?5?$AA?$AA@
_DATA	SEGMENT
??_C@_19BAMP@?$AA?2?$AAq?$AAr?$AA?5?$AA?$AA@ DB '\', 00H, 'q', 00H, 'r', 00H
	DB	' ', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BA@EPCE@?$AAj?$AAu?$AAs?$AAt?$AAi?$AAf?$AAy?$AA?$AA@
_DATA	SEGMENT
??_C@_1BA@EPCE@?$AAj?$AAu?$AAs?$AAt?$AAi?$AAf?$AAy?$AA?$AA@ DB 'j', 00H, 'u'
	DB	00H, 's', 00H, 't', 00H, 'i', 00H, 'f', 00H, 'y', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_19BDLA@?$AA?2?$AAq?$AAj?$AA?5?$AA?$AA@
_DATA	SEGMENT
??_C@_19BDLA@?$AA?2?$AAq?$AAj?$AA?5?$AA?$AA@ DB '\', 00H, 'q', 00H, 'j', 00H
	DB	' ', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1O@BBAK@?$AAn?$AAo?$AAw?$AAr?$AAa?$AAp?$AA?$AA@
_DATA	SEGMENT
??_C@_1O@BBAK@?$AAn?$AAo?$AAw?$AAr?$AAa?$AAp?$AA?$AA@ DB 'n', 00H, 'o', 00H
	DB	'w', 00H, 'r', 00H, 'a', 00H, 'p', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BE@KLEN@?$AA?2?$AAn?$AAo?$AAw?$AAw?$AAr?$AAa?$AAp?$AA?5?$AA?$AA@
_DATA	SEGMENT
??_C@_1BE@KLEN@?$AA?2?$AAn?$AAo?$AAw?$AAw?$AAr?$AAa?$AAp?$AA?5?$AA?$AA@ DB '\'
	DB	00H, 'n', 00H, 'o', 00H, 'w', 00H, 'w', 00H, 'r', 00H, 'a', 00H
	DB	'p', 00H, ' ', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@JCAI@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@JCAI@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@ DB 't', 00H, 'a', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1O@DOCF@?$AAb?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@
_DATA	SEGMENT
??_C@_1O@DOCF@?$AAb?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@ DB 'b', 00H, 'o', 00H
	DB	'r', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BK@BJIG@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@
_DATA	SEGMENT
??_C@_1BK@BJIG@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, 'l', 00H
	DB	'a', 00H, 'y', 00H, 'o', 00H, 'u', 00H, 't', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@MOGP@?$AAf?$AAi?$AAx?$AAe?$AAd?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@MOGP@?$AAf?$AAi?$AAx?$AAe?$AAd?$AA?$AA@ DB 'f', 00H, 'i', 00H, 'x'
	DB	00H, 'e', 00H, 'd', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BP@LEPM@wcscmp?$CIszValue?0?5L?$CCfixed?$CC?$CJ?5?$DN?$DN?50?$AA@
_DATA	SEGMENT
??_C@_0BP@LEPM@wcscmp?$CIszValue?0?5L?$CCfixed?$CC?$CJ?5?$DN?$DN?50?$AA@ DB 'w'
	DB	'cscmp(szValue, L"fixed") == 0', 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1EC@PEBJ@?$AA?2?$AAp?$AAa?$AAr?$AA?2?$AAt?$AAr?$AAo?$AAw?$AAd?$AA?5?$AA?2?$AAt?$AAr?$AAg?$AAa?$AAp?$AAh?$AA1?$AA0@
_DATA	SEGMENT
??_C@_1EC@PEBJ@?$AA?2?$AAp?$AAa?$AAr?$AA?2?$AAt?$AAr?$AAo?$AAw?$AAd?$AA?5?$AA?2?$AAt?$AAr?$AAg?$AAa?$AAp?$AAh?$AA1?$AA0@ DB '\'
	DB	00H, 'p', 00H, 'a', 00H, 'r', 00H, '\', 00H, 't', 00H, 'r', 00H
	DB	'o', 00H, 'w', 00H, 'd', 00H, ' ', 00H, '\', 00H, 't', 00H, 'r'
	DB	00H, 'g', 00H, 'a', 00H, 'p', 00H, 'h', 00H, '1', 00H, '0', 00H
	DB	'8', 00H, '\', 00H, 't', 00H, 'r', 00H, 'l', 00H, 'e', 00H, 'f'
	DB	00H, 't', 00H, '-', 00H, '1', 00H, '0', 00H, '8', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DA@FEHP@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAt?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@
_DATA	SEGMENT
??_C@_1DA@FEHP@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAt?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@ DB '\'
	DB	00H, 't', 00H, 'r', 00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r', 00H
	DB	't', 00H, '\', 00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r', 00H, 's'
	DB	00H, '\', 00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r', 00H, 'w', 00H
	DB	'%', 00H, 'd', 00H, ' ', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DA@CFHL@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAl?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@
_DATA	SEGMENT
??_C@_1DA@CFHL@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAl?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@ DB '\'
	DB	00H, 't', 00H, 'r', 00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r', 00H
	DB	'l', 00H, '\', 00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r', 00H, 's'
	DB	00H, '\', 00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r', 00H, 'w', 00H
	DB	'%', 00H, 'd', 00H, ' ', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DA@OJMG@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAb?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@
_DATA	SEGMENT
??_C@_1DA@OJMG@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAb?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@ DB '\'
	DB	00H, 't', 00H, 'r', 00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r', 00H
	DB	'b', 00H, '\', 00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r', 00H, 's'
	DB	00H, '\', 00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r', 00H, 'w', 00H
	DB	'%', 00H, 'd', 00H, ' ', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1DA@EIDO@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAr?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@
_DATA	SEGMENT
??_C@_1DA@EIDO@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAr?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@ DB '\'
	DB	00H, 't', 00H, 'r', 00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r', 00H
	DB	'r', 00H, '\', 00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r', 00H, 's'
	DB	00H, '\', 00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r', 00H, 'w', 00H
	DB	'%', 00H, 'd', 00H, ' ', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_17HHNM@?$AAc?$AAo?$AAl?$AA?$AA@
_DATA	SEGMENT
??_C@_17HHNM@?$AAc?$AAo?$AAl?$AA?$AA@ DB 'c', 00H, 'o', 00H, 'l', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@NBCC@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@NBCC@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@ DB 'w', 00H, 'i', 00H, 'd'
	DB	00H, 't', 00H, 'h', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_08GMAA@lWidth?$DO0?$AA@
_DATA	SEGMENT
??_C@_08GMAA@lWidth?$DO0?$AA@ DB 'lWidth>0', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1LC@KOAF@?$AA?2?$AAc?$AAl?$AAb?$AAr?$AAd?$AAr?$AAt?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw?$AA1?$AA5?$AA?2?$AAb?$AAr?$AAd@
_DATA	SEGMENT
??_C@_1LC@KOAF@?$AA?2?$AAc?$AAl?$AAb?$AAr?$AAd?$AAr?$AAt?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw?$AA1?$AA5?$AA?2?$AAb?$AAr?$AAd@ DB '\'
	DB	00H, 'c', 00H, 'l', 00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r', 00H
	DB	't', 00H, '\', 00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r', 00H, 'w'
	DB	00H, '1', 00H, '5', 00H, '\', 00H, 'b', 00H, 'r', 00H, 'd', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'c', 00H, 'l', 00H, 'b', 00H, 'r'
	DB	00H, 'd', 00H, 'r', 00H, 'l', 00H, '\', 00H, 'b', 00H, 'r', 00H
	DB	'd', 00H, 'r', 00H, 'w', 00H, '1', 00H, '5', 00H, '\', 00H, 'b'
	DB	00H, 'r', 00H, 'd', 00H, 'r', 00H, 's', 00H, '\', 00H, 'c', 00H
	DB	'l', 00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r', 00H, 'b', 00H, '\'
	DB	00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r', 00H, 'w', 00H, '1', 00H
	DB	'5', 00H, '\', 00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r', 00H, 's'
	DB	00H, '\', 00H, 'c', 00H, 'l', 00H, 'b', 00H, 'r', 00H, 'd', 00H
	DB	'r', 00H, 'r', 00H, '\', 00H, 'b', 00H, 'r', 00H, 'd', 00H, 'r'
	DB	00H, 'w', 00H, '1', 00H, '5', 00H, '\', 00H, 'b', 00H, 'r', 00H
	DB	'd', 00H, 'r', 00H, 's', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BE@NEEH@?$AA?2?$AAc?$AAe?$AAl?$AAl?$AAx?$AA?$CF?$AAl?$AAd?$AA?$AA@
_DATA	SEGMENT
??_C@_1BE@NEEH@?$AA?2?$AAc?$AAe?$AAl?$AAl?$AAx?$AA?$CF?$AAl?$AAd?$AA?$AA@ DB '\'
	DB	00H, 'c', 00H, 'e', 00H, 'l', 00H, 'l', 00H, 'x', 00H, '%', 00H
	DB	'l', 00H, 'd', 00H, 00H, 00H			; `string'
_DATA	ENDS
;	COMDAT ??_C@_15MNAG@?$AAt?$AAr?$AA?$AA@
_DATA	SEGMENT
??_C@_15MNAG@?$AAt?$AAr?$AA?$AA@ DB 't', 00H, 'r', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BA@PKMO@?$AA?2?$AAi?$AAn?$AAt?$AAb?$AAl?$AA?5?$AA?$AA@
_DATA	SEGMENT
??_C@_1BA@PKMO@?$AA?2?$AAi?$AAn?$AAt?$AAb?$AAl?$AA?5?$AA?$AA@ DB '\', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, 'b', 00H, 'l', 00H, ' ', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_15BL@?$AAt?$AAd?$AA?$AA@
_DATA	SEGMENT
??_C@_15BL@?$AAt?$AAd?$AA?$AA@ DB 't', 00H, 'd', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1O@DBMO@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$DN?$AA?$AA@
_DATA	SEGMENT
??_C@_1O@DBMO@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$DN?$AA?$AA@ DB 's', 00H, 't', 00H
	DB	'y', 00H, 'l', 00H, 'e', 00H, '=', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1CC@BFAL@?$AAb?$AAa?$AAc?$AAk?$AAg?$AAr?$AAo?$AAu?$AAn?$AAd?$AA?9?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
_DATA	SEGMENT
??_C@_1CC@BFAL@?$AAb?$AAa?$AAc?$AAk?$AAg?$AAr?$AAo?$AAu?$AAn?$AAd?$AA?9?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ DB 'b'
	DB	00H, 'a', 00H, 'c', 00H, 'k', 00H, 'g', 00H, 'r', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 'd', 00H, '-', 00H, 'c', 00H, 'o', 00H, 'l'
	DB	00H, 'o', 00H, 'r', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_15GCI@?$AA?1?$AAb?$AA?$AA@
_DATA	SEGMENT
??_C@_15GCI@?$AA?1?$AAb?$AA?$AA@ DB '/', 00H, 'b', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BA@GLJN@?$AA?1?$AAs?$AAt?$AAr?$AAo?$AAn?$AAg?$AA?$AA@
_DATA	SEGMENT
??_C@_1BA@GLJN@?$AA?1?$AAs?$AAt?$AAr?$AAo?$AAn?$AAg?$AA?$AA@ DB '/', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'o', 00H, 'n', 00H, 'g', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_19MDDF@?$AA?2?$AAb?$AA0?$AA?5?$AA?$AA@
_DATA	SEGMENT
??_C@_19MDDF@?$AA?2?$AAb?$AA0?$AA?5?$AA?$AA@ DB '\', 00H, 'b', 00H, '0', 00H
	DB	' ', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_15GAKG@?$AA?1?$AAi?$AA?$AA@
_DATA	SEGMENT
??_C@_15GAKG@?$AA?1?$AAi?$AA?$AA@ DB '/', 00H, 'i', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_19MECG@?$AA?2?$AAi?$AA0?$AA?5?$AA?$AA@
_DATA	SEGMENT
??_C@_19MECG@?$AA?2?$AAi?$AA0?$AA?5?$AA?$AA@ DB '\', 00H, 'i', 00H, '0', 00H
	DB	' ', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_15JJCD@?$AA?1?$AAu?$AA?$AA@
_DATA	SEGMENT
??_C@_15JJCD@?$AA?1?$AAu?$AA?$AA@ DB '/', 00H, 'u', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BC@EJLG@?$AA?2?$AAu?$AAl?$AAn?$AAo?$AAn?$AAe?$AA?5?$AA?$AA@
_DATA	SEGMENT
??_C@_1BC@EJLG@?$AA?2?$AAu?$AAl?$AAn?$AAo?$AAn?$AAe?$AA?5?$AA?$AA@ DB '\', 00H
	DB	'u', 00H, 'l', 00H, 'n', 00H, 'o', 00H, 'n', 00H, 'e', 00H, ' '
	DB	00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_17KCPH@?$AA?1?$AAt?$AAr?$AA?$AA@
_DATA	SEGMENT
??_C@_17KCPH@?$AA?1?$AAt?$AAr?$AA?$AA@ DB '/', 00H, 't', 00H, 'r', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@GJEM@?$AA?2?$AAr?$AAo?$AAw?$AA?5?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@GJEM@?$AA?2?$AAr?$AAo?$AAw?$AA?5?$AA?$AA@ DB '\', 00H, 'r', 00H, 'o'
	DB	00H, 'w', 00H, ' ', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_17GPOK@?$AA?1?$AAt?$AAd?$AA?$AA@
_DATA	SEGMENT
??_C@_17GPOK@?$AA?1?$AAt?$AAd?$AA?$AA@ DB '/', 00H, 't', 00H, 'd', 00H, 00H
	DB	00H						; `string'
_DATA	ENDS
;	COMDAT ??_C@_1O@CJDB@?$AA?2?$AAc?$AAe?$AAl?$AAl?$AA?5?$AA?$AA@
_DATA	SEGMENT
??_C@_1O@CJDB@?$AA?2?$AAc?$AAe?$AAl?$AAl?$AA?5?$AA?$AA@ DB '\', 00H, 'c', 00H
	DB	'e', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@KMPD@?$AA?1?$AAb?$AAo?$AAd?$AAy?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@KMPD@?$AA?1?$AAb?$AAo?$AAd?$AAy?$AA?$AA@ DB '/', 00H, 'b', 00H, 'o'
	DB	00H, 'd', 00H, 'y', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@GOEK@?$AA?1?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@GOEK@?$AA?1?$AAf?$AAo?$AAn?$AAt?$AA?$AA@ DB '/', 00H, 'f', 00H, 'o'
	DB	00H, 'n', 00H, 't', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_15PABD@?$AA?1?$AAa?$AA?$AA@
_DATA	SEGMENT
??_C@_15PABD@?$AA?1?$AAa?$AA?$AA@ DB '/', 00H, 'a', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@KBJN@?$AA?1?$AAs?$AAp?$AAa?$AAn?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@KBJN@?$AA?1?$AAs?$AAp?$AAa?$AAn?$AA?$AA@ DB '/', 00H, 's', 00H, 'p'
	DB	00H, 'a', 00H, 'n', 00H, 00H, 00H		; `string'
_DATA	ENDS
;	COMDAT ??_C@_19HPKF@?$AA?1?$AAd?$AAi?$AAv?$AA?$AA@
_DATA	SEGMENT
??_C@_19HPKF@?$AA?1?$AAd?$AAi?$AAv?$AA?$AA@ DB '/', 00H, 'd', 00H, 'i', 00H
	DB	'v', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_1O@ICNL@?$AA?1?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@
_DATA	SEGMENT
??_C@_1O@ICNL@?$AA?1?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@ DB '/', 00H, 't', 00H
	DB	'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_13IAJL@?$AA?$HL?$AA?$AA@
_DATA	SEGMENT
??_C@_13IAJL@?$AA?$HL?$AA?$AA@ DB '{', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0BG@MFAG@aContexts?4GetSize?$CI?$CJ?$DO0?$AA@
_DATA	SEGMENT
??_C@_0BG@MFAG@aContexts?4GetSize?$CI?$CJ?$DO0?$AA@ DB 'aContexts.GetSize'
	DB	'()>0', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_17GLOK@?$AA?$HN?$AA?$AN?$AA?6?$AA?$AA@
_DATA	SEGMENT
??_C@_17GLOK@?$AA?$HN?$AA?$AN?$AA?6?$AA?$AA@ DB '}', 00H, 0dH, 00H, 0aH, 00H
	DB	00H, 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_1M@FDAF@?$AA?2?$AAc?$AAf?$AA?$CF?$AAd?$AA?$AA@
_DATA	SEGMENT
??_C@_1M@FDAF@?$AA?2?$AAc?$AAf?$AA?$CF?$AAd?$AA?$AA@ DB '\', 00H, 'c', 00H
	DB	'f', 00H, '%', 00H, 'd', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BK@KEAH@?$AA?2?$AAh?$AAi?$AAg?$AAh?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?$CF?$AAd?$AA?$AA@
_DATA	SEGMENT
??_C@_1BK@KEAH@?$AA?2?$AAh?$AAi?$AAg?$AAh?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?$CF?$AAd?$AA?$AA@ DB '\'
	DB	00H, 'h', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 'l', 00H, 'i', 00H
	DB	'g', 00H, 'h', 00H, 't', 00H, '%', 00H, 'd', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_19JGHG@?$AA?2?$AAf?$AA?$CF?$AAd?$AA?$AA@
_DATA	SEGMENT
??_C@_19JGHG@?$AA?2?$AAf?$AA?$CF?$AAd?$AA?$AA@ DB '\', 00H, 'f', 00H, '%', 00H
	DB	'd', 00H, 00H, 00H				; `string'
_DATA	ENDS
;	COMDAT ??_C@_13ECNF@?$AA?5?$AA?$AA@
_DATA	SEGMENT
??_C@_13ECNF@?$AA?5?$AA?$AA@ DB ' ', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T83271	DD	019930520H
	DD	04H
	DD	FLAT:$T83273
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T83273	DD	0ffffffffH
	DD	FLAT:$L83265
	DD	00H
	DD	FLAT:$L83266
	DD	01H
	DD	FLAT:$L83267
	DD	02H
	DD	FLAT:$L83268
xdata$x	ENDS
;	COMDAT ?Parse@CHtmlToRtf@@QAE_NPBGAAPAG@Z
_TEXT	SEGMENT
_this$ = -2968
_aContexts$ = -2392
_Context$ = -2380
_nCellPos$ = -2336
_lTwipFactor$ = -272
_Link$ = -2332
_szAppendScope$ = -2320
_szValue$ = -268
_szTag$81015 = -2716
_pszTag$81016 = -2408
_szTagName$81025 = -2748
_pszTagName$81026 = -2460
_OldContext$81034 = -2456
_pszAppendScope$81035 = -2404
_bNewContext$81036 = -2412
_bRestoreContext$81037 = -2396
_bHadEndLine$81038 = -2400
_lBorder$81124 = -2752
_lWidth$81143 = -2756
$T83259 = -2856
_lLast$81211 = -2760
$T83260 = -2948
$T83261 = -2952
$T83262 = -2956
$T83263 = -2960
$T83264 = -2964
__$EHRec$ = -12
_bChanged$81222 = -2764
_pszStart$ = 8
_pstrDest$ = 12
?Parse@CHtmlToRtf@@QAE_NPBGAAPAG@Z PROC NEAR		; CHtmlToRtf::Parse, COMDAT

; 147  : 	{ 

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L83272
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 2960				; 00000b90H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-2972]
	mov	ecx, 740				; 000002e4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 148  : 		// This method builds the RTF document based on the input HTML. 
; 149  : 		// A lot of it is basic conversion, but a few tags require special 
; 150  : 		// attention. We also keep track of the assumed character-position while 
; 151  : 		// generating the RTF. This is particular difficult since this is specific 
; 152  : 		// to the Microsoft RTF-specification implementation. We need to do this 
; 153  : 		// because we later on must change the text formatting of links (anchor tags). 
; 154  : 		CSimpleArray<CONTEXT> aContexts; 

	lea	ecx, DWORD PTR _aContexts$[ebp]
	call	??0?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@XZ ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::CSimpleArray<CHtmlToRtf::CONTEXT>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 155  : 		CONTEXT Context; 

	lea	ecx, DWORD PTR _Context$[ebp]
	call	??0CONTEXT@CHtmlToRtf@@QAE@XZ		; CHtmlToRtf::CONTEXT::CONTEXT
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 156  : 		
; 157  : 		Context.sFaceName = m_aFonts[0].lfFaceName; 

	push	0
	lea	eax, DWORD PTR $T83259[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QBE?AUtagLOGFONTW@@H@Z ; ATL::CSimpleValArray<tagLOGFONTW>::operator[]
	add	eax, 28					; 0000001cH
	push	eax
	lea	ecx, DWORD PTR _Context$[ebp]
	call	??4CString@@QAEABV0@PBG@Z		; CString::operator=

; 158  : 		Context.lFontSize = GetFontSize(m_aFonts[0].lfHeight); 

	push	0
	lea	ecx, DWORD PTR $T83260[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QBE?AUtagLOGFONTW@@H@Z ; ATL::CSimpleValArray<tagLOGFONTW>::operator[]
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFontSize@CHtmlToRtf@@QBEHH@Z	; CHtmlToRtf::GetFontSize
	mov	DWORD PTR _Context$[ebp+4], eax

; 159  : 		Context.lTextColor = 0; 

	mov	DWORD PTR _Context$[ebp+8], 0

; 160  : 		Context.lBackColor = 1; 

	mov	DWORD PTR _Context$[ebp+12], 1

; 161  : 		Context.lLeftIndent = Context.lRightIndent = Context.lTopIndent = Context.lBottomIndent = 0; 

	mov	DWORD PTR _Context$[ebp+40], 0
	mov	eax, DWORD PTR _Context$[ebp+40]
	mov	DWORD PTR _Context$[ebp+36], eax
	mov	ecx, DWORD PTR _Context$[ebp+36]
	mov	DWORD PTR _Context$[ebp+32], ecx
	mov	edx, DWORD PTR _Context$[ebp+32]
	mov	DWORD PTR _Context$[ebp+28], edx

; 162  : 		
; 163  : 		int nCellPos = 0; 

	mov	DWORD PTR _nCellPos$[ebp], 0

; 164  : 		long lTwipFactor = (1L * 1440L) / ::GetDeviceCaps(::GetDC(NULL), LOGPIXELSX); 

	mov	esi, esp
	push	88					; 00000058H
	mov	edi, esp
	push	0
	call	DWORD PTR __imp__GetDC@4
	cmp	edi, esp
	call	__chkesp
	push	eax
	call	DWORD PTR __imp__GetDeviceCaps@8
	cmp	esi, esp
	call	__chkesp
	mov	ecx, eax
	mov	eax, 1440				; 000005a0H
	cdq
	idiv	ecx
	mov	DWORD PTR _lTwipFactor$[ebp], eax

; 165  : 		m_bEndLine = false; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+48], 0

; 166  : 		m_bWasSpace = true; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+49], 1

; 167  : 		m_nCharPos = 0; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], 0

; 168  : 
; 169  : 		//LPCTSTR szOrgStart = pszStart;
; 170  : 		
; 171  : 		LINK Link; 

	lea	ecx, DWORD PTR _Link$[ebp]
	call	??0LINK@CHtmlToRtf@@QAE@XZ		; CHtmlToRtf::LINK::LINK
	mov	BYTE PTR __$EHRec$[ebp+8], 2
$L81006:

; 172  : 		TCHAR szAppendScope[1024];             // Attribute string currently being built 
; 173  : 		TCHAR szValue[128];                    // Tag value buffer 
; 174  : 		
; 175  : 		while(*pszStart) { 

	mov	edx, DWORD PTR _pszStart$[ebp]
	xor	eax, eax
	mov	ax, WORD PTR [edx]
	test	eax, eax
	je	$L81007

; 176  : 			// Add text before next tag 
; 177  : 			AddText(pstrDest, pszStart); 

	lea	ecx, DWORD PTR _pszStart$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pstrDest$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddText@CHtmlToRtf@@QAEXAAPAGAAPBG@Z	; CHtmlToRtf::AddText

; 178  : 			if (*pszStart == _T('\0')) return true; // No more tags present?! 

	mov	eax, DWORD PTR _pszStart$[ebp]
	xor	ecx, ecx
	mov	cx, WORD PTR [eax]
	test	ecx, ecx
	jne	SHORT $L81008
	mov	BYTE PTR $T83261[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _Link$[ebp]
	call	??1LINK@CHtmlToRtf@@QAE@XZ		; CHtmlToRtf::LINK::~LINK
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Context$[ebp]
	call	??1CONTEXT@CHtmlToRtf@@QAE@XZ		; CHtmlToRtf::CONTEXT::~CONTEXT
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _aContexts$[ebp]
	call	??1?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@XZ ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::~CSimpleArray<CHtmlToRtf::CONTEXT>
	mov	al, BYTE PTR $T83261[ebp]
	jmp	$L80946
$L81008:

; 179  : 			ATLASSERT(*pszStart == _T('<')); 

	mov	edx, DWORD PTR _pszStart$[ebp]
	xor	eax, eax
	mov	ax, WORD PTR [edx]
	cmp	eax, 60					; 0000003cH
	je	SHORT $L81013
	mov	esi, esp
	push	OFFSET FLAT:??_C@_0BC@FOJF@?$CKpszStart?5?$DN?$DN?5L?8?$DM?8?$AA@ ; `string'
	push	0
	push	179					; 000000b3H
	push	OFFSET FLAT:??_C@_0CH@OGBG@D?3?2_CODE?2Shared?2?4?4?23rdparty?2html@ ; `string'
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__chkesp
	cmp	eax, 1
	jne	SHORT $L81013
	int	3
$L81013:
	xor	ecx, ecx
	test	ecx, ecx
	jne	SHORT $L81008

; 180  : 			pszStart++; 

	mov	edx, DWORD PTR _pszStart$[ebp]
	add	edx, 2
	mov	DWORD PTR _pszStart$[ebp], edx

; 181  : 			
; 182  : 			// Extract the complete start-tag 
; 183  : 			TCHAR szTag[128]; 
; 184  : 			LPTSTR pszTag = szTag; 

	lea	eax, DWORD PTR _szTag$81015[ebp]
	mov	DWORD PTR _pszTag$81016[ebp], eax
$L81018:

; 185  : 			while(*pszStart && *pszStart!=_T('>')) *pszTag++ = *pszStart++; 

	mov	ecx, DWORD PTR _pszStart$[ebp]
	xor	edx, edx
	mov	dx, WORD PTR [ecx]
	test	edx, edx
	je	SHORT $L81019
	mov	eax, DWORD PTR _pszStart$[ebp]
	xor	ecx, ecx
	mov	cx, WORD PTR [eax]
	cmp	ecx, 62					; 0000003eH
	je	SHORT $L81019
	mov	edx, DWORD PTR _pszTag$81016[ebp]
	mov	eax, DWORD PTR _pszStart$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR [edx], cx
	mov	edx, DWORD PTR _pszTag$81016[ebp]
	add	edx, 2
	mov	DWORD PTR _pszTag$81016[ebp], edx
	mov	eax, DWORD PTR _pszStart$[ebp]
	add	eax, 2
	mov	DWORD PTR _pszStart$[ebp], eax
	jmp	SHORT $L81018
$L81019:

; 186  : 			ATLASSERT(*pszStart == _T('>')); 

	mov	ecx, DWORD PTR _pszStart$[ebp]
	xor	edx, edx
	mov	dx, WORD PTR [ecx]
	cmp	edx, 62					; 0000003eH
	je	SHORT $L81023
	mov	esi, esp
	push	OFFSET FLAT:??_C@_0BC@HDMA@?$CKpszStart?5?$DN?$DN?5L?8?$DO?8?$AA@ ; `string'
	push	0
	push	186					; 000000baH
	push	OFFSET FLAT:??_C@_0CH@OGBG@D?3?2_CODE?2Shared?2?4?4?23rdparty?2html@ ; `string'
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__chkesp
	cmp	eax, 1
	jne	SHORT $L81023
	int	3
$L81023:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $L81019

; 187  : 			*pszTag = _T('\0'); 

	mov	ecx, DWORD PTR _pszTag$81016[ebp]
	mov	WORD PTR [ecx], 0

; 188  : 			pszStart++; 

	mov	edx, DWORD PTR _pszStart$[ebp]
	add	edx, 2
	mov	DWORD PTR _pszStart$[ebp], edx

; 189  : 			::CharLowerBuff(szTag, _tcslen(szTag)); 

	mov	esi, esp
	lea	eax, DWORD PTR _szTag$81015[ebp]
	push	eax
	call	DWORD PTR __imp__wcslen
	add	esp, 4
	cmp	esi, esp
	call	__chkesp
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _szTag$81015[ebp]
	push	ecx
	call	DWORD PTR __imp__CharLowerBuffW@8
	cmp	esi, esp
	call	__chkesp

; 190  : 			
; 191  : 			// Extract the tag-name 
; 192  : 			TCHAR szTagName[16]; 
; 193  : 			LPTSTR pszTagName = szTagName; 

	lea	edx, DWORD PTR _szTagName$81025[ebp]
	mov	DWORD PTR _pszTagName$81026[ebp], edx

; 194  : 			pszTag = szTag; 

	lea	eax, DWORD PTR _szTag$81015[ebp]
	mov	DWORD PTR _pszTag$81016[ebp], eax
$L81028:

; 195  : 			while(*pszTag && (*pszTag == _T('/') || _istalnum(*pszTag))) *pszTagName++ = *pszTag++; 

	mov	ecx, DWORD PTR _pszTag$81016[ebp]
	xor	edx, edx
	mov	dx, WORD PTR [ecx]
	test	edx, edx
	je	SHORT $L81029
	mov	eax, DWORD PTR _pszTag$81016[ebp]
	xor	ecx, ecx
	mov	cx, WORD PTR [eax]
	cmp	ecx, 47					; 0000002fH
	je	SHORT $L81030
	mov	esi, esp
	mov	edx, DWORD PTR _pszTag$81016[ebp]
	mov	ax, WORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__iswalnum
	add	esp, 4
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	je	SHORT $L81029
$L81030:
	mov	ecx, DWORD PTR _pszTagName$81026[ebp]
	mov	edx, DWORD PTR _pszTag$81016[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ecx, DWORD PTR _pszTagName$81026[ebp]
	add	ecx, 2
	mov	DWORD PTR _pszTagName$81026[ebp], ecx
	mov	edx, DWORD PTR _pszTag$81016[ebp]
	add	edx, 2
	mov	DWORD PTR _pszTag$81016[ebp], edx
	jmp	SHORT $L81028
$L81029:

; 196  : 			*pszTagName = _T('\0'); 

	mov	eax, DWORD PTR _pszTagName$81026[ebp]
	mov	WORD PTR [eax], 0

; 197  : 			
; 198  : 			// Tag attributes starts where tag-name ends 
; 199  : 			pszTag = szTag + _tcslen(szTagName); 

	mov	esi, esp
	lea	ecx, DWORD PTR _szTagName$81025[ebp]
	push	ecx
	call	DWORD PTR __imp__wcslen
	add	esp, 4
	cmp	esi, esp
	call	__chkesp
	lea	edx, DWORD PTR _szTag$81015[ebp+eax*2]
	mov	DWORD PTR _pszTag$81016[ebp], edx
$L81032:

; 200  : 			while(_istspace(*pszTag)) *pszTag++; 

	mov	esi, esp
	mov	eax, DWORD PTR _pszTag$81016[ebp]
	mov	cx, WORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__iswspace
	add	esp, 4
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	je	SHORT $L81033
	mov	edx, DWORD PTR _pszTag$81016[ebp]
	add	edx, 2
	mov	DWORD PTR _pszTag$81016[ebp], edx
	jmp	SHORT $L81032
$L81033:

; 201  : 			
; 202  : 			// Parse tag... 
; 203  : 			CONTEXT OldContext = Context;          // Store old context (for comparison later) 

	lea	eax, DWORD PTR _Context$[ebp]
	push	eax
	lea	ecx, DWORD PTR _OldContext$81034[ebp]
	call	??0CONTEXT@CHtmlToRtf@@QAE@ABU01@@Z	; CHtmlToRtf::CONTEXT::CONTEXT
	mov	BYTE PTR __$EHRec$[ebp+8], 3

; 204  : 			LPTSTR pszAppendScope = szAppendScope; 

	lea	ecx, DWORD PTR _szAppendScope$[ebp]
	mov	DWORD PTR _pszAppendScope$81035[ebp], ecx

; 205  : 			bool bNewContext = false;              // New Scope defined? 

	mov	BYTE PTR _bNewContext$81036[ebp], 0

; 206  : 			bool bRestoreContext = false;          // Closed scope? 

	mov	BYTE PTR _bRestoreContext$81037[ebp], 0

; 207  : 			bool bHadEndLine = m_bEndLine;         // Keep track of EOF for space trimming. 

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+48]
	mov	BYTE PTR _bHadEndLine$81038[ebp], al

; 208  : 			m_bEndLine = false; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+48], 0

; 209  : 			
; 210  : 			if (szTagName[0]!=_T('/')) { 

	mov	edx, DWORD PTR _szTagName$81025[ebp]
	and	edx, 65535				; 0000ffffH
	cmp	edx, 47					; 0000002fH
	je	$L81039

; 211  : 				// 
; 212  : 				// Open tags 
; 213  : 				// 
; 214  : 				if (_tcscmp(szTagName, _T("b")) == 0 || _tcscmp(szTagName, _T("strong")) == 0) { 

	mov	esi, esp
	push	OFFSET FLAT:??_C@_13GDFC@?$AAb?$AA?$AA@	; `string'
	lea	eax, DWORD PTR _szTagName$81025[ebp]
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	je	SHORT $L81041
	mov	esi, esp
	push	OFFSET FLAT:??_C@_1O@GHPE@?$AAs?$AAt?$AAr?$AAo?$AAn?$AAg?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _szTagName$81025[ebp]
	push	ecx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81040
$L81041:

; 215  : 					AddOutput(pszAppendScope, _T("\\b1 ")); 

	push	OFFSET FLAT:??_C@_19GDBA@?$AA?2?$AAb?$AA1?$AA?5?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _pszAppendScope$81035[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 217  : 				else if (_tcscmp(szTagName, _T("i")) == 0) { 

	jmp	$L81158
$L81040:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_13FNM@?$AAi?$AA?$AA@	; `string'
	lea	eax, DWORD PTR _szTagName$81025[ebp]
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81046

; 218  : 					AddOutput(pszAppendScope, _T("\\i1 ")); 

	push	OFFSET FLAT:??_C@_19GEAD@?$AA?2?$AAi?$AA1?$AA?5?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _pszAppendScope$81035[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 220  : 				else if (_tcscmp(szTagName, _T("u")) == 0) { 

	jmp	$L81158
$L81046:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_13PMFJ@?$AAu?$AA?$AA@	; `string'
	lea	edx, DWORD PTR _szTagName$81025[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81050

; 221  : 					AddOutput(pszAppendScope, _T("\\ul1 ")); 

	push	OFFSET FLAT:??_C@_1M@JMIB@?$AA?2?$AAu?$AAl?$AA1?$AA?5?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _pszAppendScope$81035[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 223  : 				else if (_tcscmp(szTagName, _T("br")) == 0) { 

	jmp	$L81158
$L81050:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_15PIM@?$AAb?$AAr?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _szTagName$81025[ebp]
	push	ecx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81054

; 224  : 					AddOutput(pszAppendScope, _T("\\line ")); 

	push	OFFSET FLAT:??_C@_1O@PKF@?$AA?2?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _pszAppendScope$81035[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 225  : 					m_nCharPos++; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], ecx

; 226  : 					m_bEndLine = true; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+48], 1

; 227  : 					m_bWasSpace = true; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+49], 1

; 229  : 				else if (_tcscmp(szTagName, _T("p")) == 0) { 

	jmp	$L81158
$L81054:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_13OGBF@?$AAp?$AA?$AA@	; `string'
	lea	edx, DWORD PTR _szTagName$81025[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	$L81058

; 230  : 					if (!bHadEndLine) { 

	mov	eax, DWORD PTR _bHadEndLine$81038[ebp]
	and	eax, 255				; 000000ffH
	test	eax, eax
	jne	SHORT $L81060

; 231  : 						AddOutput(pszAppendScope, _T("\\par")); 

	push	OFFSET FLAT:??_C@_19NMIN@?$AA?2?$AAp?$AAa?$AAr?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _pszAppendScope$81035[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 232  : 						m_nCharPos++; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], eax
$L81060:

; 234  : 					AddOutput(pszAppendScope, _T("\\par ")); 

	push	OFFSET FLAT:??_C@_1M@FOLM@?$AA?2?$AAp?$AAa?$AAr?$AA?5?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _pszAppendScope$81035[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 235  : 					m_nCharPos++; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], ecx

; 236  : 					m_bEndLine = true; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+48], 1

; 237  : 					m_bWasSpace = true; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+49], 1

; 239  : 				else if (_tcscmp(szTagName, _T("body")) == 0) { 

	jmp	$L81158
$L81058:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_19DMNK@?$AAb?$AAo?$AAd?$AAy?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _szTagName$81025[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	$L81064

; 240  : 					if (GetAttribute(pszTag, _T("bgcolor"), szValue)) { 

	lea	eax, DWORD PTR _szValue$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_1BA@GFIG@?$AAb?$AAg?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ ; `string'
	mov	ecx, DWORD PTR _pszTag$81016[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ; CHtmlToRtf::GetAttribute
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L81066

; 241  : 						Context.lBackColor = GetColor(szValue); 

	lea	edx, DWORD PTR _szValue$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetColor@CHtmlToRtf@@QAEHPBG@Z		; CHtmlToRtf::GetColor
	mov	DWORD PTR _Context$[ebp+12], eax

; 242  : 						// Assign this color to the control's background 
; 243  : 						m_clrBack = m_aColors[Context.lBackColor]; 

	mov	eax, DWORD PTR _Context$[ebp+12]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CSimpleValArray@K@ATL@@QBEKH@Z	; ATL::CSimpleValArray<unsigned long>::operator[]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], eax
$L81066:

; 246  : 						Context.lRightIndent = 
; 247  : 						Context.lTopIndent =  
; 248  : 						Context.lBottomIndent = 8; 

	mov	DWORD PTR _Context$[ebp+40], 8
	mov	edx, DWORD PTR _Context$[ebp+40]
	mov	DWORD PTR _Context$[ebp+36], edx
	mov	eax, DWORD PTR _Context$[ebp+36]
	mov	DWORD PTR _Context$[ebp+32], eax
	mov	ecx, DWORD PTR _Context$[ebp+32]
	mov	DWORD PTR _Context$[ebp+28], ecx

; 249  : 					if (GetAttribute(pszTag, _T("leftmargin"), szValue)) { 

	lea	edx, DWORD PTR _szValue$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_1BG@NBJG@?$AAl?$AAe?$AAf?$AAt?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@ ; `string'
	mov	eax, DWORD PTR _pszTag$81016[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ; CHtmlToRtf::GetAttribute
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L81068

; 250  : 						Context.lLeftIndent = GetInteger(szValue); 

	lea	ecx, DWORD PTR _szValue$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInteger@CHtmlToRtf@@QBEHPBG@Z	; CHtmlToRtf::GetInteger
	mov	DWORD PTR _Context$[ebp+28], eax
$L81068:

; 252  : 					if (GetAttribute(pszTag, _T("rightmargin"), szValue)) { 

	lea	edx, DWORD PTR _szValue$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_1BI@BCNB@?$AAr?$AAi?$AAg?$AAh?$AAt?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@ ; `string'
	mov	eax, DWORD PTR _pszTag$81016[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ; CHtmlToRtf::GetAttribute
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L81070

; 253  : 						Context.lRightIndent = GetInteger(szValue); 

	lea	ecx, DWORD PTR _szValue$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInteger@CHtmlToRtf@@QBEHPBG@Z	; CHtmlToRtf::GetInteger
	mov	DWORD PTR _Context$[ebp+32], eax
$L81070:

; 255  : 					if (GetAttribute(pszTag, _T("topmargin"), szValue)) { 

	lea	edx, DWORD PTR _szValue$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_1BE@EKOC@?$AAt?$AAo?$AAp?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@ ; `string'
	mov	eax, DWORD PTR _pszTag$81016[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ; CHtmlToRtf::GetAttribute
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L81072

; 256  : 						Context.lTopIndent = GetInteger(szValue); 

	lea	ecx, DWORD PTR _szValue$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInteger@CHtmlToRtf@@QBEHPBG@Z	; CHtmlToRtf::GetInteger
	mov	DWORD PTR _Context$[ebp+36], eax
$L81072:

; 258  : 					if (GetAttribute(pszTag, _T("bottommargin"), szValue)) { 

	lea	edx, DWORD PTR _szValue$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_1BK@BDJC@?$AAb?$AAo?$AAt?$AAt?$AAo?$AAm?$AAm?$AAa?$AAr?$AAg?$AAi?$AAn?$AA?$AA@ ; `string'
	mov	eax, DWORD PTR _pszTag$81016[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ; CHtmlToRtf::GetAttribute
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L81074

; 259  : 						Context.lBottomIndent = GetInteger(szValue); 

	lea	ecx, DWORD PTR _szValue$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInteger@CHtmlToRtf@@QBEHPBG@Z	; CHtmlToRtf::GetInteger
	mov	DWORD PTR _Context$[ebp+40], eax
$L81074:

; 261  : 					AddOutputV(pszAppendScope, _T("\\margt%d"), Context.lTopIndent * lTwipFactor); 

	mov	edx, DWORD PTR _Context$[ebp+36]
	imul	edx, DWORD PTR _lTwipFactor$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_1BC@KJIA@?$AA?2?$AAm?$AAa?$AAr?$AAg?$AAt?$AA?$CF?$AAd?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _pszAppendScope$81035[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ	; CHtmlToRtf::AddOutputV
	add	esp, 16					; 00000010H

; 262  : 					AddOutputV(pszAppendScope, _T("\\margb%d"), Context.lBottomIndent * lTwipFactor); 

	mov	edx, DWORD PTR _Context$[ebp+40]
	imul	edx, DWORD PTR _lTwipFactor$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_1BC@KHKH@?$AA?2?$AAm?$AAa?$AAr?$AAg?$AAb?$AA?$CF?$AAd?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _pszAppendScope$81035[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ	; CHtmlToRtf::AddOutputV
	add	esp, 16					; 00000010H

; 263  : 					AddOutputV(pszAppendScope, _T("\\li%d"), Context.lLeftIndent * lTwipFactor); 

	mov	edx, DWORD PTR _Context$[ebp+28]
	imul	edx, DWORD PTR _lTwipFactor$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_1M@LDPJ@?$AA?2?$AAl?$AAi?$AA?$CF?$AAd?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _pszAppendScope$81035[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ	; CHtmlToRtf::AddOutputV
	add	esp, 16					; 00000010H

; 264  : 					AddOutputV(pszAppendScope, _T("\\ri%d"), Context.lRightIndent * lTwipFactor); 

	mov	edx, DWORD PTR _Context$[ebp+32]
	imul	edx, DWORD PTR _lTwipFactor$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_1M@IIK@?$AA?2?$AAr?$AAi?$AA?$CF?$AAd?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _pszAppendScope$81035[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ	; CHtmlToRtf::AddOutputV
	add	esp, 16					; 00000010H

; 265  : 					bNewContext = true; 

	mov	BYTE PTR _bNewContext$81036[ebp], 1

; 267  : 				else if (_tcscmp(szTagName, _T("font")) == 0) { 

	jmp	$L81158
$L81064:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_19POGD@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _szTagName$81025[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	$L81081

; 268  : 					if (GetAttribute(pszTag, _T("color"), szValue)) { 

	lea	eax, DWORD PTR _szValue$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_1M@NMBO@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ ; `string'
	mov	ecx, DWORD PTR _pszTag$81016[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ; CHtmlToRtf::GetAttribute
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L81083

; 269  : 						Context.lTextColor = GetColor(szValue); 

	lea	edx, DWORD PTR _szValue$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetColor@CHtmlToRtf@@QAEHPBG@Z		; CHtmlToRtf::GetColor
	mov	DWORD PTR _Context$[ebp+8], eax
$L81083:

; 271  : 					if (GetAttribute(pszTag, _T("size"), szValue)) { 

	lea	eax, DWORD PTR _szValue$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_19HEI@?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
	mov	ecx, DWORD PTR _pszTag$81016[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ; CHtmlToRtf::GetAttribute
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L81085

; 272  : 						Context.lFontSize = GetFontSize(szValue); 

	lea	edx, DWORD PTR _szValue$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFontSize@CHtmlToRtf@@QBEHPBG@Z	; CHtmlToRtf::GetFontSize
	mov	DWORD PTR _Context$[ebp+4], eax
$L81085:

; 274  : 					if (GetAttribute(pszTag, _T("face"), szValue)) { 

	lea	eax, DWORD PTR _szValue$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_19DPFF@?$AAf?$AAa?$AAc?$AAe?$AA?$AA@ ; `string'
	mov	ecx, DWORD PTR _pszTag$81016[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ; CHtmlToRtf::GetAttribute
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L81087

; 275  : 						Context.sFaceName = szValue; 

	lea	edx, DWORD PTR _szValue$[ebp]
	push	edx
	lea	ecx, DWORD PTR _Context$[ebp]
	call	??4CString@@QAEABV0@PBG@Z		; CString::operator=
$L81087:

; 277  : 					bNewContext = true; 

	mov	BYTE PTR _bNewContext$81036[ebp], 1

; 279  : 				else if (_tcscmp(szTagName, _T("a")) == 0) { 

	jmp	$L81158
$L81081:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_13JFGJ@?$AAa?$AA?$AA@	; `string'
	lea	eax, DWORD PTR _szTagName$81025[ebp]
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81090

; 280  : 					if (GetAttribute(pszTag, _T("href"), szValue)) { 

	lea	ecx, DWORD PTR _szValue$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_19MKE@?$AAh?$AAr?$AAe?$AAf?$AA?$AA@ ; `string'
	mov	edx, DWORD PTR _pszTag$81016[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ; CHtmlToRtf::GetAttribute
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L81092

; 281  : 						// Add the actual URL as a hidden test 
; 282  : 						Link.nStart = m_nCharPos; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _Link$[ebp+4], ecx

; 283  : 						Link.sURL = szValue; 

	lea	edx, DWORD PTR _szValue$[ebp]
	push	edx
	lea	ecx, DWORD PTR _Link$[ebp]
	call	??4CString@@QAEABV0@PBG@Z		; CString::operator=
$L81092:

; 285  : 					bNewContext = true; 

	mov	BYTE PTR _bNewContext$81036[ebp], 1

; 287  : 				else if (_tcscmp(szTagName, _T("span")) == 0) { 

	jmp	$L81158
$L81090:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_19DBLE@?$AAs?$AAp?$AAa?$AAn?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _szTagName$81025[ebp]
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81095

; 288  : 					bNewContext = true; 

	mov	BYTE PTR _bNewContext$81036[ebp], 1

; 290  : 				else if (_tcscmp(szTagName, _T("div")) == 0) { 

	jmp	$L81158
$L81095:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_17GLBJ@?$AAd?$AAi?$AAv?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _szTagName$81025[ebp]
	push	ecx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	$L81098

; 291  : 					if (!bHadEndLine) { 

	mov	edx, DWORD PTR _bHadEndLine$81038[ebp]
	and	edx, 255				; 000000ffH
	test	edx, edx
	jne	SHORT $L81100

; 292  : 						AddOutput(pszAppendScope, _T("\\par ")); 

	push	OFFSET FLAT:??_C@_1M@FOLM@?$AA?2?$AAp?$AAa?$AAr?$AA?5?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _pszAppendScope$81035[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 293  : 						m_nCharPos++; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], edx

; 294  : 						m_bEndLine = true; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+48], 1

; 295  : 						m_bWasSpace = true; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+49], 1
$L81100:

; 297  : 					if (GetAttribute(pszTag, _T("align"), szValue)) { 

	lea	eax, DWORD PTR _szValue$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_1M@CDLF@?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?$AA@ ; `string'
	mov	ecx, DWORD PTR _pszTag$81016[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ; CHtmlToRtf::GetAttribute
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	$L81115

; 298  : 						if (_tcscmp(szValue, _T("center")) == 0) AddOutput(pszAppendScope, _T("\\qc ")); 

	mov	esi, esp
	push	OFFSET FLAT:??_C@_1O@DIJA@?$AAc?$AAe?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _szValue$[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81103
	push	OFFSET FLAT:??_C@_19LCLP@?$AA?2?$AAq?$AAc?$AA?5?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _pszAppendScope$81035[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 299  : 						else if (_tcscmp(szValue, _T("left")) == 0) AddOutput(pszAppendScope, _T("\\ql ")); 

	jmp	$L81115
$L81103:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_19EABO@?$AAl?$AAe?$AAf?$AAt?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _szValue$[ebp]
	push	ecx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81107
	push	OFFSET FLAT:??_C@_19NDGP@?$AA?2?$AAq?$AAl?$AA?5?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _pszAppendScope$81035[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 300  : 						else if (_tcscmp(szValue, _T("right")) == 0) AddOutput(pszAppendScope, _T("\\qr ")); 

	jmp	SHORT $L81115
$L81107:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_1M@JIED@?$AAr?$AAi?$AAg?$AAh?$AAt?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _szValue$[ebp]
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81111
	push	OFFSET FLAT:??_C@_19BAMP@?$AA?2?$AAq?$AAr?$AA?5?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _pszAppendScope$81035[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 301  : 						else if (_tcscmp(szValue, _T("justify")) == 0) AddOutput(pszAppendScope, _T("\\qj ")); 

	jmp	SHORT $L81115
$L81111:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_1BA@EPCE@?$AAj?$AAu?$AAs?$AAt?$AAi?$AAf?$AAy?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _szValue$[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81115
	push	OFFSET FLAT:??_C@_19BDLA@?$AA?2?$AAq?$AAj?$AA?5?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _pszAppendScope$81035[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput
$L81115:

; 303  : 					if (GetAttribute(pszTag, _T("nowrap"), szValue)) { 

	lea	ecx, DWORD PTR _szValue$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_1O@BBAK@?$AAn?$AAo?$AAw?$AAr?$AAa?$AAp?$AA?$AA@ ; `string'
	mov	edx, DWORD PTR _pszTag$81016[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ; CHtmlToRtf::GetAttribute
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L81118

; 304  : 						AddOutput(pszAppendScope, _T("\\nowwrap "));                  

	push	OFFSET FLAT:??_C@_1BE@KLEN@?$AA?2?$AAn?$AAo?$AAw?$AAw?$AAr?$AAa?$AAp?$AA?5?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _pszAppendScope$81035[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput
$L81118:

; 306  : 					bNewContext = true; 

	mov	BYTE PTR _bNewContext$81036[ebp], 1

; 308  : 				else if (_tcscmp(szTagName, _T("table")) == 0) { 

	jmp	$L81158
$L81098:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_1M@JCAI@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _szTagName$81025[ebp]
	push	ecx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	$L81122

; 309  : 					Context.lLeftIndent = 0; 

	mov	DWORD PTR _Context$[ebp+28], 0

; 310  : 					Context.lRightIndent = 0; 

	mov	DWORD PTR _Context$[ebp+32], 0

; 311  : 					int lBorder = 0; 

	mov	DWORD PTR _lBorder$81124[ebp], 0

; 312  : 					if (GetAttribute(pszTag, _T("border"), szValue)) { 

	lea	edx, DWORD PTR _szValue$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_1O@DOCF@?$AAb?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@ ; `string'
	mov	eax, DWORD PTR _pszTag$81016[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ; CHtmlToRtf::GetAttribute
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L81125

; 313  : 						lBorder = GetInteger(szValue); 

	lea	ecx, DWORD PTR _szValue$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInteger@CHtmlToRtf@@QBEHPBG@Z	; CHtmlToRtf::GetInteger
	mov	DWORD PTR _lBorder$81124[ebp], eax
$L81125:

; 315  : 					if (GetStyleAttribute(pszTag, _T("table-layout"), szValue)) { 

	lea	edx, DWORD PTR _szValue$[ebp]
	push	edx
	push	OFFSET FLAT:??_C@_1BK@BJIG@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AAl?$AAa?$AAy?$AAo?$AAu?$AAt?$AA?$AA@ ; `string'
	mov	eax, DWORD PTR _pszTag$81016[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStyleAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ; CHtmlToRtf::GetStyleAttribute
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L81131
$L81129:

; 316  : 						ATLASSERT(_tcscmp(szValue, _T("fixed")) == 0); 

	mov	esi, esp
	push	OFFSET FLAT:??_C@_1M@MOGP@?$AAf?$AAi?$AAx?$AAe?$AAd?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _szValue$[ebp]
	push	ecx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	je	SHORT $L81132
	mov	esi, esp
	push	OFFSET FLAT:??_C@_0BP@LEPM@wcscmp?$CIszValue?0?5L?$CCfixed?$CC?$CJ?5?$DN?$DN?50?$AA@ ; `string'
	push	0
	push	316					; 0000013cH
	push	OFFSET FLAT:??_C@_0CH@OGBG@D?3?2_CODE?2Shared?2?4?4?23rdparty?2html@ ; `string'
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__chkesp
	cmp	eax, 1
	jne	SHORT $L81132
	int	3
$L81132:
	xor	edx, edx
	test	edx, edx
	jne	SHORT $L81129
$L81131:

; 318  : 					AddOutput(pszAppendScope, _T("\\par\\trowd \\trgaph108\\trleft-108")); 

	push	OFFSET FLAT:??_C@_1EC@PEBJ@?$AA?2?$AAp?$AAa?$AAr?$AA?2?$AAt?$AAr?$AAo?$AAw?$AAd?$AA?5?$AA?2?$AAt?$AAr?$AAg?$AAa?$AAp?$AAh?$AA1?$AA0@ ; `string'
	lea	eax, DWORD PTR _pszAppendScope$81035[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 319  : 					AddOutputV(pszAppendScope, _T("\\trbrdrt\\brdrs\\brdrw%d "), lBorder); 

	mov	ecx, DWORD PTR _lBorder$81124[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_1DA@FEHP@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAt?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@ ; `string'
	lea	edx, DWORD PTR _pszAppendScope$81035[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ	; CHtmlToRtf::AddOutputV
	add	esp, 16					; 00000010H

; 320  : 					AddOutputV(pszAppendScope, _T("\\trbrdrl\\brdrs\\brdrw%d "), lBorder); 

	mov	ecx, DWORD PTR _lBorder$81124[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_1DA@CFHL@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAl?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@ ; `string'
	lea	edx, DWORD PTR _pszAppendScope$81035[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ	; CHtmlToRtf::AddOutputV
	add	esp, 16					; 00000010H

; 321  : 					AddOutputV(pszAppendScope, _T("\\trbrdrb\\brdrs\\brdrw%d "), lBorder); 

	mov	ecx, DWORD PTR _lBorder$81124[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_1DA@OJMG@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAb?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@ ; `string'
	lea	edx, DWORD PTR _pszAppendScope$81035[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ	; CHtmlToRtf::AddOutputV
	add	esp, 16					; 00000010H

; 322  : 					AddOutputV(pszAppendScope, _T("\\trbrdrr\\brdrs\\brdrw%d "), lBorder); 

	mov	ecx, DWORD PTR _lBorder$81124[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_1DA@EIDO@?$AA?2?$AAt?$AAr?$AAb?$AAr?$AAd?$AAr?$AAr?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAs?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw@ ; `string'
	lea	edx, DWORD PTR _pszAppendScope$81035[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ	; CHtmlToRtf::AddOutputV
	add	esp, 16					; 00000010H

; 323  : 					nCellPos = 0; 

	mov	DWORD PTR _nCellPos$[ebp], 0

; 324  : 					m_nCharPos++; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], edx

; 325  : 					m_bWasSpace = true; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+49], 1

; 326  : 					bNewContext = true; 

	mov	BYTE PTR _bNewContext$81036[ebp], 1

; 328  : 				else if (_tcscmp(szTagName, _T("col")) == 0) { 

	jmp	$L81158
$L81122:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_17HHNM@?$AAc?$AAo?$AAl?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _szTagName$81025[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	$L81141

; 329  : 					int lWidth = 0; 

	mov	DWORD PTR _lWidth$81143[ebp], 0

; 330  : 					if (GetAttribute(pszTag, _T("width"), szValue)) { 

	lea	eax, DWORD PTR _szValue$[ebp]
	push	eax
	push	OFFSET FLAT:??_C@_1M@NBCC@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?$AA@ ; `string'
	mov	ecx, DWORD PTR _pszTag$81016[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ; CHtmlToRtf::GetAttribute
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L81144

; 331  : 						lWidth = GetInteger(szValue); 

	lea	edx, DWORD PTR _szValue$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInteger@CHtmlToRtf@@QBEHPBG@Z	; CHtmlToRtf::GetInteger
	mov	DWORD PTR _lWidth$81143[ebp], eax
$L81144:

; 333  : 					ATLASSERT(lWidth>0); 

	cmp	DWORD PTR _lWidth$81143[ebp], 0
	jg	SHORT $L81149
	mov	esi, esp
	push	OFFSET FLAT:??_C@_08GMAA@lWidth?$DO0?$AA@ ; `string'
	push	0
	push	333					; 0000014dH
	push	OFFSET FLAT:??_C@_0CH@OGBG@D?3?2_CODE?2Shared?2?4?4?23rdparty?2html@ ; `string'
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__chkesp
	cmp	eax, 1
	jne	SHORT $L81149
	int	3
$L81149:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $L81144

; 334  : 					nCellPos += lWidth * lTwipFactor; 

	mov	ecx, DWORD PTR _lWidth$81143[ebp]
	imul	ecx, DWORD PTR _lTwipFactor$[ebp]
	mov	edx, DWORD PTR _nCellPos$[ebp]
	add	edx, ecx
	mov	DWORD PTR _nCellPos$[ebp], edx

; 335  : 					AddOutput(pszAppendScope, _T("\\clbrdrt\\brdrw15\\brdrs\\clbrdrl\\brdrw15\\brdrs\\clbrdrb\\brdrw15\\brdrs\\clbrdrr\\brdrw15\\brdrs")); 

	push	OFFSET FLAT:??_C@_1LC@KOAF@?$AA?2?$AAc?$AAl?$AAb?$AAr?$AAd?$AAr?$AAt?$AA?2?$AAb?$AAr?$AAd?$AAr?$AAw?$AA1?$AA5?$AA?2?$AAb?$AAr?$AAd@ ; `string'
	lea	eax, DWORD PTR _pszAppendScope$81035[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 336  : 					AddOutputV(pszAppendScope, _T("\\cellx%ld"), nCellPos); 

	mov	ecx, DWORD PTR _nCellPos$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_1BE@NEEH@?$AA?2?$AAc?$AAe?$AAl?$AAl?$AAx?$AA?$CF?$AAl?$AAd?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _pszAppendScope$81035[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ	; CHtmlToRtf::AddOutputV
	add	esp, 16					; 00000010H

; 337  : 					m_bWasSpace = true; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+49], 1

; 339  : 				else if (_tcscmp(szTagName, _T("tr")) == 0) { 

	jmp	$L81158
$L81141:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_15MNAG@?$AAt?$AAr?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _szTagName$81025[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81154

; 340  : 					AddOutput(pszAppendScope, _T("\\intbl ")); 

	push	OFFSET FLAT:??_C@_1BA@PKMO@?$AA?2?$AAi?$AAn?$AAt?$AAb?$AAl?$AA?5?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _pszAppendScope$81035[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 341  : 					m_bWasSpace = true; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+49], 1

; 343  : 				else if (_tcscmp(szTagName, _T("td")) == 0) { 

	jmp	SHORT $L81158
$L81154:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_15BL@?$AAt?$AAd?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _szTagName$81025[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81158

; 344  : 					AddOutput(pszAppendScope, _T("\\par ")); 

	push	OFFSET FLAT:??_C@_1M@FOLM@?$AA?2?$AAp?$AAa?$AAr?$AA?5?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _pszAppendScope$81035[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 345  : 					m_nCharPos++; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], edx

; 346  : 					m_bWasSpace = true; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+49], 1
$L81158:

; 348  : 				
; 349  : 				// Containers may also include these styles... 
; 350  : 				if (bNewContext) { 

	mov	edx, DWORD PTR _bNewContext$81036[ebp]
	and	edx, 255				; 000000ffH
	test	edx, edx
	je	$L81164

; 351  : 					if (_tcsstr(pszTag, _T("style=")) != NULL) { 

	push	OFFSET FLAT:??_C@_1O@DBMO@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$DN?$AA?$AA@ ; `string'
	mov	eax, DWORD PTR _pszTag$81016[ebp]
	push	eax
	call	?wcsstr@@YAPAGPAGPBG@Z			; wcsstr
	add	esp, 8
	test	eax, eax
	je	SHORT $L81164

; 352  : 						if (GetStyleAttribute(pszTag, _T("color"), szValue)) { 

	lea	ecx, DWORD PTR _szValue$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_1M@NMBO@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ ; `string'
	mov	edx, DWORD PTR _pszTag$81016[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStyleAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ; CHtmlToRtf::GetStyleAttribute
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L81163

; 353  : 							Context.lTextColor = GetColor(szValue); 

	lea	eax, DWORD PTR _szValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetColor@CHtmlToRtf@@QAEHPBG@Z		; CHtmlToRtf::GetColor
	mov	DWORD PTR _Context$[ebp+8], eax
$L81163:

; 355  : 						if (GetStyleAttribute(pszTag, _T("background-color"), szValue)) { 

	lea	ecx, DWORD PTR _szValue$[ebp]
	push	ecx
	push	OFFSET FLAT:??_C@_1CC@BFAL@?$AAb?$AAa?$AAc?$AAk?$AAg?$AAr?$AAo?$AAu?$AAn?$AAd?$AA?9?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ ; `string'
	mov	edx, DWORD PTR _pszTag$81016[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetStyleAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ; CHtmlToRtf::GetStyleAttribute
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L81164

; 356  : 							Context.lBackColor = GetColor(szValue); 

	lea	eax, DWORD PTR _szValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetColor@CHtmlToRtf@@QAEHPBG@Z		; CHtmlToRtf::GetColor
	mov	DWORD PTR _Context$[ebp+12], eax
$L81164:

; 361  :          else { 

	jmp	$L81205
$L81039:

; 362  : 			 // 
; 363  : 			 // Closing tags 
; 364  : 			 // 
; 365  : 			 if (_tcscmp(szTagName, _T("/b")) == 0 || _tcscmp(szTagName, _T("/strong")) == 0) { 

	mov	esi, esp
	push	OFFSET FLAT:??_C@_15GCI@?$AA?1?$AAb?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _szTagName$81025[ebp]
	push	ecx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	je	SHORT $L81168
	mov	esi, esp
	push	OFFSET FLAT:??_C@_1BA@GLJN@?$AA?1?$AAs?$AAt?$AAr?$AAo?$AAn?$AAg?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _szTagName$81025[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81167
$L81168:

; 366  : 				 AddOutput(pszAppendScope, _T("\\b0 ")); 

	push	OFFSET FLAT:??_C@_19MDDF@?$AA?2?$AAb?$AA0?$AA?5?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _pszAppendScope$81035[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 368  : 			 else if (_tcscmp(szTagName, _T("/i")) == 0) { 

	jmp	$L81205
$L81167:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_15GAKG@?$AA?1?$AAi?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _szTagName$81025[ebp]
	push	ecx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81173

; 369  : 				 AddOutput(pszAppendScope, _T("\\i0 ")); 

	push	OFFSET FLAT:??_C@_19MECG@?$AA?2?$AAi?$AA0?$AA?5?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _pszAppendScope$81035[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 371  : 			 else if (_tcscmp(szTagName, _T("/u")) == 0) { 

	jmp	$L81205
$L81173:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_15JJCD@?$AA?1?$AAu?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _szTagName$81025[ebp]
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81177

; 372  : 				 AddOutput(pszAppendScope, _T("\\ulnone ")); 

	push	OFFSET FLAT:??_C@_1BC@EJLG@?$AA?2?$AAu?$AAl?$AAn?$AAo?$AAn?$AAe?$AA?5?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _pszAppendScope$81035[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 374  : 			 else if (_tcscmp(szTagName, _T("/tr")) == 0) { 

	jmp	$L81205
$L81177:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_17KCPH@?$AA?1?$AAt?$AAr?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _szTagName$81025[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81181

; 375  : 				 AddOutput(pszAppendScope, _T("\\row ")); 

	push	OFFSET FLAT:??_C@_1M@GJEM@?$AA?2?$AAr?$AAo?$AAw?$AA?5?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _pszAppendScope$81035[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 376  : 				 m_nCharPos++; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], edx

; 377  : 				 m_bWasSpace = true; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+49], 1

; 379  : 			 else if (_tcscmp(szTagName, _T("/td")) == 0) { 

	jmp	$L81205
$L81181:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_17GPOK@?$AA?1?$AAt?$AAd?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _szTagName$81025[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81185

; 380  : 				 AddOutput(pszAppendScope, _T("\\cell ")); 

	push	OFFSET FLAT:??_C@_1O@CJDB@?$AA?2?$AAc?$AAe?$AAl?$AAl?$AA?5?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _pszAppendScope$81035[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 381  : 				 m_nCharPos++; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], edx

; 382  : 				 m_bWasSpace = true; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+49], 1

; 384  : 			 else if (_tcscmp(szTagName, _T("/body")) == 0) { 

	jmp	$L81205
$L81185:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_1M@KMPD@?$AA?1?$AAb?$AAo?$AAd?$AAy?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _szTagName$81025[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81189

; 385  : 				 bRestoreContext = true; 

	mov	BYTE PTR _bRestoreContext$81037[ebp], 1

; 387  : 			 else if (_tcscmp(szTagName, _T("/font")) == 0) { 

	jmp	$L81205
$L81189:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_1M@GOEK@?$AA?1?$AAf?$AAo?$AAn?$AAt?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _szTagName$81025[ebp]
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81192

; 388  : 				 bRestoreContext = true; 

	mov	BYTE PTR _bRestoreContext$81037[ebp], 1

; 390  : 			 else if (_tcscmp(szTagName, _T("/a")) == 0) { 

	jmp	$L81205
$L81192:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_15PABD@?$AA?1?$AAa?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _szTagName$81025[ebp]
	push	ecx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81195

; 391  : 				 Link.nEnd = m_nCharPos; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _Link$[ebp+8], eax

; 392  : 				 m_aLinks.Add(Link); 

	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	DWORD PTR $T83262[ebp], esp
	lea	edx, DWORD PTR _Link$[ebp]
	push	edx
	call	??0LINK@CHtmlToRtf@@QAE@ABU01@@Z	; CHtmlToRtf::LINK::LINK
	mov	DWORD PTR -2972+[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Add@?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAEHULINK@CHtmlToRtf@@@Z ; ATL::CSimpleValArray<CHtmlToRtf::LINK>::Add

; 393  : 				 //ATLTRACE("Link: %d - %d\n", Link.nStart, Link.nEnd); 
; 394  : 				 bRestoreContext = true; 

	mov	BYTE PTR _bRestoreContext$81037[ebp], 1

; 396  : 			 else if (_tcscmp(szTagName, _T("/span")) == 0) { 

	jmp	$L81205
$L81195:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_1M@KBJN@?$AA?1?$AAs?$AAp?$AAa?$AAn?$AA?$AA@ ; `string'
	lea	eax, DWORD PTR _szTagName$81025[ebp]
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81199

; 397  : 				 bRestoreContext = true; 

	mov	BYTE PTR _bRestoreContext$81037[ebp], 1

; 399  : 			 else if (_tcscmp(szTagName, _T("/div")) == 0) { 

	jmp	$L81205
$L81199:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_19HPKF@?$AA?1?$AAd?$AAi?$AAv?$AA?$AA@ ; `string'
	lea	ecx, DWORD PTR _szTagName$81025[ebp]
	push	ecx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81202

; 400  : 				 AddOutput(pszAppendScope, _T("\\par ")); 

	push	OFFSET FLAT:??_C@_1M@FOLM@?$AA?2?$AAp?$AAa?$AAr?$AA?5?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _pszAppendScope$81035[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 401  : 				 m_nCharPos++; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], ecx

; 402  : 				 bRestoreContext = true; 

	mov	BYTE PTR _bRestoreContext$81037[ebp], 1

; 403  : 				 m_bEndLine = true; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+48], 1

; 404  : 				 m_bWasSpace = true; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+49], 1

; 406  : 			 else if (_tcscmp(szTagName, _T("/table")) == 0) { 

	jmp	SHORT $L81205
$L81202:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_1O@ICNL@?$AA?1?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
	lea	edx, DWORD PTR _szTagName$81025[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81205

; 407  : 				 bRestoreContext = true; 

	mov	BYTE PTR _bRestoreContext$81037[ebp], 1

; 408  : 				 m_bEndLine = true; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+48], 1

; 409  : 				 m_bWasSpace = true; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+49], 1
$L81205:

; 412  : 		 
; 413  :          // Appended all we wanted? 
; 414  :          *pszAppendScope = _T('\0'); 

	mov	edx, DWORD PTR _pszAppendScope$81035[ebp]
	mov	WORD PTR [edx], 0

; 415  : 		 
; 416  :          // Keep track of current rendering context 
; 417  :          if (bNewContext) { 

	mov	eax, DWORD PTR _bNewContext$81036[ebp]
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L81207

; 418  : 			 // Push new context on stack 
; 419  : 			 aContexts.Add(OldContext); 

	lea	ecx, DWORD PTR _OldContext$81034[ebp]
	push	ecx
	lea	ecx, DWORD PTR _aContexts$[ebp]
	call	?Add@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEHAAUCONTEXT@CHtmlToRtf@@@Z ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::Add

; 420  : 			 // Append attributes to output... 
; 421  : 			 AddOutput(pstrDest, _T("{")); 

	push	OFFSET FLAT:??_C@_13IAJL@?$AA?$HL?$AA?$AA@ ; `string'
	mov	edx, DWORD PTR _pstrDest$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 422  : 			 AddOutput(pstrDest, szAppendScope); 

	lea	eax, DWORD PTR _szAppendScope$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pstrDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 424  :          else if (bRestoreContext) { 

	jmp	$L81220
$L81207:
	mov	edx, DWORD PTR _bRestoreContext$81037[ebp]
	and	edx, 255				; 000000ffH
	test	edx, edx
	je	$L81210

; 425  : 			 // Pop context from stack 
; 426  : 			 OldContext = Context; 

	lea	eax, DWORD PTR _Context$[ebp]
	push	eax
	lea	ecx, DWORD PTR _OldContext$81034[ebp]
	call	??4CONTEXT@CHtmlToRtf@@QAEAAU01@ABU01@@Z ; CHtmlToRtf::CONTEXT::operator=

; 427  : 			 int lLast = aContexts.GetSize()-1; 

	lea	ecx, DWORD PTR _aContexts$[ebp]
	call	?GetSize@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QBEHXZ ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::GetSize
	sub	eax, 1
	mov	DWORD PTR _lLast$81211[ebp], eax
$L81212:

; 428  : 			 ATLASSERT(aContexts.GetSize()>0); // unmatched open/close tags 

	lea	ecx, DWORD PTR _aContexts$[ebp]
	call	?GetSize@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QBEHXZ ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::GetSize
	test	eax, eax
	jg	SHORT $L81215
	mov	esi, esp
	push	OFFSET FLAT:??_C@_0BG@MFAG@aContexts?4GetSize?$CI?$CJ?$DO0?$AA@ ; `string'
	push	0
	push	428					; 000001acH
	push	OFFSET FLAT:??_C@_0CH@OGBG@D?3?2_CODE?2Shared?2?4?4?23rdparty?2html@ ; `string'
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__chkesp
	cmp	eax, 1
	jne	SHORT $L81215
	int	3
$L81215:
	xor	ecx, ecx
	test	ecx, ecx
	jne	SHORT $L81212

; 429  : 			 if (aContexts.GetSize() == 0) return false; 

	lea	ecx, DWORD PTR _aContexts$[ebp]
	call	?GetSize@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QBEHXZ ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::GetSize
	test	eax, eax
	jne	SHORT $L81217
	mov	BYTE PTR $T83263[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _OldContext$81034[ebp]
	call	??1CONTEXT@CHtmlToRtf@@QAE@XZ		; CHtmlToRtf::CONTEXT::~CONTEXT
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _Link$[ebp]
	call	??1LINK@CHtmlToRtf@@QAE@XZ		; CHtmlToRtf::LINK::~LINK
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Context$[ebp]
	call	??1CONTEXT@CHtmlToRtf@@QAE@XZ		; CHtmlToRtf::CONTEXT::~CONTEXT
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _aContexts$[ebp]
	call	??1?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@XZ ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::~CSimpleArray<CHtmlToRtf::CONTEXT>
	mov	al, BYTE PTR $T83263[ebp]
	jmp	$L80946
$L81217:

; 430  : 			 Context = aContexts[lLast]; 

	mov	edx, DWORD PTR _lLast$81211[ebp]
	push	edx
	lea	ecx, DWORD PTR _aContexts$[ebp]
	call	??A?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QBEAAUCONTEXT@CHtmlToRtf@@H@Z ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::operator[]
	push	eax
	lea	ecx, DWORD PTR _Context$[ebp]
	call	??4CONTEXT@CHtmlToRtf@@QAEAAU01@ABU01@@Z ; CHtmlToRtf::CONTEXT::operator=

; 431  : 			 aContexts.RemoveAt(lLast); 

	mov	eax, DWORD PTR _lLast$81211[ebp]
	push	eax
	lea	ecx, DWORD PTR _aContexts$[ebp]
	call	?RemoveAt@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEHH@Z ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::RemoveAt

; 432  : 			 // Append attributes to output... 
; 433  : 			 AddOutput(pstrDest, szAppendScope); 

	lea	ecx, DWORD PTR _szAppendScope$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pstrDest$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 434  : 			 AddOutput(pstrDest, _T("}\r\n")); 

	push	OFFSET FLAT:??_C@_17GLOK@?$AA?$HN?$AA?$AN?$AA?6?$AA?$AA@ ; `string'
	mov	eax, DWORD PTR _pstrDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 436  :          else { 

	jmp	SHORT $L81220
$L81210:

; 437  : 			 // No context change, just append the 
; 438  : 			 // attributes... 
; 439  : 			 AddOutput(pstrDest, szAppendScope); 

	lea	ecx, DWORD PTR _szAppendScope$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pstrDest$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput
$L81220:

; 441  :          // If context change, we match any changes in rendering and 
; 442  :          // and RTF comamnds... 
; 443  :          if (bNewContext) { 

	mov	eax, DWORD PTR _bNewContext$81036[ebp]
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	$L81230

; 444  : 			 bool bChanged = false; 

	mov	BYTE PTR _bChanged$81222[ebp], 0

; 445  : 			 if (OldContext.lTextColor != Context.lTextColor) { 

	mov	ecx, DWORD PTR _OldContext$81034[ebp+8]
	cmp	ecx, DWORD PTR _Context$[ebp+8]
	je	SHORT $L81223

; 446  : 				 AddOutputV(pstrDest, _T("\\cf%d"), Context.lTextColor + 1); 

	mov	edx, DWORD PTR _Context$[ebp+8]
	add	edx, 1
	push	edx
	push	OFFSET FLAT:??_C@_1M@FDAF@?$AA?2?$AAc?$AAf?$AA?$CF?$AAd?$AA?$AA@ ; `string'
	mov	eax, DWORD PTR _pstrDest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ	; CHtmlToRtf::AddOutputV
	add	esp, 16					; 00000010H

; 447  : 				 bChanged = true; 

	mov	BYTE PTR _bChanged$81222[ebp], 1
$L81223:

; 449  : 			 if (OldContext.lBackColor != Context.lBackColor) { 

	mov	edx, DWORD PTR _OldContext$81034[ebp+12]
	cmp	edx, DWORD PTR _Context$[ebp+12]
	je	SHORT $L81225

; 450  : 				 AddOutputV(pstrDest, _T("\\highlight%d"), Context.lBackColor + 1); 

	mov	eax, DWORD PTR _Context$[ebp+12]
	add	eax, 1
	push	eax
	push	OFFSET FLAT:??_C@_1BK@KEAH@?$AA?2?$AAh?$AAi?$AAg?$AAh?$AAl?$AAi?$AAg?$AAh?$AAt?$AA?$CF?$AAd?$AA?$AA@ ; `string'
	mov	ecx, DWORD PTR _pstrDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ	; CHtmlToRtf::AddOutputV
	add	esp, 16					; 00000010H

; 451  : 				 bChanged = true; 

	mov	BYTE PTR _bChanged$81222[ebp], 1
$L81225:

; 453  : 			 if (OldContext.lFontSize != Context.lFontSize) { 

	mov	eax, DWORD PTR _OldContext$81034[ebp+4]
	cmp	eax, DWORD PTR _Context$[ebp+4]
	je	SHORT $L81227

; 454  : 				 AddOutputV(pstrDest, _T("\\fs%d"), Context.lFontSize); 

	mov	ecx, DWORD PTR _Context$[ebp+4]
	push	ecx
	push	OFFSET FLAT:??_C@_1M@OFPE@?$AA?2?$AAf?$AAs?$AA?$CF?$AAd?$AA?$AA@ ; `string'
	mov	edx, DWORD PTR _pstrDest$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ	; CHtmlToRtf::AddOutputV
	add	esp, 16					; 00000010H

; 455  : 				 bChanged = true; 

	mov	BYTE PTR _bChanged$81222[ebp], 1
$L81227:

; 457  : 			 if (_tcscmp(OldContext.sFaceName, Context.sFaceName)!=0) { 

	lea	ecx, DWORD PTR _Context$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _OldContext$81034[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	je	SHORT $L81228

; 458  : 				 AddOutputV(pstrDest, _T("\\f%d"), GetFontFace(Context.sFaceName)); 

	lea	ecx, DWORD PTR _Context$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFontFace@CHtmlToRtf@@QAEHPBG@Z	; CHtmlToRtf::GetFontFace
	push	eax
	push	OFFSET FLAT:??_C@_19JGHG@?$AA?2?$AAf?$AA?$CF?$AAd?$AA?$AA@ ; `string'
	mov	ecx, DWORD PTR _pstrDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ	; CHtmlToRtf::AddOutputV
	add	esp, 16					; 00000010H

; 459  : 				 bChanged = true; 

	mov	BYTE PTR _bChanged$81222[ebp], 1
$L81228:

; 461  : 			 if (bChanged) AddOutput(pstrDest, _T(" ")); 

	mov	eax, DWORD PTR _bChanged$81222[ebp]
	and	eax, 255				; 000000ffH
	test	eax, eax
	je	SHORT $L81230
	push	OFFSET FLAT:??_C@_13ECNF@?$AA?5?$AA?$AA@ ; `string'
	mov	ecx, DWORD PTR _pstrDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput
$L81230:

; 463  : 		 
; 464  :       } 

	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _OldContext$81034[ebp]
	call	??1CONTEXT@CHtmlToRtf@@QAE@XZ		; CHtmlToRtf::CONTEXT::~CONTEXT
	jmp	$L81006
$L81007:

; 465  :       return true; 

	mov	BYTE PTR $T83264[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _Link$[ebp]
	call	??1LINK@CHtmlToRtf@@QAE@XZ		; CHtmlToRtf::LINK::~LINK
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _Context$[ebp]
	call	??1CONTEXT@CHtmlToRtf@@QAE@XZ		; CHtmlToRtf::CONTEXT::~CONTEXT
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _aContexts$[ebp]
	call	??1?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@XZ ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::~CSimpleArray<CHtmlToRtf::CONTEXT>
	mov	al, BYTE PTR $T83264[ebp]
$L80946:

; 466  :    } 

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 2972				; 00000b9cH
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L83265:
	lea	ecx, DWORD PTR _aContexts$[ebp]
	call	??1?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@XZ ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::~CSimpleArray<CHtmlToRtf::CONTEXT>
	ret	0
$L83266:
	lea	ecx, DWORD PTR _Context$[ebp]
	call	??1CONTEXT@CHtmlToRtf@@QAE@XZ		; CHtmlToRtf::CONTEXT::~CONTEXT
	ret	0
$L83267:
	lea	ecx, DWORD PTR _Link$[ebp]
	call	??1LINK@CHtmlToRtf@@QAE@XZ		; CHtmlToRtf::LINK::~LINK
	ret	0
$L83268:
	lea	ecx, DWORD PTR _OldContext$81034[ebp]
	call	??1CONTEXT@CHtmlToRtf@@QAE@XZ		; CHtmlToRtf::CONTEXT::~CONTEXT
	ret	0
$L83272:
	mov	eax, OFFSET FLAT:$T83271
	jmp	___CxxFrameHandler
text$x	ENDS
?Parse@CHtmlToRtf@@QAE_NPBGAAPAG@Z ENDP			; CHtmlToRtf::Parse
EXTRN	__imp__wcsstr:NEAR
;	COMDAT ?wcsstr@@YAPAGPAGPBG@Z
_TEXT	SEGMENT
__S$ = 8
__P$ = 12
?wcsstr@@YAPAGPAGPBG@Z PROC NEAR			; wcsstr, COMDAT

; 708  :         {return ((wchar_t *)wcsstr((const wchar_t *)_S, _P)); }

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, esp
	mov	eax, DWORD PTR __P$[ebp]
	push	eax
	mov	ecx, DWORD PTR __S$[ebp]
	push	ecx
	call	DWORD PTR __imp__wcsstr
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	pop	esi
	cmp	ebp, esp
	call	__chkesp
	pop	ebp
	ret	0
?wcsstr@@YAPAGPAGPBG@Z ENDP				; wcsstr
_TEXT	ENDS
;	COMDAT ??0CONTEXT@CHtmlToRtf@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0CONTEXT@CHtmlToRtf@@QAE@XZ PROC NEAR			; CHtmlToRtf::CONTEXT::CONTEXT, COMDAT

; 42   : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CString@@QAE@XZ			; CString::CString
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+36], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 0

; 43   : 
; 44   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CONTEXT@CHtmlToRtf@@QAE@XZ ENDP			; CHtmlToRtf::CONTEXT::CONTEXT
_TEXT	ENDS
PUBLIC	?szPseudo@?6??AddText@CHtmlToRtf@@QAEXAAPAGAAPBG@Z@4PAPBGA ; `CHtmlToRtf::AddText'::`7'::szPseudo
PUBLIC	??_C@_15BAGJ@?$AA?2?$AA?$HO?$AA?$AA@		; `string'
PUBLIC	??_C@_13OGPI@?$AA?$CC?$AA?$AA@			; `string'
PUBLIC	??_C@_13KOKC@?$AA?$CG?$AA?$AA@			; `string'
PUBLIC	??_C@_13LLFA@?$AA?$DM?$AA?$AA@			; `string'
PUBLIC	??_C@_13BPHN@?$AA?$DO?$AA?$AA@			; `string'
PUBLIC	??_C@_0N@MNGN@?$CKppstrPseudo?$AA@		; `string'
EXTRN	__imp___wcsnicmp:NEAR
EXTRN	__imp__lstrlenW@4:NEAR
;	COMDAT ?szPseudo@?6??AddText@CHtmlToRtf@@QAEXAAPAGAAPBG@Z@4PAPBGA
; File D:\_CODE\Shared\..\3rdparty\html2rtf.h
_DATA	SEGMENT
?szPseudo@?6??AddText@CHtmlToRtf@@QAEXAAPAGAAPBG@Z@4PAPBGA DD FLAT:??_C@_13ECNF@?$AA?5?$AA?$AA@ ; `CHtmlToRtf::AddText'::`7'::szPseudo
	DD	FLAT:??_C@_15BAGJ@?$AA?2?$AA?$HO?$AA?$AA@
	DD	FLAT:??_C@_13OGPI@?$AA?$CC?$AA?$AA@
	DD	FLAT:??_C@_13OGPI@?$AA?$CC?$AA?$AA@
	DD	FLAT:??_C@_13KOKC@?$AA?$CG?$AA?$AA@
	DD	FLAT:??_C@_13KOKC@?$AA?$CG?$AA?$AA@
	DD	FLAT:??_C@_13LLFA@?$AA?$DM?$AA?$AA@
	DD	FLAT:??_C@_13LLFA@?$AA?$DM?$AA?$AA@
	DD	FLAT:??_C@_13BPHN@?$AA?$DO?$AA?$AA@
	DD	FLAT:??_C@_13BPHN@?$AA?$DO?$AA?$AA@
	DD	00H
	DD	00H
_DATA	ENDS
;	COMDAT ??_C@_15BAGJ@?$AA?2?$AA?$HO?$AA?$AA@
_DATA	SEGMENT
??_C@_15BAGJ@?$AA?2?$AA?$HO?$AA?$AA@ DB '\', 00H, '~', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_13OGPI@?$AA?$CC?$AA?$AA@
_DATA	SEGMENT
??_C@_13OGPI@?$AA?$CC?$AA?$AA@ DB '"', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_13KOKC@?$AA?$CG?$AA?$AA@
_DATA	SEGMENT
??_C@_13KOKC@?$AA?$CG?$AA?$AA@ DB '&', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_13LLFA@?$AA?$DM?$AA?$AA@
_DATA	SEGMENT
??_C@_13LLFA@?$AA?$DM?$AA?$AA@ DB '<', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_13BPHN@?$AA?$DO?$AA?$AA@
_DATA	SEGMENT
??_C@_13BPHN@?$AA?$DO?$AA?$AA@ DB '>', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0N@MNGN@?$CKppstrPseudo?$AA@
_DATA	SEGMENT
??_C@_0N@MNGN@?$CKppstrPseudo?$AA@ DB '*ppstrPseudo', 00H ; `string'
_DATA	ENDS
;	COMDAT ?AddText@CHtmlToRtf@@QAEXAAPAGAAPBG@Z
_TEXT	SEGMENT
_this$ = -8
_ppstrPseudo$81250 = -4
_pstrDest$ = 8
_pszHTML$ = 12
?AddText@CHtmlToRtf@@QAEXAAPAGAAPBG@Z PROC NEAR		; CHtmlToRtf::AddText, COMDAT

; 469  :    { 

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$L81236:

; 470  : 	   while(*pszHTML && *pszHTML!='<') 

	mov	eax, DWORD PTR _pszHTML$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	dx, WORD PTR [ecx]
	test	edx, edx
	je	$L81237
	mov	eax, DWORD PTR _pszHTML$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	dx, WORD PTR [ecx]
	cmp	edx, 60					; 0000003cH
	je	$L81237

; 473  : 		   { 

	mov	eax, DWORD PTR _pszHTML$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	dx, WORD PTR [ecx]
	mov	DWORD PTR -12+[ebp], edx
	mov	eax, DWORD PTR -12+[ebp]
	sub	eax, 9
	mov	DWORD PTR -12+[ebp], eax
	cmp	DWORD PTR -12+[ebp], 116		; 00000074H
	ja	$L81268
	mov	edx, DWORD PTR -12+[ebp]
	xor	ecx, ecx
	mov	cl, BYTE PTR $L83283[edx]
	jmp	DWORD PTR $L83284[ecx*4]
$L81242:

; 476  : 				   static LPCTSTR szPseudo[] =   
; 477  : 				   { 
; 478  : 					   _T(" "), _T("\\~"), 
; 479  : 						   _T("\""), _T("\""), 
; 480  : 						   _T("&"), _T("&"), 
; 481  : 						   _T("<"), _T("<"), 
; 482  : 						   _T(">"), _T(">"), 
; 483  : 						   NULL, NULL  
; 484  : 				   }; 
; 485  : 				   LPCTSTR* ppstrPseudo = szPseudo; 

	mov	DWORD PTR _ppstrPseudo$81250[ebp], OFFSET FLAT:?szPseudo@?6??AddText@CHtmlToRtf@@QAEXAAPAGAAPBG@Z@4PAPBGA ; `CHtmlToRtf::AddText'::`7'::szPseudo
$L81252:

; 486  : 				   while(*ppstrPseudo) { 

	mov	eax, DWORD PTR _ppstrPseudo$81250[ebp]
	cmp	DWORD PTR [eax], 0
	je	$L81253

; 487  : 					   if (_tcsnicmp(pszHTML, *ppstrPseudo, ::lstrlen(*ppstrPseudo)) == 0) { 

	mov	esi, esp
	mov	ecx, DWORD PTR _ppstrPseudo$81250[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__chkesp
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR _ppstrPseudo$81250[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _pszHTML$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp___wcsnicmp
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81254

; 488  : 						   pszHTML += ::lstrlen(*ppstrPseudo); 

	mov	esi, esp
	mov	ecx, DWORD PTR _ppstrPseudo$81250[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__lstrlenW@4
	cmp	esi, esp
	call	__chkesp
	mov	ecx, DWORD PTR _pszHTML$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax*2]
	mov	ecx, DWORD PTR _pszHTML$[ebp]
	mov	DWORD PTR [ecx], eax

; 489  : 						   AddOutput(pstrDest, *(ppstrPseudo + 1)); 

	mov	edx, DWORD PTR _ppstrPseudo$81250[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _pstrDest$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z	; CHtmlToRtf::AddOutput

; 490  : 						   m_nCharPos++; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 491  : 						   m_bWasSpace = false; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+49], 0

; 492  : 						   break; 

	jmp	SHORT $L81253
$L81254:

; 494  : 					   ppstrPseudo += 2; 

	mov	eax, DWORD PTR _ppstrPseudo$81250[ebp]
	add	eax, 8
	mov	DWORD PTR _ppstrPseudo$81250[ebp], eax

; 495  : 				   } 

	jmp	$L81252
$L81253:

; 496  : 				   ATLASSERT(*ppstrPseudo); // Found a replacement? 

	mov	ecx, DWORD PTR _ppstrPseudo$81250[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $L81258
	mov	esi, esp
	push	OFFSET FLAT:??_C@_0N@MNGN@?$CKppstrPseudo?$AA@ ; `string'
	push	0
	push	496					; 000001f0H
	push	OFFSET FLAT:??_C@_0CH@OGBG@D?3?2_CODE?2Shared?2?4?4?23rdparty?2html@ ; `string'
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__chkesp
	cmp	eax, 1
	jne	SHORT $L81258
	int	3
$L81258:
	xor	edx, edx
	test	edx, edx
	jne	SHORT $L81253

; 498  : 			   break; 

	jmp	$L81239
$L81260:

; 499  : 		   case '\\': 
; 500  : 			   *pstrDest++ = _T('\\'); 

	mov	eax, DWORD PTR _pstrDest$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	WORD PTR [ecx], 92			; 0000005cH
	mov	edx, DWORD PTR _pstrDest$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _pstrDest$[ebp]
	mov	DWORD PTR [ecx], eax

; 501  : 			   *pstrDest++ = _T('\\'); 

	mov	edx, DWORD PTR _pstrDest$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	WORD PTR [eax], 92			; 0000005cH
	mov	ecx, DWORD PTR _pstrDest$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _pstrDest$[ebp]
	mov	DWORD PTR [eax], edx

; 502  : 			   pszHTML++; 

	mov	ecx, DWORD PTR _pszHTML$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _pszHTML$[ebp]
	mov	DWORD PTR [eax], edx

; 503  : 			   m_nCharPos++; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], edx

; 504  : 			   m_bWasSpace = false; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+49], 0

; 505  : 			   break; 

	jmp	$L81239
$L81261:

; 506  : 		   case '{': 
; 507  : 			   *pstrDest++ = _T('\\'); 

	mov	edx, DWORD PTR _pstrDest$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	WORD PTR [eax], 92			; 0000005cH
	mov	ecx, DWORD PTR _pstrDest$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _pstrDest$[ebp]
	mov	DWORD PTR [eax], edx

; 508  : 			   *pstrDest++ = _T('{'); 

	mov	ecx, DWORD PTR _pstrDest$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	WORD PTR [edx], 123			; 0000007bH
	mov	eax, DWORD PTR _pstrDest$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _pstrDest$[ebp]
	mov	DWORD PTR [edx], ecx

; 509  : 			   pszHTML++; 

	mov	eax, DWORD PTR _pszHTML$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _pszHTML$[ebp]
	mov	DWORD PTR [edx], ecx

; 510  : 			   m_nCharPos++; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], ecx

; 511  : 			   m_bWasSpace = false; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+49], 0

; 512  : 			   break; 

	jmp	$L81239
$L81262:

; 513  : 		   case '}': 
; 514  : 			   *pstrDest++ = _T('\\'); 

	mov	ecx, DWORD PTR _pstrDest$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	WORD PTR [edx], 92			; 0000005cH
	mov	eax, DWORD PTR _pstrDest$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _pstrDest$[ebp]
	mov	DWORD PTR [edx], ecx

; 515  : 			   *pstrDest++ = _T('}'); 

	mov	eax, DWORD PTR _pstrDest$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	WORD PTR [ecx], 125			; 0000007dH
	mov	edx, DWORD PTR _pstrDest$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _pstrDest$[ebp]
	mov	DWORD PTR [ecx], eax

; 516  : 			   pszHTML++; 

	mov	edx, DWORD PTR _pszHTML$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _pszHTML$[ebp]
	mov	DWORD PTR [ecx], eax

; 517  : 			   m_nCharPos++; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 518  : 			   m_bWasSpace = false; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+49], 0

; 519  : 			   break; 

	jmp	$L81239
$L81263:

; 520  : 		   case '\t': 
; 521  : 		   case ' ': 
; 522  : 			   // Ignore spaces as long as this is the start of a new line 
; 523  : 			   // Not exactly HTML compatible, but at good try... 
; 524  : 			   if (!m_bEndLine && !m_bWasSpace) { 

	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	mov	cl, BYTE PTR [eax+48]
	test	ecx, ecx
	jne	SHORT $L81264
	mov	edx, DWORD PTR _this$[ebp]
	xor	eax, eax
	mov	al, BYTE PTR [edx+49]
	test	eax, eax
	jne	SHORT $L81264

; 525  : 				   *pstrDest++ = _T(' '); 

	mov	ecx, DWORD PTR _pstrDest$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	WORD PTR [edx], 32			; 00000020H
	mov	eax, DWORD PTR _pstrDest$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _pstrDest$[ebp]
	mov	DWORD PTR [edx], ecx

; 526  : 				   m_nCharPos++; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], ecx
$L81264:

; 528  : 			   pszHTML++; 

	mov	eax, DWORD PTR _pszHTML$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _pszHTML$[ebp]
	mov	DWORD PTR [edx], ecx

; 529  : 			   m_bWasSpace = true; 

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+49], 1

; 530  : 			   break; 

	jmp	$L81239
$L81265:

; 531  : 		   case '\r': 
; 532  : 			   pszHTML++; 

	mov	ecx, DWORD PTR _pszHTML$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _pszHTML$[ebp]
	mov	DWORD PTR [eax], edx

; 533  : 			   break; 

	jmp	$L81239
$L81266:

; 534  : 		   case '\n': 
; 535  : 			   if (!m_bWasSpace) { 

	mov	ecx, DWORD PTR _this$[ebp]
	xor	edx, edx
	mov	dl, BYTE PTR [ecx+49]
	test	edx, edx
	jne	SHORT $L81267

; 536  : 				   *pstrDest++ = _T(' '); 

	mov	eax, DWORD PTR _pstrDest$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	WORD PTR [ecx], 32			; 00000020H
	mov	edx, DWORD PTR _pstrDest$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _pstrDest$[ebp]
	mov	DWORD PTR [ecx], eax

; 537  : 				   m_nCharPos++; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], eax
$L81267:

; 539  : 			   pszHTML++; 

	mov	edx, DWORD PTR _pszHTML$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _pszHTML$[ebp]
	mov	DWORD PTR [ecx], eax

; 540  : 			   break; 

	jmp	SHORT $L81239
$L81268:

; 541  : 		   default: 
; 542  : 			   *pstrDest++ = *pszHTML++; 

	mov	edx, DWORD PTR _pszHTML$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pstrDest$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ax, WORD PTR [eax]
	mov	WORD PTR [edx], ax
	mov	ecx, DWORD PTR _pstrDest$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _pstrDest$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _pszHTML$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _pszHTML$[ebp]
	mov	DWORD PTR [eax], edx

; 543  : 			   m_nCharPos++; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], edx

; 544  : 			   m_bEndLine = false; 

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+48], 0

; 545  : 			   m_bWasSpace = false; 

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+49], 0
$L81239:

; 547  : 	   } 

	jmp	$L81236
$L81237:

; 548  :    } 

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	8
$L83284:
	DD	$L81263
	DD	$L81266
	DD	$L81265
	DD	$L81242
	DD	$L81260
	DD	$L81261
	DD	$L81262
	DD	$L81268
$L83283:
	DB	0
	DB	1
	DB	7
	DB	7
	DB	2
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	0
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	3
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	4
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	5
	DB	7
	DB	6
?AddText@CHtmlToRtf@@QAEXAAPAGAAPBG@Z ENDP		; CHtmlToRtf::AddText
_TEXT	ENDS
;	COMDAT ?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z
_TEXT	SEGMENT
_this$ = -4
_pstrDest$ = 8
_pszSrc$ = 12
?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z PROC NEAR		; CHtmlToRtf::AddOutput, COMDAT

; 550  :    { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$L81272:

; 551  : 	   while(*pszSrc) *pstrDest++ = *pszSrc++; 

	mov	eax, DWORD PTR _pszSrc$[ebp]
	xor	ecx, ecx
	mov	cx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $L81273
	mov	edx, DWORD PTR _pstrDest$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _pszSrc$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _pstrDest$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _pstrDest$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _pszSrc$[ebp]
	add	eax, 2
	mov	DWORD PTR _pszSrc$[ebp], eax
	jmp	SHORT $L81272
$L81273:

; 552  :    } 

	mov	esp, ebp
	pop	ebp
	ret	8
?AddOutput@CHtmlToRtf@@QBEXAAPAGPBG@Z ENDP		; CHtmlToRtf::AddOutput
_TEXT	ENDS
EXTRN	__imp__wvsprintfW@12:NEAR
;	COMDAT ?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ
_TEXT	SEGMENT
_argptr$ = -8
_nCount$ = -4
_pstrDest$ = 12
_pszFormat$ = 16
?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ PROC NEAR	; CHtmlToRtf::AddOutputV, COMDAT

; 554  :    { 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH

; 555  : 	   va_list argptr;          
; 556  : 	   va_start(argptr, pszFormat); 

	lea	eax, DWORD PTR _pszFormat$[ebp+4]
	mov	DWORD PTR _argptr$[ebp], eax

; 557  : 	   int nCount = ::wvsprintf(pstrDest, pszFormat, argptr); 

	mov	esi, esp
	mov	ecx, DWORD PTR _argptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszFormat$[ebp]
	push	edx
	mov	eax, DWORD PTR _pstrDest$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__wvsprintfW@12
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _nCount$[ebp], eax

; 558  : 	   va_end(argptr); 

	mov	DWORD PTR _argptr$[ebp], 0

; 559  : 	   pstrDest += nCount; 

	mov	edx, DWORD PTR _pstrDest$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _nCount$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	eax, DWORD PTR _pstrDest$[ebp]
	mov	DWORD PTR [eax], edx

; 560  :    } 

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
?AddOutputV@CHtmlToRtf@@QBAXAAPAGPBGZZ ENDP		; CHtmlToRtf::AddOutputV
_TEXT	ENDS
;	COMDAT ?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z
_TEXT	SEGMENT
_this$ = -12
_p$ = -4
_c$ = -8
_pszTag$ = 8
_pszName$ = 12
_pszValue$ = 16
?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z PROC NEAR	; CHtmlToRtf::GetAttribute, COMDAT

; 563  :    { 

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 564  : 	   *pszValue = _T('\0'); 

	mov	eax, DWORD PTR _pszValue$[ebp]
	mov	WORD PTR [eax], 0

; 565  : 	   LPCTSTR p = _tcsstr(pszTag, pszName); 

	mov	esi, esp
	mov	ecx, DWORD PTR _pszName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszTag$[ebp]
	push	edx
	call	DWORD PTR __imp__wcsstr
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _p$[ebp], eax

; 566  : 	   if (p==NULL) return false; 

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $L81285
	xor	al, al
	jmp	$L81283
$L81285:

; 567  : 	   p += _tcslen(pszName); 

	mov	esi, esp
	mov	eax, DWORD PTR _pszName$[ebp]
	push	eax
	call	DWORD PTR __imp__wcslen
	add	esp, 4
	cmp	esi, esp
	call	__chkesp
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _p$[ebp], edx
$L81287:

; 568  : 	   while(_istspace(*p)) p++; 

	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__iswspace
	add	esp, 4
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	je	SHORT $L81288
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $L81287
$L81288:

; 569  : 	   if (*p!=_T('=')) return true; 

	mov	eax, DWORD PTR _p$[ebp]
	xor	ecx, ecx
	mov	cx, WORD PTR [eax]
	cmp	ecx, 61					; 0000003dH
	je	SHORT $L81289
	mov	al, 1
	jmp	$L81283
$L81289:

; 570  : 	   p++; 

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
$L81291:

; 571  : 	   while(_istspace(*p)) p++; 

	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__iswspace
	add	esp, 4
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	je	SHORT $L81292
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $L81291
$L81292:

; 572  : 	   TCHAR c = *p; 

	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$[ebp], cx

; 573  : 	   switch(c) { 

	mov	edx, DWORD PTR _c$[ebp]
	and	edx, 65535				; 0000ffffH
	mov	DWORD PTR -16+[ebp], edx
	cmp	DWORD PTR -16+[ebp], 34			; 00000022H
	je	SHORT $L81298
	cmp	DWORD PTR -16+[ebp], 39			; 00000027H
	je	SHORT $L81298
	jmp	SHORT $L81302
$L81298:

; 574  : 	   case _T('\"'): 
; 575  : 	   case _T('\''): 
; 576  : 		   p++; 

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
$L81300:

; 577  : 		   while(*p && *p!=c) *pszValue++ = *p++; 

	mov	ecx, DWORD PTR _p$[ebp]
	xor	edx, edx
	mov	dx, WORD PTR [ecx]
	test	edx, edx
	je	SHORT $L81301
	mov	eax, DWORD PTR _p$[ebp]
	xor	ecx, ecx
	mov	cx, WORD PTR [eax]
	mov	edx, DWORD PTR _c$[ebp]
	and	edx, 65535				; 0000ffffH
	cmp	ecx, edx
	je	SHORT $L81301
	mov	eax, DWORD PTR _pszValue$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _pszValue$[ebp]
	add	eax, 2
	mov	DWORD PTR _pszValue$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $L81300
$L81301:

; 578  : 		   break; 

	jmp	SHORT $L81295
$L81302:

; 579  : 	   default: 
; 580  : 		   while(*p && (_istalnum(*p) || *p == _T('-'))) *pszValue++ = *p++; 

	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, eax
	mov	ax, WORD PTR [edx]
	test	eax, eax
	je	SHORT $L81305
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__iswalnum
	add	esp, 4
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81306
	mov	eax, DWORD PTR _p$[ebp]
	xor	ecx, ecx
	mov	cx, WORD PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $L81305
$L81306:
	mov	edx, DWORD PTR _pszValue$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR [edx], cx
	mov	edx, DWORD PTR _pszValue$[ebp]
	add	edx, 2
	mov	DWORD PTR _pszValue$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $L81302
$L81305:
$L81295:

; 583  : 	   *pszValue = _T('\0'); 

	mov	ecx, DWORD PTR _pszValue$[ebp]
	mov	WORD PTR [ecx], 0

; 584  : 	   return true; 

	mov	al, 1
$L81283:

; 585  :    } 

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ENDP		; CHtmlToRtf::GetAttribute
_TEXT	ENDS
PUBLIC	??_C@_0BN@PHC@wcsstr?$CIpszTag?0?5L?$CCstyle?$DN?$CC?$CJ?$CB?$DN0?$AA@ ; `string'
;	COMDAT ??_C@_0BN@PHC@wcsstr?$CIpszTag?0?5L?$CCstyle?$DN?$CC?$CJ?$CB?$DN0?$AA@
; File D:\_CODE\Shared\..\3rdparty\html2rtf.h
_DATA	SEGMENT
??_C@_0BN@PHC@wcsstr?$CIpszTag?0?5L?$CCstyle?$DN?$CC?$CJ?$CB?$DN0?$AA@ DB 'w'
	DB	'csstr(pszTag, L"style=")!=0', 00H		; `string'
_DATA	ENDS
;	COMDAT ?GetStyleAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z
_TEXT	SEGMENT
_this$ = -12
_p$ = -4
_c$ = -8
_pszTag$ = 8
_pszName$ = 12
_pszValue$ = 16
?GetStyleAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z PROC NEAR	; CHtmlToRtf::GetStyleAttribute, COMDAT

; 587  :    { 

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 588  : 	   // NOTE: The handling of the STYLE attribute is a bit simplistic 
; 589  : 	   //       and will only work for well-behaved and simple HTML. 
; 590  : 	   *pszValue = _T('\0'); 

	mov	eax, DWORD PTR _pszValue$[ebp]
	mov	WORD PTR [eax], 0

; 591  : 	   LPCTSTR p = _tcsstr(pszTag, pszName); 

	mov	esi, esp
	mov	ecx, DWORD PTR _pszName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pszTag$[ebp]
	push	edx
	call	DWORD PTR __imp__wcsstr
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _p$[ebp], eax

; 592  : 	   if (p==NULL) return false; 

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $L81310
	xor	al, al
	jmp	$L81308
$L81310:

; 593  : 	   p += _tcslen(pszName); 

	mov	esi, esp
	mov	eax, DWORD PTR _pszName$[ebp]
	push	eax
	call	DWORD PTR __imp__wcslen
	add	esp, 4
	cmp	esi, esp
	call	__chkesp
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _p$[ebp], edx
$L81312:

; 594  : 	   while(_istspace(*p)) p++; 

	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__iswspace
	add	esp, 4
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	je	SHORT $L81313
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $L81312
$L81313:

; 595  : 	   if (*p!=_T(':')) return false; 

	mov	eax, DWORD PTR _p$[ebp]
	xor	ecx, ecx
	mov	cx, WORD PTR [eax]
	cmp	ecx, 58					; 0000003aH
	je	SHORT $L81314
	xor	al, al
	jmp	$L81308
$L81314:

; 596  : 	   ATLASSERT(_tcsstr(pszTag, _T("style="))!=NULL); 

	mov	esi, esp
	push	OFFSET FLAT:??_C@_1O@DBMO@?$AAs?$AAt?$AAy?$AAl?$AAe?$AA?$DN?$AA?$AA@ ; `string'
	mov	edx, DWORD PTR _pszTag$[ebp]
	push	edx
	call	DWORD PTR __imp__wcsstr
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81318
	mov	esi, esp
	push	OFFSET FLAT:??_C@_0BN@PHC@wcsstr?$CIpszTag?0?5L?$CCstyle?$DN?$CC?$CJ?$CB?$DN0?$AA@ ; `string'
	push	0
	push	596					; 00000254H
	push	OFFSET FLAT:??_C@_0CH@OGBG@D?3?2_CODE?2Shared?2?4?4?23rdparty?2html@ ; `string'
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__chkesp
	cmp	eax, 1
	jne	SHORT $L81318
	int	3
$L81318:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $L81314

; 597  : 	   p++; 

	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
$L81321:

; 598  : 	   while(_istspace(*p)) p++; 

	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__iswspace
	add	esp, 4
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	je	SHORT $L81322
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $L81321
$L81322:

; 599  : 	   TCHAR c = *p; 

	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR _c$[ebp], ax

; 600  : 	   switch(c) { 

	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, 65535				; 0000ffffH
	mov	DWORD PTR -16+[ebp], ecx
	cmp	DWORD PTR -16+[ebp], 34			; 00000022H
	je	SHORT $L81328
	cmp	DWORD PTR -16+[ebp], 39			; 00000027H
	je	SHORT $L81328
	jmp	SHORT $L81332
$L81328:

; 601  : 	   case _T('\"'): 
; 602  : 	   case _T('\''): 
; 603  : 		   p++; 

	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
$L81330:

; 604  : 		   while(*p && *p!=c) *pszValue++ = *p++; 

	mov	eax, DWORD PTR _p$[ebp]
	xor	ecx, ecx
	mov	cx, WORD PTR [eax]
	test	ecx, ecx
	je	SHORT $L81331
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, eax
	mov	ax, WORD PTR [edx]
	mov	ecx, DWORD PTR _c$[ebp]
	and	ecx, 65535				; 0000ffffH
	cmp	eax, ecx
	je	SHORT $L81331
	mov	edx, DWORD PTR _pszValue$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR [edx], cx
	mov	edx, DWORD PTR _pszValue$[ebp]
	add	edx, 2
	mov	DWORD PTR _pszValue$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $L81330
$L81331:

; 605  : 		   break; 

	jmp	SHORT $L81325
$L81332:

; 606  : 	   default: 
; 607  : 		   while(*p && (_istalnum(*p) || *p == _T('-'))) *pszValue++ = *p++; 

	mov	ecx, DWORD PTR _p$[ebp]
	xor	edx, edx
	mov	dx, WORD PTR [ecx]
	test	edx, edx
	je	SHORT $L81335
	mov	esi, esp
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__iswalnum
	add	esp, 4
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81336
	mov	edx, DWORD PTR _p$[ebp]
	xor	eax, eax
	mov	ax, WORD PTR [edx]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $L81335
$L81336:
	mov	ecx, DWORD PTR _pszValue$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR [ecx], ax
	mov	ecx, DWORD PTR _pszValue$[ebp]
	add	ecx, 2
	mov	DWORD PTR _pszValue$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
	jmp	SHORT $L81332
$L81335:
$L81325:

; 610  : 	   *pszValue = _T('\0'); 

	mov	eax, DWORD PTR _pszValue$[ebp]
	mov	WORD PTR [eax], 0

; 611  : 	   return true; 

	mov	al, 1
$L81308:

; 612  :    } 

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetStyleAttribute@CHtmlToRtf@@QBE_NPBG0PAG@Z ENDP	; CHtmlToRtf::GetStyleAttribute
_TEXT	ENDS
PUBLIC	??_C@_1O@CHMO@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@HGJP@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAt?$AAe?$AAx?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@PHDK@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AAf?$AAa?$AAc?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@HNBC@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?$AA@ ; `string'
PUBLIC	?Find@?$CSimpleArray@K@ATL@@QBEHAAK@Z		; ATL::CSimpleArray<unsigned long>::Find
EXTRN	__imp__wcstol:NEAR
EXTRN	__imp__GetSysColor@4:NEAR
;	COMDAT ??_C@_1O@CHMO@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@
; File D:\_CODE\Shared\..\3rdparty\html2rtf.h
_DATA	SEGMENT
??_C@_1O@CHMO@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@ DB 'w', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 00H, 00H ; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BG@HGJP@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAt?$AAe?$AAx?$AAt?$AA?$AA@
_DATA	SEGMENT
??_C@_1BG@HGJP@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAt?$AAe?$AAx?$AAt?$AA?$AA@ DB 'w'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 't', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BG@PHDK@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AAf?$AAa?$AAc?$AAe?$AA?$AA@
_DATA	SEGMENT
??_C@_1BG@PHDK@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AAf?$AAa?$AAc?$AAe?$AA?$AA@ DB 'b'
	DB	00H, 'u', 00H, 't', 00H, 't', 00H, 'o', 00H, 'n', 00H, 'f', 00H
	DB	'a', 00H, 'c', 00H, 'e', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_1BG@HNBC@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?$AA@
_DATA	SEGMENT
??_C@_1BG@HNBC@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?$AA@ DB 'b'
	DB	00H, 'u', 00H, 't', 00H, 't', 00H, 'o', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 00H, 00H	; `string'
_DATA	ENDS
;	COMDAT ?GetColor@CHtmlToRtf@@QAEHPBG@Z
_TEXT	SEGMENT
_this$ = -20
_clr$ = -8
_pstrStop$81341 = -16
_BGR$81342 = -12
_iIndex$ = -4
_pszValue$ = 8
?GetColor@CHtmlToRtf@@QAEHPBG@Z PROC NEAR		; CHtmlToRtf::GetColor, COMDAT

; 614  :    { 

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 615  : 	   COLORREF clr; 
; 616  : 	   if (*pszValue == _T('#')) { 

	mov	eax, DWORD PTR _pszValue$[ebp]
	xor	ecx, ecx
	mov	cx, WORD PTR [eax]
	cmp	ecx, 35					; 00000023H
	jne	SHORT $L81340

; 617  : 		   pszValue++; 

	mov	edx, DWORD PTR _pszValue$[ebp]
	add	edx, 2
	mov	DWORD PTR _pszValue$[ebp], edx

; 618  : 		   LPTSTR pstrStop; 
; 619  : 		   DWORD BGR = _tcstol(pszValue, &pstrStop, 16); // convert hex value 

	mov	esi, esp
	push	16					; 00000010H
	lea	eax, DWORD PTR _pstrStop$81341[ebp]
	push	eax
	mov	ecx, DWORD PTR _pszValue$[ebp]
	push	ecx
	call	DWORD PTR __imp__wcstol
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _BGR$81342[ebp], eax

; 620  : 		   clr = RGB((BGR & 0xFF0000) >> 16, (BGR & 0xFF00) >> 8, BGR & 0xFF); 

	mov	edx, DWORD PTR _BGR$81342[ebp]
	and	edx, 16711680				; 00ff0000H
	shr	edx, 16					; 00000010H
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _BGR$81342[ebp]
	and	eax, 65280				; 0000ff00H
	shr	eax, 8
	and	eax, 255				; 000000ffH
	shl	eax, 8
	or	edx, eax
	mov	ecx, DWORD PTR _BGR$81342[ebp]
	and	ecx, 255				; 000000ffH
	and	ecx, 255				; 000000ffH
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	DWORD PTR _clr$[ebp], edx

; 622  : 	   else { 

	jmp	$L81361
$L81340:

; 623  : 		   // TODO: Implement more colors-by-name 
; 624  : 		   if (_tcscmp(pszValue, _T("window")) == 0) clr = ::GetSysColor(COLOR_WINDOW); 

	mov	esi, esp
	push	OFFSET FLAT:??_C@_1O@CHMO@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@ ; `string'
	mov	edx, DWORD PTR _pszValue$[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81350
	mov	esi, esp
	push	5
	call	DWORD PTR __imp__GetSysColor@4
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _clr$[ebp], eax

; 625  : 		   else if (_tcscmp(pszValue, _T("windowtext")) == 0) clr = ::GetSysColor(COLOR_WINDOWTEXT); 

	jmp	$L81361
$L81350:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_1BG@HGJP@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAt?$AAe?$AAx?$AAt?$AA?$AA@ ; `string'
	mov	eax, DWORD PTR _pszValue$[ebp]
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81353
	mov	esi, esp
	push	8
	call	DWORD PTR __imp__GetSysColor@4
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _clr$[ebp], eax

; 626  : 		   else if (_tcscmp(pszValue, _T("buttonface")) == 0) clr = ::GetSysColor(COLOR_BTNFACE); 

	jmp	SHORT $L81361
$L81353:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_1BG@PHDK@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AAf?$AAa?$AAc?$AAe?$AA?$AA@ ; `string'
	mov	ecx, DWORD PTR _pszValue$[ebp]
	push	ecx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81356
	mov	esi, esp
	push	15					; 0000000fH
	call	DWORD PTR __imp__GetSysColor@4
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _clr$[ebp], eax

; 627  : 		   else if (_tcscmp(pszValue, _T("buttontext")) == 0) clr = ::GetSysColor(COLOR_BTNTEXT); 

	jmp	SHORT $L81361
$L81356:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_1BG@HNBC@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?$AA@ ; `string'
	mov	edx, DWORD PTR _pszValue$[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81359
	mov	esi, esp
	push	18					; 00000012H
	call	DWORD PTR __imp__GetSysColor@4
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _clr$[ebp], eax

; 628  : 		   else clr = RGB(0,0,0); 

	jmp	SHORT $L81361
$L81359:
	mov	DWORD PTR _clr$[ebp], 0
$L81361:

; 630  : 	   int iIndex = m_aColors.Find(clr); 

	lea	eax, DWORD PTR _clr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Find@?$CSimpleArray@K@ATL@@QBEHAAK@Z	; ATL::CSimpleArray<unsigned long>::Find
	mov	DWORD PTR _iIndex$[ebp], eax

; 631  : 	   if (iIndex>=0) return iIndex; 

	cmp	DWORD PTR _iIndex$[ebp], 0
	jl	SHORT $L81369
	mov	eax, DWORD PTR _iIndex$[ebp]
	jmp	SHORT $L81338
$L81369:

; 632  : 	   m_aColors.Add(clr); 

	mov	ecx, DWORD PTR _clr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Add@?$CSimpleValArray@K@ATL@@QAEHK@Z	; ATL::CSimpleValArray<unsigned long>::Add

; 633  : 	   return m_aColors.GetSize() - 1; 

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetSize@?$CSimpleArray@K@ATL@@QBEHXZ	; ATL::CSimpleArray<unsigned long>::GetSize
	sub	eax, 1
$L81338:

; 634  :    } 

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetColor@CHtmlToRtf@@QAEHPBG@Z ENDP			; CHtmlToRtf::GetColor
_TEXT	ENDS
EXTRN	__imp__wcscpy:NEAR
EXTRN	__imp___wcsicmp:NEAR
;	COMDAT ?GetFontFace@CHtmlToRtf@@QAEHPBG@Z
_TEXT	SEGMENT
$T83297 = -188
_this$ = -192
_i$ = -4
_lf$ = -96
_pszValue$ = 8
?GetFontFace@CHtmlToRtf@@QAEHPBG@Z PROC NEAR		; CHtmlToRtf::GetFontFace, COMDAT

; 636  :    { 

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 637  : 	   for(int i = 0; i < m_aFonts.GetSize(); i++) { 

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L81373
$L81374:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L81373:
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetSize@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QBEHXZ ; ATL::CSimpleArray<tagLOGFONTW>::GetSize
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $L81375

; 638  : 		   if (_tcsicmp(m_aFonts[i].lfFaceName, pszValue) == 0) return i; 

	mov	esi, esp
	mov	ecx, DWORD PTR _pszValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	lea	eax, DWORD PTR $T83297[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QBE?AUtagLOGFONTW@@H@Z ; ATL::CSimpleValArray<tagLOGFONTW>::operator[]
	add	eax, 28					; 0000001cH
	push	eax
	call	DWORD PTR __imp___wcsicmp
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L81377
	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $L81371
$L81377:

; 639  : 	   } 

	jmp	SHORT $L81374
$L81375:

; 640  : 	   LOGFONT lf = { 0 }; 

	mov	DWORD PTR _lf$[ebp], 0
	mov	ecx, 22					; 00000016H
	xor	eax, eax
	lea	edi, DWORD PTR _lf$[ebp+4]
	rep stosd

; 641  : 	   _tcscpy(lf.lfFaceName, pszValue); 

	mov	esi, esp
	mov	ecx, DWORD PTR _pszValue$[ebp]
	push	ecx
	lea	edx, DWORD PTR _lf$[ebp+28]
	push	edx
	call	DWORD PTR __imp__wcscpy
	add	esp, 8
	cmp	esi, esp
	call	__chkesp

; 642  : 	   m_aFonts.Add(lf); 

	sub	esp, 92					; 0000005cH
	mov	ecx, 23					; 00000017H
	lea	esi, DWORD PTR _lf$[ebp]
	mov	edi, esp
	rep movsd
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAEHUtagLOGFONTW@@@Z ; ATL::CSimpleValArray<tagLOGFONTW>::Add

; 643  : 	   return m_aColors.GetSize() - 1; 

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?GetSize@?$CSimpleArray@K@ATL@@QBEHXZ	; ATL::CSimpleArray<unsigned long>::GetSize
	sub	eax, 1
$L81371:

; 644  :    } 

	pop	edi
	pop	esi
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetFontFace@CHtmlToRtf@@QAEHPBG@Z ENDP			; CHtmlToRtf::GetFontFace
_TEXT	ENDS
;	COMDAT ?GetFontSize@CHtmlToRtf@@QBEHPBG@Z
_TEXT	SEGMENT
_this$ = -8
_lFontSize$ = -4
_pszValue$ = 8
?GetFontSize@CHtmlToRtf@@QBEHPBG@Z PROC NEAR		; CHtmlToRtf::GetFontSize, COMDAT

; 646  :    { 

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 647  : 	   int lFontSize = GetInteger(pszValue); 

	mov	eax, DWORD PTR _pszValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInteger@CHtmlToRtf@@QBEHPBG@Z	; CHtmlToRtf::GetInteger
	mov	DWORD PTR _lFontSize$[ebp], eax

; 648  : 	   switch(lFontSize) { 

	mov	ecx, DWORD PTR _lFontSize$[ebp]
	mov	DWORD PTR -12+[ebp], ecx
	mov	edx, DWORD PTR -12+[ebp]
	sub	edx, 1
	mov	DWORD PTR -12+[ebp], edx
	cmp	DWORD PTR -12+[ebp], 6
	ja	SHORT $L81393
	mov	eax, DWORD PTR -12+[ebp]
	jmp	DWORD PTR $L83300[eax*4]
$L81386:

; 649  : 	   case 1: return 15; // 7.5 

	mov	eax, 15					; 0000000fH
	jmp	SHORT $L81383
$L81387:

; 650  : 	   case 2: return 20; // 10 

	mov	eax, 20					; 00000014H
	jmp	SHORT $L81383
$L81388:

; 651  : 	   case 3: return 24; // 12 

	mov	eax, 24					; 00000018H
	jmp	SHORT $L81383
$L81389:

; 652  : 	   case 4: return 27; // 13.5 

	mov	eax, 27					; 0000001bH
	jmp	SHORT $L81383
$L81390:

; 653  : 	   case 5: return 36; // 18 

	mov	eax, 36					; 00000024H
	jmp	SHORT $L81383
$L81391:

; 654  : 	   case 6: return 48; // 24 

	mov	eax, 48					; 00000030H
	jmp	SHORT $L81383
$L81392:

; 655  : 	   case 7: return 72; // 36 

	mov	eax, 72					; 00000048H
	jmp	SHORT $L81383
$L81393:

; 656  : 	   default: return 24; 

	mov	eax, 24					; 00000018H
$L81383:

; 658  :    } 

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
$L83300:
	DD	$L81386
	DD	$L81387
	DD	$L81388
	DD	$L81389
	DD	$L81390
	DD	$L81391
	DD	$L81392
?GetFontSize@CHtmlToRtf@@QBEHPBG@Z ENDP			; CHtmlToRtf::GetFontSize
_TEXT	ENDS
;	COMDAT ?GetFontSize@CHtmlToRtf@@QBEHH@Z
_TEXT	SEGMENT
_this$ = -4
_lFontSize$ = 8
?GetFontSize@CHtmlToRtf@@QBEHH@Z PROC NEAR		; CHtmlToRtf::GetFontSize, COMDAT

; 660  :    { 

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 661  : 	   // Ok, RTF is in half-points, so this is obviously an x2 algorithm. 
; 662  : 	   // But I'll leave it here if you need to customize... 
; 663  : 	   if (lFontSize>=36) return 72; 

	cmp	DWORD PTR _lFontSize$[ebp], 36		; 00000024H
	jl	SHORT $L81396
	mov	eax, 72					; 00000048H
	jmp	SHORT $L81395
$L81396:

; 664  : 	   if (lFontSize>=24) return 48; 

	cmp	DWORD PTR _lFontSize$[ebp], 24		; 00000018H
	jl	SHORT $L81397
	mov	eax, 48					; 00000030H
	jmp	SHORT $L81395
$L81397:

; 665  : 	   if (lFontSize>=18) return 36; 

	cmp	DWORD PTR _lFontSize$[ebp], 18		; 00000012H
	jl	SHORT $L81398
	mov	eax, 36					; 00000024H
	jmp	SHORT $L81395
$L81398:

; 666  : 	   if (lFontSize>=16) return 32; 

	cmp	DWORD PTR _lFontSize$[ebp], 16		; 00000010H
	jl	SHORT $L81399
	mov	eax, 32					; 00000020H
	jmp	SHORT $L81395
$L81399:

; 667  : 	   if (lFontSize>=14) return 28; 

	cmp	DWORD PTR _lFontSize$[ebp], 14		; 0000000eH
	jl	SHORT $L81400
	mov	eax, 28					; 0000001cH
	jmp	SHORT $L81395
$L81400:

; 668  : 	   if (lFontSize>=12) return 24; 

	cmp	DWORD PTR _lFontSize$[ebp], 12		; 0000000cH
	jl	SHORT $L81401
	mov	eax, 24					; 00000018H
	jmp	SHORT $L81395
$L81401:

; 669  : 	   if (lFontSize>=10) return 20; 

	cmp	DWORD PTR _lFontSize$[ebp], 10		; 0000000aH
	jl	SHORT $L81402
	mov	eax, 20					; 00000014H
	jmp	SHORT $L81395
$L81402:

; 670  : 	   if (lFontSize>=8) return 18; 

	cmp	DWORD PTR _lFontSize$[ebp], 8
	jl	SHORT $L81403
	mov	eax, 18					; 00000012H
	jmp	SHORT $L81395
$L81403:

; 671  : 	   return 24; // default 

	mov	eax, 24					; 00000018H
$L81395:

; 672  :    } 

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFontSize@CHtmlToRtf@@QBEHH@Z ENDP			; CHtmlToRtf::GetFontSize
_TEXT	ENDS
EXTRN	__imp___wtol:NEAR
;	COMDAT ?GetInteger@CHtmlToRtf@@QBEHPBG@Z
_TEXT	SEGMENT
_this$ = -4
_pszValue$ = 8
?GetInteger@CHtmlToRtf@@QBEHPBG@Z PROC NEAR		; CHtmlToRtf::GetInteger, COMDAT

; 674  :    { 

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 675  : 	   return _ttol(pszValue); 

	mov	esi, esp
	mov	eax, DWORD PTR _pszValue$[ebp]
	push	eax
	call	DWORD PTR __imp___wtol
	add	esp, 4
	cmp	esi, esp
	call	__chkesp

; 676  :    } 

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetInteger@CHtmlToRtf@@QBEHPBG@Z ENDP			; CHtmlToRtf::GetInteger
_TEXT	ENDS
;	COMDAT ??1LINK@CHtmlToRtf@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1LINK@CHtmlToRtf@@QAE@XZ PROC NEAR			; CHtmlToRtf::LINK::~LINK, COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
??1LINK@CHtmlToRtf@@QAE@XZ ENDP				; CHtmlToRtf::LINK::~LINK
_TEXT	ENDS
;	COMDAT ??1CONTEXT@CHtmlToRtf@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1CONTEXT@CHtmlToRtf@@QAE@XZ PROC NEAR			; CHtmlToRtf::CONTEXT::~CONTEXT, COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CONTEXT@CHtmlToRtf@@QAE@XZ ENDP			; CHtmlToRtf::CONTEXT::~CONTEXT
_TEXT	ENDS
;	COMDAT ??0LINK@CHtmlToRtf@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0LINK@CHtmlToRtf@@QAE@XZ PROC NEAR			; CHtmlToRtf::LINK::LINK, COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CString@@QAE@XZ			; CString::CString
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
??0LINK@CHtmlToRtf@@QAE@XZ ENDP				; CHtmlToRtf::LINK::LINK
_TEXT	ENDS
;	COMDAT ??0CONTEXT@CHtmlToRtf@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0CONTEXT@CHtmlToRtf@@QAE@ABU01@@Z PROC NEAR		; CHtmlToRtf::CONTEXT::CONTEXT, COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CString@@QAE@ABV0@@Z			; CString::CString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CONTEXT@CHtmlToRtf@@QAE@ABU01@@Z ENDP		; CHtmlToRtf::CONTEXT::CONTEXT
_TEXT	ENDS
;	COMDAT ??0LINK@CHtmlToRtf@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??0LINK@CHtmlToRtf@@QAE@ABU01@@Z PROC NEAR		; CHtmlToRtf::LINK::LINK, COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CString@@QAE@ABV0@@Z			; CString::CString
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
??0LINK@CHtmlToRtf@@QAE@ABU01@@Z ENDP			; CHtmlToRtf::LINK::LINK
_TEXT	ENDS
;	COMDAT ??4CONTEXT@CHtmlToRtf@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8
_this$ = -4
??4CONTEXT@CHtmlToRtf@@QAEAAU01@ABU01@@Z PROC NEAR	; CHtmlToRtf::CONTEXT::operator=, COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CString@@QAEABV0@ABV0@@Z		; CString::operator=
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [ecx+16], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [ecx+20], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CONTEXT@CHtmlToRtf@@QAEAAU01@ABU01@@Z ENDP		; CHtmlToRtf::CONTEXT::operator=
_TEXT	ENDS
PUBLIC	??0?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAE@XZ	; ATL::CSimpleValArray<tagLOGFONTW>::CSimpleValArray<tagLOGFONTW>
PUBLIC	??1?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAE@XZ	; ATL::CSimpleValArray<tagLOGFONTW>::~CSimpleValArray<tagLOGFONTW>
PUBLIC	??0?$CSimpleValArray@K@ATL@@QAE@XZ		; ATL::CSimpleValArray<unsigned long>::CSimpleValArray<unsigned long>
PUBLIC	??1?$CSimpleValArray@K@ATL@@QAE@XZ		; ATL::CSimpleValArray<unsigned long>::~CSimpleValArray<unsigned long>
PUBLIC	??0?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ ; ATL::CSimpleValArray<CHtmlToRtf::LINK>::CSimpleValArray<CHtmlToRtf::LINK>
;	COMDAT xdata$x
xdata$x	SEGMENT
$T83328	DD	019930520H
	DD	02H
	DD	FLAT:$T83330
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T83330	DD	0ffffffffH
	DD	FLAT:$L83324
	DD	00H
	DD	FLAT:$L83325
xdata$x	ENDS
;	COMDAT ??0CHtmlToRtf@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??0CHtmlToRtf@@QAE@XZ PROC NEAR				; CHtmlToRtf::CHtmlToRtf, COMDAT
	push	ebp
	mov	ebp, esp
	push	-1
	push	$L83329
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAE@XZ ; ATL::CSimpleValArray<tagLOGFONTW>::CSimpleValArray<tagLOGFONTW>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CSimpleValArray@K@ATL@@QAE@XZ	; ATL::CSimpleValArray<unsigned long>::CSimpleValArray<unsigned long>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ ; ATL::CSimpleValArray<CHtmlToRtf::LINK>::CSimpleValArray<CHtmlToRtf::LINK>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L83324:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAE@XZ ; ATL::CSimpleValArray<tagLOGFONTW>::~CSimpleValArray<tagLOGFONTW>
	ret	0
$L83325:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CSimpleValArray@K@ATL@@QAE@XZ	; ATL::CSimpleValArray<unsigned long>::~CSimpleValArray<unsigned long>
	ret	0
$L83329:
	mov	eax, OFFSET FLAT:$T83328
	jmp	___CxxFrameHandler
text$x	ENDS
??0CHtmlToRtf@@QAE@XZ ENDP				; CHtmlToRtf::CHtmlToRtf
PUBLIC	??1?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ ; ATL::CSimpleValArray<CHtmlToRtf::LINK>::~CSimpleValArray<CHtmlToRtf::LINK>
;	COMDAT xdata$x
xdata$x	SEGMENT
$T83339	DD	019930520H
	DD	02H
	DD	FLAT:$T83341
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T83341	DD	0ffffffffH
	DD	FLAT:$L83335
	DD	00H
	DD	FLAT:$L83336
xdata$x	ENDS
;	COMDAT ??1CHtmlToRtf@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16
__$EHRec$ = -12
??1CHtmlToRtf@@QAE@XZ PROC NEAR				; CHtmlToRtf::~CHtmlToRtf, COMDAT
	push	ebp
	mov	ebp, esp
	push	-1
	push	$L83340
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ ; ATL::CSimpleValArray<CHtmlToRtf::LINK>::~CSimpleValArray<CHtmlToRtf::LINK>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CSimpleValArray@K@ATL@@QAE@XZ	; ATL::CSimpleValArray<unsigned long>::~CSimpleValArray<unsigned long>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAE@XZ ; ATL::CSimpleValArray<tagLOGFONTW>::~CSimpleValArray<tagLOGFONTW>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L83335:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAE@XZ ; ATL::CSimpleValArray<tagLOGFONTW>::~CSimpleValArray<tagLOGFONTW>
	ret	0
$L83336:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CSimpleValArray@K@ATL@@QAE@XZ	; ATL::CSimpleValArray<unsigned long>::~CSimpleValArray<unsigned long>
	ret	0
$L83340:
	mov	eax, OFFSET FLAT:$T83339
	jmp	___CxxFrameHandler
text$x	ENDS
??1CHtmlToRtf@@QAE@XZ ENDP				; CHtmlToRtf::~CHtmlToRtf
PUBLIC	??0?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@XZ	; ATL::CSimpleArray<tagLOGFONTW>::CSimpleArray<tagLOGFONTW>
;	COMDAT ??0?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAE@XZ PROC NEAR ; ATL::CSimpleValArray<tagLOGFONTW>::CSimpleValArray<tagLOGFONTW>, COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@XZ ; ATL::CSimpleArray<tagLOGFONTW>::CSimpleArray<tagLOGFONTW>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAE@XZ ENDP	; ATL::CSimpleValArray<tagLOGFONTW>::CSimpleValArray<tagLOGFONTW>
_TEXT	ENDS
PUBLIC	??1?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@XZ	; ATL::CSimpleArray<tagLOGFONTW>::~CSimpleArray<tagLOGFONTW>
;	COMDAT ??1?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAE@XZ PROC NEAR ; ATL::CSimpleValArray<tagLOGFONTW>::~CSimpleValArray<tagLOGFONTW>, COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@XZ ; ATL::CSimpleArray<tagLOGFONTW>::~CSimpleArray<tagLOGFONTW>
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAE@XZ ENDP	; ATL::CSimpleValArray<tagLOGFONTW>::~CSimpleValArray<tagLOGFONTW>
_TEXT	ENDS
PUBLIC	??0?$CSimpleArray@K@ATL@@QAE@XZ			; ATL::CSimpleArray<unsigned long>::CSimpleArray<unsigned long>
;	COMDAT ??0?$CSimpleValArray@K@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$CSimpleValArray@K@ATL@@QAE@XZ PROC NEAR		; ATL::CSimpleValArray<unsigned long>::CSimpleValArray<unsigned long>, COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CSimpleArray@K@ATL@@QAE@XZ		; ATL::CSimpleArray<unsigned long>::CSimpleArray<unsigned long>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CSimpleValArray@K@ATL@@QAE@XZ ENDP			; ATL::CSimpleValArray<unsigned long>::CSimpleValArray<unsigned long>
_TEXT	ENDS
PUBLIC	??1?$CSimpleArray@K@ATL@@QAE@XZ			; ATL::CSimpleArray<unsigned long>::~CSimpleArray<unsigned long>
;	COMDAT ??1?$CSimpleValArray@K@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$CSimpleValArray@K@ATL@@QAE@XZ PROC NEAR		; ATL::CSimpleValArray<unsigned long>::~CSimpleValArray<unsigned long>, COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CSimpleArray@K@ATL@@QAE@XZ		; ATL::CSimpleArray<unsigned long>::~CSimpleArray<unsigned long>
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CSimpleValArray@K@ATL@@QAE@XZ ENDP			; ATL::CSimpleValArray<unsigned long>::~CSimpleValArray<unsigned long>
_TEXT	ENDS
PUBLIC	??0?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ ; ATL::CSimpleArray<CHtmlToRtf::LINK>::CSimpleArray<CHtmlToRtf::LINK>
;	COMDAT ??0?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ PROC NEAR ; ATL::CSimpleValArray<CHtmlToRtf::LINK>::CSimpleValArray<CHtmlToRtf::LINK>, COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ ; ATL::CSimpleArray<CHtmlToRtf::LINK>::CSimpleArray<CHtmlToRtf::LINK>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ ENDP ; ATL::CSimpleValArray<CHtmlToRtf::LINK>::CSimpleValArray<CHtmlToRtf::LINK>
_TEXT	ENDS
PUBLIC	??1?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ ; ATL::CSimpleArray<CHtmlToRtf::LINK>::~CSimpleArray<CHtmlToRtf::LINK>
;	COMDAT ??1?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ PROC NEAR ; ATL::CSimpleValArray<CHtmlToRtf::LINK>::~CSimpleValArray<CHtmlToRtf::LINK>, COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ ; ATL::CSimpleArray<CHtmlToRtf::LINK>::~CSimpleArray<CHtmlToRtf::LINK>
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ ENDP ; ATL::CSimpleValArray<CHtmlToRtf::LINK>::~CSimpleValArray<CHtmlToRtf::LINK>
_TEXT	ENDS
EXTRN	??H@YG?AVCString@@ABV0@0@Z:NEAR			; operator+
;	COMDAT data
; File D:\_CODE\Shared\Rtf2HtmlConverter.cpp
data	SEGMENT
$SG81973 DB	'h', 00H, 't', 00H, 'm', 00H, 'l', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, 't', 00H, 'f', 00H, '_', 00H, 's', 00H, 'a', 00H, 'u'
	DB	00H, 't', 00H, 'i', 00H, 'n', 00H, 's', 00H, 'o', 00H, 'f', 00H
	DB	't', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG81977 DB	'htmltortf_file', 00H
	ORG $+1
$SG81985 DB	'flushlist', 00H
	ORG $+2
$SG81992 DB	'.', 00H, 'r', 00H, 't', 00H, 'f', 00H, 00H, 00H
data	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T83371	DD	019930520H
	DD	05H
	DD	FLAT:$T83373
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T83373	DD	0ffffffffH
	DD	FLAT:$L83366
	DD	00H
	DD	FLAT:$L83367
	DD	01H
	DD	FLAT:$L83368
	DD	00H
	DD	FLAT:$L83368
	DD	03H
	DD	FLAT:$L83369
xdata$x	ENDS
;	COMDAT ?ConvertHtmlToRtfWithSautin@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z
_TEXT	SEGMENT
_szHtmlFile$ = 8
_sRtf$ = 16
_szUniqueDir$ = 20
_this$ = -1784
_hMod$ = -20
_pfnConvert$ = -32
_pfnFlush$ = -28
_opt$ = -1772
_sOutputDir$ = -24
_sTempRtf$ = -36
_sHtmlFile$ = -16
$T83364 = -1776
$T83365 = -1780
__$EHRec$ = -12
?ConvertHtmlToRtfWithSautin@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z PROC NEAR ; CRtfHtmlConverter::ConvertHtmlToRtfWithSautin, COMDAT

; 635  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L83372
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 1780				; 000006f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1792]
	mov	ecx, 445				; 000001bdH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 636  : 	// load library
; 637  : 	HINSTANCE hMod = LoadLibrary(_T("htmltortf_sautinsoft.dll"));

	mov	esi, esp
	push	OFFSET FLAT:$SG81973
	call	DWORD PTR __imp__LoadLibraryW@4
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _hMod$[ebp], eax

; 638  : 	
; 639  : 	if (hMod==NULL) 

	cmp	DWORD PTR _hMod$[ebp], 0
	jne	SHORT $L81974

; 640  : 		return FALSE;

	xor	eax, eax
	jmp	$L81971
$L81974:

; 641  : 	
; 642  : 	// get function convert
; 643  : 	FNHTML2RTF_FILE pfnConvert = (FNHTML2RTF_FILE)GetProcAddress(hMod, "htmltortf_file");

	mov	esi, esp
	push	OFFSET FLAT:$SG81977
	mov	eax, DWORD PTR _hMod$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _pfnConvert$[ebp], eax
$L81978:

; 644  : 	ASSERT(pfnConvert);

	cmp	DWORD PTR _pfnConvert$[ebp], 0
	jne	SHORT $L81981
	push	644					; 00000284H
	push	OFFSET FLAT:_THIS_FILE
	call	?AfxAssertFailedLine@@YGHPBDH@Z		; AfxAssertFailedLine
	test	eax, eax
	je	SHORT $L81981
	int	3
$L81981:
	xor	ecx, ecx
	test	ecx, ecx
	jne	SHORT $L81978

; 645  : 	
; 646  : 	if (!pfnConvert)

	cmp	DWORD PTR _pfnConvert$[ebp], 0
	jne	SHORT $L81982

; 647  : 		return FALSE;

	xor	eax, eax
	jmp	$L81971
$L81982:

; 648  : 	
; 649  : 	// get function to release memory
; 650  : 	FNFLUSHLIST pfnFlush = (FNFLUSHLIST)GetProcAddress(hMod, "flushlist");

	mov	esi, esp
	push	OFFSET FLAT:$SG81985
	mov	edx, DWORD PTR _hMod$[ebp]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _pfnFlush$[ebp], eax

; 651  : 	
; 652  : 	if (!pfnFlush)

	cmp	DWORD PTR _pfnFlush$[ebp], 0
	jne	SHORT $L81986

; 653  : 		return FALSE;

	xor	eax, eax
	jmp	$L81971
$L81986:

; 654  : 	
; 655  : 	sautin_html2rtf_options opt = { 0 };

	mov	DWORD PTR _opt$[ebp], 0
	mov	ecx, 433				; 000001b1H
	xor	eax, eax
	lea	edi, DWORD PTR _opt$[ebp+4]
	rep stosd

; 656  : 	
; 657  : 	opt.BorderVisibility		= sautin_html2rtf_options::Hidden;

	mov	DWORD PTR _opt$[ebp+56], 0

; 658  : 	opt.Encoding				= sautin_html2rtf_options::UTF_8;

	mov	DWORD PTR _opt$[ebp+84], 5

; 659  : 	opt.OutputTextFormat		= sautin_html2rtf_options::Rtf;

	mov	DWORD PTR _opt$[ebp+88], 0

; 660  : 	opt.FontFace				= 0;

	mov	DWORD PTR _opt$[ebp+68], 0

; 661  : 	opt.FontSize				= 10;

	mov	DWORD PTR _opt$[ebp+72], 10		; 0000000aH

; 662  : 	opt.ImageCompatible			= 0;

	mov	DWORD PTR _opt$[ebp+96], 0

; 663  : 	opt.PageAlignment			= 0;

	mov	DWORD PTR _opt$[ebp+76], 0

; 664  : 	opt.PageMarginBottom		= 10;

	mov	DWORD PTR _opt$[ebp+52], 10		; 0000000aH

; 665  : 	opt.PageMarginLeft			= 10;

	mov	DWORD PTR _opt$[ebp+40], 10		; 0000000aH

; 666  : 	opt.PageMarginRight			= 10;

	mov	DWORD PTR _opt$[ebp+44], 10		; 0000000aH

; 667  : 	opt.PageMarginTop			= 10;

	mov	DWORD PTR _opt$[ebp+48], 10		; 0000000aH

; 668  : 	opt.PageNumbers				= 1;

	mov	DWORD PTR _opt$[ebp+100], 1

; 669  : 	opt.PageNumbersAlignH		= 2;

	mov	DWORD PTR _opt$[ebp+1060], 2

; 670  : 	opt.PageNumbersAlignV		= 5;

	mov	DWORD PTR _opt$[ebp+1056], 5

; 671  : 	opt.PageOrientation			= 0;

	mov	DWORD PTR _opt$[ebp+60], 0

; 672  : 	opt.PageSize				= 4;

	mov	DWORD PTR _opt$[ebp+64], 4

; 673  : 	opt.RtfLanguage				= 1033;

	mov	DWORD PTR _opt$[ebp+80], 1033		; 00000409H

; 674  : 	opt.TableCellPadding		= 2;

	mov	DWORD PTR _opt$[ebp+1728], 2

; 675  : 	
; 676  : 	opt.PreserveAlignment		= TRUE;

	mov	DWORD PTR _opt$[ebp+28], 1

; 677  : 	opt.PreserveBackgroundColor	= TRUE;

	mov	DWORD PTR _opt$[ebp+24], 1

; 678  : 	opt.PreserveFontColor		= TRUE;

	mov	DWORD PTR _opt$[ebp+20], 1

; 679  : 	opt.PreserveFontFace		= TRUE;

	mov	DWORD PTR _opt$[ebp+12], 1

; 680  : 	opt.PreserveFontSize		= TRUE;

	mov	DWORD PTR _opt$[ebp+16], 1

; 681  : 	opt.PreserveHR				= TRUE;

	mov	DWORD PTR _opt$[ebp+1064], 1

; 682  : 	opt.PreserveHyperlinks		= TRUE;

	mov	DWORD PTR _opt$[ebp+8], 1

; 683  : 	opt.PreserveImages			= TRUE;

	mov	DWORD PTR _opt$[ebp+4], 1

; 684  : 	opt.PreserveNestedTables	= TRUE;

	mov	DWORD PTR _opt$[ebp+36], 1

; 685  : 	opt.PreservePageBreaks		= TRUE;

	mov	DWORD PTR _opt$[ebp+92], 1

; 686  : 	opt.PreserveTables			= TRUE;

	mov	DWORD PTR _opt$[ebp], 1

; 687  : 	opt.PreserveTableWidth		= TRUE;

	mov	DWORD PTR _opt$[ebp+32], 1

; 688  : 	opt.PreserveHttpImages		= TRUE;

	mov	DWORD PTR _opt$[ebp+1732], 1

; 689  : 	opt.CreateTraceFile			= FALSE;

	mov	DWORD PTR _opt$[ebp+1072], 0

; 690  : 	
; 691  : 	CString sOutputDir(szUniqueDir);

	mov	eax, DWORD PTR _szUniqueDir$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sOutputDir$[ebp]
	call	??0CString@@QAE@PBG@Z			; CString::CString
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 692  : 	FileMisc::TerminatePath(sOutputDir);

	lea	ecx, DWORD PTR _sOutputDir$[ebp]
	push	ecx
	call	?TerminatePath@FileMisc@@YAAAVCString@@AAV2@@Z ; FileMisc::TerminatePath
	add	esp, 4

; 693  : 	
; 694  : 	CString sTempRtf(sOutputDir + HTML2RTF_FNAME + _T(".rtf"));

	push	OFFSET FLAT:$SG81992
	push	OFFSET FLAT:_HTML2RTF_FNAME
	lea	edx, DWORD PTR _sOutputDir$[ebp]
	push	edx
	lea	eax, DWORD PTR $T83364[ebp]
	push	eax
	call	??H@YG?AVCString@@ABV0@0@Z		; operator+
	mov	DWORD PTR -1788+[ebp], eax
	mov	ecx, DWORD PTR -1788+[ebp]
	mov	DWORD PTR -1792+[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR -1792+[ebp]
	push	edx
	lea	eax, DWORD PTR _sTempRtf$[ebp]
	push	eax
	call	??H@YG?AVCString@@ABV0@PBG@Z		; operator+
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T83364[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString

; 695  : 
; 696  : 	// input file must be ansi encoded
; 697  : 	CString sHtmlFile(szHtmlFile);

	mov	ecx, DWORD PTR _szHtmlFile$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _sHtmlFile$[ebp]
	call	??0CString@@QAE@PBG@Z			; CString::CString
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 698  : #ifdef _UNICODE
; 699  : 	Misc::EncodeAsMultiByte(sHtmlFile, CP_UTF8);

	push	65001					; 0000fde9H
	lea	edx, DWORD PTR _sHtmlFile$[ebp]
	push	edx
	call	?EncodeAsMultiByte@Misc@@YAAAVCString@@AAV2@I@Z ; Misc::EncodeAsMultiByte
	add	esp, 8

; 700  : #endif
; 701  : 
; 702  : 	// converting
; 703  : 	if (0 == pfnConvert((LPSTR)(LPCTSTR)sHtmlFile, (LPSTR)(LPCTSTR)sTempRtf, opt))

	mov	ebx, esp
	sub	esp, 1736				; 000006c8H
	mov	ecx, 434				; 000001b2H
	lea	esi, DWORD PTR _opt$[ebp]
	mov	edi, esp
	rep movsd
	lea	ecx, DWORD PTR _sTempRtf$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	lea	ecx, DWORD PTR _sHtmlFile$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	call	DWORD PTR _pfnConvert$[ebp]
	add	esp, 1744				; 000006d0H
	cmp	ebx, esp
	call	__chkesp
	test	eax, eax
	jne	SHORT $L82001
$L81999:

; 705  : 		VERIFY(FileMisc::LoadFile(sTempRtf, sRtf));

	push	0
	mov	eax, DWORD PTR _sRtf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _sTempRtf$[ebp]
	call	??BCString@@QBEPBGXZ			; CString::operator unsigned short const *
	push	eax
	call	?LoadFile@FileMisc@@YAHPBGAAVCString@@H@Z ; FileMisc::LoadFile
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $L82002
	push	705					; 000002c1H
	push	OFFSET FLAT:_THIS_FILE
	call	?AfxAssertFailedLine@@YGHPBDH@Z		; AfxAssertFailedLine
	test	eax, eax
	je	SHORT $L82002
	int	3
$L82002:
	xor	ecx, ecx
	test	ecx, ecx
	jne	SHORT $L81999
$L82001:

; 707  : 
; 708  : 	// release memory
; 709  : 	pfnFlush();

	mov	esi, esp
	call	DWORD PTR _pfnFlush$[ebp]
	cmp	esi, esp
	call	__chkesp

; 710  : 	
; 711  : 	return !sRtf.IsEmpty();

	mov	ecx, DWORD PTR _sRtf$[ebp]
	call	?IsEmpty@CString@@QBEHXZ		; CString::IsEmpty
	neg	eax
	sbb	eax, eax
	inc	eax
	mov	DWORD PTR $T83365[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _sHtmlFile$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _sTempRtf$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _sOutputDir$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	mov	eax, DWORD PTR $T83365[ebp]
$L81971:

; 712  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 1792				; 00000700H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L83366:
	lea	ecx, DWORD PTR _sOutputDir$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83367:
	lea	ecx, DWORD PTR $T83364[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83368:
	lea	ecx, DWORD PTR _sTempRtf$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83369:
	lea	ecx, DWORD PTR _sHtmlFile$[ebp]
	call	??1CString@@QAE@XZ			; CString::~CString
	ret	0
$L83372:
	mov	eax, OFFSET FLAT:$T83371
	jmp	___CxxFrameHandler
text$x	ENDS
?ConvertHtmlToRtfWithSautin@CRtfHtmlConverter@@IAEHPBG0AAVCString@@0@Z ENDP ; CRtfHtmlConverter::ConvertHtmlToRtfWithSautin
PUBLIC	?Add@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEHAAUtagLOGFONTW@@@Z ; ATL::CSimpleArray<tagLOGFONTW>::Add
;	COMDAT ?Add@?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAEHUtagLOGFONTW@@@Z
_TEXT	SEGMENT
_this$ = -4
_t$ = 8
?Add@?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAEHUtagLOGFONTW@@@Z PROC NEAR ; ATL::CSimpleValArray<tagLOGFONTW>::Add, COMDAT

; 2220 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2221 : 		return CSimpleArray< T >::Add(t);

	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEHAAUtagLOGFONTW@@@Z ; ATL::CSimpleArray<tagLOGFONTW>::Add

; 2222 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	92					; 0000005cH
?Add@?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QAEHUtagLOGFONTW@@@Z ENDP ; ATL::CSimpleValArray<tagLOGFONTW>::Add
_TEXT	ENDS
PUBLIC	??A?$CSimpleArray@UtagLOGFONTW@@@ATL@@QBEAAUtagLOGFONTW@@H@Z ; ATL::CSimpleArray<tagLOGFONTW>::operator[]
;	COMDAT ??A?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QBE?AUtagLOGFONTW@@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8
_this$ = -4
_nIndex$ = 12
??A?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QBE?AUtagLOGFONTW@@H@Z PROC NEAR ; ATL::CSimpleValArray<tagLOGFONTW>::operator[], COMDAT

; 2228 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2229 : 		return CSimpleArray< T >::operator[](nIndex);

	mov	eax, DWORD PTR _nIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CSimpleArray@UtagLOGFONTW@@@ATL@@QBEAAUtagLOGFONTW@@H@Z ; ATL::CSimpleArray<tagLOGFONTW>::operator[]
	mov	esi, eax
	mov	ecx, 23					; 00000017H
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2230 : 	}

	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	8
??A?$CSimpleValArray@UtagLOGFONTW@@@ATL@@QBE?AUtagLOGFONTW@@H@Z ENDP ; ATL::CSimpleValArray<tagLOGFONTW>::operator[]
_TEXT	ENDS
;	COMDAT ??0?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@XZ PROC NEAR	; ATL::CSimpleArray<tagLOGFONTW>::CSimpleArray<tagLOGFONTW>, COMDAT

; 2117 : 	{ }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@XZ ENDP	; ATL::CSimpleArray<tagLOGFONTW>::CSimpleArray<tagLOGFONTW>
_TEXT	ENDS
;	COMDAT ??1?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@XZ PROC NEAR	; ATL::CSimpleArray<tagLOGFONTW>::~CSimpleArray<tagLOGFONTW>, COMDAT

; 2120 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2121 : 		RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEXXZ ; ATL::CSimpleArray<tagLOGFONTW>::RemoveAll

; 2122 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@XZ ENDP	; ATL::CSimpleArray<tagLOGFONTW>::~CSimpleArray<tagLOGFONTW>
_TEXT	ENDS
;	COMDAT ?GetSize@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetSize@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QBEHXZ PROC NEAR ; ATL::CSimpleArray<tagLOGFONTW>::GetSize, COMDAT

; 2126 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2127 : 		return m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 2128 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QBEHXZ ENDP	; ATL::CSimpleArray<tagLOGFONTW>::GetSize
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8
_i$82210 = -4
?RemoveAll@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEXXZ PROC NEAR ; ATL::CSimpleArray<tagLOGFONTW>::RemoveAll, COMDAT

; 2163 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2164 : 		if(m_aT != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L82209

; 2166 : 			for(int i = 0; i < m_nSize; i++)

	mov	DWORD PTR _i$82210[ebp], 0
	jmp	SHORT $L82211
$L82212:
	mov	ecx, DWORD PTR _i$82210[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$82210[ebp], ecx
$L82211:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$82210[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jge	SHORT $L82213

; 2167 : 				m_aT[i].~T();

	jmp	SHORT $L82212
$L82213:

; 2168 : 			free(m_aT);

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__chkesp

; 2169 : 			m_aT = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$L82209:

; 2171 : 		m_nSize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 2172 : 		m_nAllocSize = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 2173 : 	}

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEXXZ ENDP ; ATL::CSimpleArray<tagLOGFONTW>::RemoveAll
_TEXT	ENDS
PUBLIC	?Add@?$CSimpleArray@K@ATL@@QAEHAAK@Z		; ATL::CSimpleArray<unsigned long>::Add
;	COMDAT ?Add@?$CSimpleValArray@K@ATL@@QAEHK@Z
_TEXT	SEGMENT
_this$ = -4
_t$ = 8
?Add@?$CSimpleValArray@K@ATL@@QAEHK@Z PROC NEAR		; ATL::CSimpleValArray<unsigned long>::Add, COMDAT

; 2220 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2221 : 		return CSimpleArray< T >::Add(t);

	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CSimpleArray@K@ATL@@QAEHAAK@Z	; ATL::CSimpleArray<unsigned long>::Add

; 2222 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CSimpleValArray@K@ATL@@QAEHK@Z ENDP		; ATL::CSimpleValArray<unsigned long>::Add
_TEXT	ENDS
PUBLIC	??A?$CSimpleArray@K@ATL@@QBEAAKH@Z		; ATL::CSimpleArray<unsigned long>::operator[]
;	COMDAT ??A?$CSimpleValArray@K@ATL@@QBEKH@Z
_TEXT	SEGMENT
_this$ = -4
_nIndex$ = 8
??A?$CSimpleValArray@K@ATL@@QBEKH@Z PROC NEAR		; ATL::CSimpleValArray<unsigned long>::operator[], COMDAT

; 2228 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2229 : 		return CSimpleArray< T >::operator[](nIndex);

	mov	eax, DWORD PTR _nIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CSimpleArray@K@ATL@@QBEAAKH@Z	; ATL::CSimpleArray<unsigned long>::operator[]
	mov	eax, DWORD PTR [eax]

; 2230 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CSimpleValArray@K@ATL@@QBEKH@Z ENDP		; ATL::CSimpleValArray<unsigned long>::operator[]
_TEXT	ENDS
;	COMDAT ??0?$CSimpleArray@K@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$CSimpleArray@K@ATL@@QAE@XZ PROC NEAR		; ATL::CSimpleArray<unsigned long>::CSimpleArray<unsigned long>, COMDAT

; 2117 : 	{ }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CSimpleArray@K@ATL@@QAE@XZ ENDP			; ATL::CSimpleArray<unsigned long>::CSimpleArray<unsigned long>
_TEXT	ENDS
;	COMDAT ??1?$CSimpleArray@K@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$CSimpleArray@K@ATL@@QAE@XZ PROC NEAR		; ATL::CSimpleArray<unsigned long>::~CSimpleArray<unsigned long>, COMDAT

; 2120 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2121 : 		RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CSimpleArray@K@ATL@@QAEXXZ	; ATL::CSimpleArray<unsigned long>::RemoveAll

; 2122 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CSimpleArray@K@ATL@@QAE@XZ ENDP			; ATL::CSimpleArray<unsigned long>::~CSimpleArray<unsigned long>
_TEXT	ENDS
;	COMDAT ?GetSize@?$CSimpleArray@K@ATL@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetSize@?$CSimpleArray@K@ATL@@QBEHXZ PROC NEAR		; ATL::CSimpleArray<unsigned long>::GetSize, COMDAT

; 2126 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2127 : 		return m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 2128 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CSimpleArray@K@ATL@@QBEHXZ ENDP		; ATL::CSimpleArray<unsigned long>::GetSize
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CSimpleArray@K@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8
_i$82227 = -4
?RemoveAll@?$CSimpleArray@K@ATL@@QAEXXZ PROC NEAR	; ATL::CSimpleArray<unsigned long>::RemoveAll, COMDAT

; 2163 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2164 : 		if(m_aT != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L82226

; 2166 : 			for(int i = 0; i < m_nSize; i++)

	mov	DWORD PTR _i$82227[ebp], 0
	jmp	SHORT $L82228
$L82229:
	mov	ecx, DWORD PTR _i$82227[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$82227[ebp], ecx
$L82228:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$82227[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jge	SHORT $L82230

; 2167 : 				m_aT[i].~T();

	jmp	SHORT $L82229
$L82230:

; 2168 : 			free(m_aT);

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__chkesp

; 2169 : 			m_aT = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$L82226:

; 2171 : 		m_nSize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 2172 : 		m_nAllocSize = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 2173 : 	}

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CSimpleArray@K@ATL@@QAEXXZ ENDP		; ATL::CSimpleArray<unsigned long>::RemoveAll
_TEXT	ENDS
;	COMDAT ?Find@?$CSimpleArray@K@ATL@@QBEHAAK@Z
_TEXT	SEGMENT
_this$ = -8
_i$ = -4
_t$ = 8
?Find@?$CSimpleArray@K@ATL@@QBEHAAK@Z PROC NEAR		; ATL::CSimpleArray<unsigned long>::Find, COMDAT

; 2204 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2205 : 		for(int i = 0; i < m_nSize; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $L82234
$L82235:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$L82234:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jge	SHORT $L82236

; 2207 : 			if(m_aT[i] == t)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _t$[ebp]
	mov	ecx, DWORD PTR [ecx+edx*4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $L82237

; 2208 : 				return i;

	mov	eax, DWORD PTR _i$[ebp]
	jmp	SHORT $L82232
$L82237:

; 2209 : 		}

	jmp	SHORT $L82235
$L82236:

; 2210 : 		return -1;  // not found

	or	eax, -1
$L82232:

; 2211 : 	}

	mov	esp, ebp
	pop	ebp
	ret	4
?Find@?$CSimpleArray@K@ATL@@QBEHAAK@Z ENDP		; ATL::CSimpleArray<unsigned long>::Find
_TEXT	ENDS
PUBLIC	?Add@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEHAAULINK@CHtmlToRtf@@@Z ; ATL::CSimpleArray<CHtmlToRtf::LINK>::Add
;	COMDAT xdata$x
; File C:\Program Files (x86)\Microsoft Visual Studio\VC98\ATL\INCLUDE\atlbase.h
xdata$x	SEGMENT
$T83408	DD	019930520H
	DD	01H
	DD	FLAT:$T83410
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	ORG $+4
$T83410	DD	0ffffffffH
	DD	FLAT:$L83406
xdata$x	ENDS
;	COMDAT ?Add@?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAEHULINK@CHtmlToRtf@@@Z
_TEXT	SEGMENT
_this$ = -20
$T83405 = -16
__$EHRec$ = -12
_t$ = 8
?Add@?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAEHULINK@CHtmlToRtf@@@Z PROC NEAR ; ATL::CSimpleValArray<CHtmlToRtf::LINK>::Add, COMDAT

; 2220 : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	$L83409
	mov	eax, DWORD PTR fs:__except_list
	push	eax
	mov	DWORD PTR fs:__except_list, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2221 : 		return CSimpleArray< T >::Add(t);

	lea	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEHAAULINK@CHtmlToRtf@@@Z ; ATL::CSimpleArray<CHtmlToRtf::LINK>::Add
	mov	DWORD PTR $T83405[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _t$[ebp]
	call	??1LINK@CHtmlToRtf@@QAE@XZ		; CHtmlToRtf::LINK::~LINK
	mov	eax, DWORD PTR $T83405[ebp]

; 2222 : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:__except_list, ecx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L83406:
	lea	ecx, DWORD PTR _t$[ebp]
	call	??1LINK@CHtmlToRtf@@QAE@XZ		; CHtmlToRtf::LINK::~LINK
	ret	0
$L83409:
	mov	eax, OFFSET FLAT:$T83408
	jmp	___CxxFrameHandler
text$x	ENDS
?Add@?$CSimpleValArray@ULINK@CHtmlToRtf@@@ATL@@QAEHULINK@CHtmlToRtf@@@Z ENDP ; ATL::CSimpleValArray<CHtmlToRtf::LINK>::Add
;	COMDAT ??0?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ PROC NEAR ; ATL::CSimpleArray<CHtmlToRtf::LINK>::CSimpleArray<CHtmlToRtf::LINK>, COMDAT

; 2117 : 	{ }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ ENDP	; ATL::CSimpleArray<CHtmlToRtf::LINK>::CSimpleArray<CHtmlToRtf::LINK>
_TEXT	ENDS
;	COMDAT ??1?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ PROC NEAR ; ATL::CSimpleArray<CHtmlToRtf::LINK>::~CSimpleArray<CHtmlToRtf::LINK>, COMDAT

; 2120 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2121 : 		RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEXXZ ; ATL::CSimpleArray<CHtmlToRtf::LINK>::RemoveAll

; 2122 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@XZ ENDP	; ATL::CSimpleArray<CHtmlToRtf::LINK>::~CSimpleArray<CHtmlToRtf::LINK>
_TEXT	ENDS
PUBLIC	??_GLINK@CHtmlToRtf@@QAEPAXI@Z			; CHtmlToRtf::LINK::`scalar deleting destructor'
;	COMDAT ?RemoveAll@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8
_i$82253 = -4
?RemoveAll@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEXXZ PROC NEAR ; ATL::CSimpleArray<CHtmlToRtf::LINK>::RemoveAll, COMDAT

; 2163 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2164 : 		if(m_aT != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L82252

; 2166 : 			for(int i = 0; i < m_nSize; i++)

	mov	DWORD PTR _i$82253[ebp], 0
	jmp	SHORT $L82254
$L82255:
	mov	ecx, DWORD PTR _i$82253[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$82253[ebp], ecx
$L82254:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$82253[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jge	SHORT $L82256

; 2167 : 				m_aT[i].~T();

	push	0
	mov	ecx, DWORD PTR _i$82253[ebp]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	ecx, eax
	call	??_GLINK@CHtmlToRtf@@QAEPAXI@Z		; CHtmlToRtf::LINK::`scalar deleting destructor'
	jmp	SHORT $L82255
$L82256:

; 2168 : 			free(m_aT);

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__chkesp

; 2169 : 			m_aT = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$L82252:

; 2171 : 		m_nSize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 2172 : 		m_nAllocSize = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 2173 : 	}

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEXXZ ENDP ; ATL::CSimpleArray<CHtmlToRtf::LINK>::RemoveAll
_TEXT	ENDS
;	COMDAT ??0?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??0?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@XZ PROC NEAR ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::CSimpleArray<CHtmlToRtf::CONTEXT>, COMDAT

; 2117 : 	{ }

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@XZ ENDP ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::CSimpleArray<CHtmlToRtf::CONTEXT>
_TEXT	ENDS
PUBLIC	?RemoveAll@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEXXZ ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::RemoveAll
;	COMDAT ??1?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4
??1?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@XZ PROC NEAR ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::~CSimpleArray<CHtmlToRtf::CONTEXT>, COMDAT

; 2120 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2121 : 		RemoveAll();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RemoveAll@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEXXZ ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::RemoveAll

; 2122 : 	}

	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@XZ ENDP ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::~CSimpleArray<CHtmlToRtf::CONTEXT>
_TEXT	ENDS
;	COMDAT ?GetSize@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4
?GetSize@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QBEHXZ PROC NEAR ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::GetSize, COMDAT

; 2126 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2127 : 		return m_nSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 2128 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QBEHXZ ENDP ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::GetSize
_TEXT	ENDS
PUBLIC	?SetAtIndex@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEXHAAUCONTEXT@CHtmlToRtf@@@Z ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::SetAtIndex
EXTRN	__imp__realloc:NEAR
;	COMDAT ?Add@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEHAAUCONTEXT@CHtmlToRtf@@@Z
_TEXT	SEGMENT
_t$ = 8
_this$ = -12
_aT$82266 = -8
_nNewAllocSize$82267 = -4
?Add@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEHAAUCONTEXT@CHtmlToRtf@@@Z PROC NEAR ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::Add, COMDAT

; 2130 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2131 : 		if(m_nSize == m_nAllocSize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $L82265

; 2133 : 			T* aT;
; 2134 : 			int nNewAllocSize = (m_nAllocSize == 0) ? 1 : (m_nSize * 2);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $L83427
	mov	DWORD PTR -16+[ebp], 1
	jmp	SHORT $L83428
$L83427:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 1
	mov	DWORD PTR -16+[ebp], edx
$L83428:
	mov	eax, DWORD PTR -16+[ebp]
	mov	DWORD PTR _nNewAllocSize$82267[ebp], eax

; 2135 : 			aT = (T*)realloc(m_aT, nNewAllocSize * sizeof(T));

	mov	ecx, DWORD PTR _nNewAllocSize$82267[ebp]
	imul	ecx, 44					; 0000002cH
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _aT$82266[ebp], eax

; 2136 : 			if(aT == NULL)

	cmp	DWORD PTR _aT$82266[ebp], 0
	jne	SHORT $L82270

; 2137 : 				return FALSE;

	xor	eax, eax
	jmp	SHORT $L82264
$L82270:

; 2138 : 			m_nAllocSize = nNewAllocSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _nNewAllocSize$82267[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2139 : 			m_aT = aT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _aT$82266[ebp]
	mov	DWORD PTR [eax], ecx
$L82265:

; 2141 : 		m_nSize++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2142 : 		SetAtIndex(m_nSize - 1, t);

	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAtIndex@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEXHAAUCONTEXT@CHtmlToRtf@@@Z ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::SetAtIndex

; 2143 : 		return TRUE;

	mov	eax, 1
$L82264:

; 2144 : 	}

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEHAAUCONTEXT@CHtmlToRtf@@@Z ENDP ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::Add
_TEXT	ENDS
PUBLIC	??_GCONTEXT@CHtmlToRtf@@QAEPAXI@Z		; CHtmlToRtf::CONTEXT::`scalar deleting destructor'
EXTRN	__imp__memmove:NEAR
;	COMDAT ?RemoveAt@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEHH@Z
_TEXT	SEGMENT
_nIndex$ = 8
_this$ = -4
?RemoveAt@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEHH@Z PROC NEAR ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::RemoveAt, COMDAT

; 2153 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2154 : 		if(nIndex != (m_nSize - 1))

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	cmp	DWORD PTR _nIndex$[ebp], ecx
	je	SHORT $L82273

; 2156 : 			m_aT[nIndex].~T();

	push	0
	mov	edx, DWORD PTR _nIndex$[ebp]
	imul	edx, 44					; 0000002cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, edx
	call	??_GCONTEXT@CHtmlToRtf@@QAEPAXI@Z	; CHtmlToRtf::CONTEXT::`scalar deleting destructor'

; 2157 : 			memmove((void*)&m_aT[nIndex], (void*)&m_aT[nIndex + 1], (m_nSize - (nIndex + 1)) * sizeof(T));

	mov	ecx, DWORD PTR _nIndex$[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, ecx
	imul	eax, 44					; 0000002cH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _nIndex$[ebp]
	add	ecx, 1
	imul	ecx, 44					; 0000002cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	push	eax
	mov	ecx, DWORD PTR _nIndex$[ebp]
	imul	ecx, 44					; 0000002cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__chkesp
$L82273:

; 2159 : 		m_nSize--;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx

; 2160 : 		return TRUE;

	mov	eax, 1

; 2161 : 	}

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveAt@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEHH@Z ENDP ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::RemoveAt
_TEXT	ENDS
PUBLIC	??_C@_0CA@ODKD@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@ ; `string'
PUBLIC	??_C@_0EK@FAHJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
;	COMDAT ??_C@_0EK@FAHJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@
; File C:\Program Files (x86)\Microsoft Visual Studio\VC98\ATL\INCLUDE\atlbase.h
_DATA	SEGMENT
??_C@_0EK@FAHJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ DB 'C:\Progra'
	DB	'm Files (x86)\Microsoft Visual Studio\VC98\ATL\INCLUDE\atlbas'
	DB	'e.h', 00H					; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CA@ODKD@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@
_DATA	SEGMENT
??_C@_0CA@ODKD@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@ DB 'n'
	DB	'Index >= 0 && nIndex < m_nSize', 00H	; `string'
_DATA	ENDS
;	COMDAT ??A?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QBEAAUCONTEXT@CHtmlToRtf@@H@Z
_TEXT	SEGMENT
_nIndex$ = 8
_this$ = -4
??A?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QBEAAUCONTEXT@CHtmlToRtf@@H@Z PROC NEAR ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::operator[], COMDAT

; 2175 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$L82279:

; 2176 : 		ATLASSERT(nIndex >= 0 && nIndex < m_nSize);

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $L82283
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $L82282
$L82283:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_0CA@ODKD@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@ ; `string'
	push	0
	push	2176					; 00000880H
	push	OFFSET FLAT:??_C@_0EK@FAHJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__chkesp
	cmp	eax, 1
	jne	SHORT $L82282
	int	3
$L82282:
	xor	edx, edx
	test	edx, edx
	jne	SHORT $L82279

; 2177 : 		return m_aT[nIndex];

	mov	eax, DWORD PTR _nIndex$[ebp]
	imul	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	eax, edx

; 2178 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QBEAAUCONTEXT@CHtmlToRtf@@H@Z ENDP ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::operator[]
_TEXT	ENDS
;	COMDAT ??_GLINK@CHtmlToRtf@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GLINK@CHtmlToRtf@@QAEPAXI@Z PROC NEAR		; CHtmlToRtf::LINK::`scalar deleting destructor', COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1LINK@CHtmlToRtf@@QAE@XZ		; CHtmlToRtf::LINK::~LINK
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	test	eax, eax
	je	SHORT $L82297
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L82297:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GLINK@CHtmlToRtf@@QAEPAXI@Z ENDP			; CHtmlToRtf::LINK::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT ??_GCONTEXT@CHtmlToRtf@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8
_this$ = -4
??_GCONTEXT@CHtmlToRtf@@QAEPAXI@Z PROC NEAR		; CHtmlToRtf::CONTEXT::`scalar deleting destructor', COMDAT
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CONTEXT@CHtmlToRtf@@QAE@XZ		; CHtmlToRtf::CONTEXT::~CONTEXT
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	test	eax, eax
	je	SHORT $L82300
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$L82300:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCONTEXT@CHtmlToRtf@@QAEPAXI@Z ENDP			; CHtmlToRtf::CONTEXT::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?SetAtIndex@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEXHAAUtagLOGFONTW@@@Z ; ATL::CSimpleArray<tagLOGFONTW>::SetAtIndex
;	COMDAT ?Add@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEHAAUtagLOGFONTW@@@Z
_TEXT	SEGMENT
_this$ = -12
_aT$82333 = -8
_nNewAllocSize$82334 = -4
_t$ = 8
?Add@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEHAAUtagLOGFONTW@@@Z PROC NEAR ; ATL::CSimpleArray<tagLOGFONTW>::Add, COMDAT

; 2130 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2131 : 		if(m_nSize == m_nAllocSize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $L82332

; 2133 : 			T* aT;
; 2134 : 			int nNewAllocSize = (m_nAllocSize == 0) ? 1 : (m_nSize * 2);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $L83439
	mov	DWORD PTR -16+[ebp], 1
	jmp	SHORT $L83440
$L83439:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 1
	mov	DWORD PTR -16+[ebp], edx
$L83440:
	mov	eax, DWORD PTR -16+[ebp]
	mov	DWORD PTR _nNewAllocSize$82334[ebp], eax

; 2135 : 			aT = (T*)realloc(m_aT, nNewAllocSize * sizeof(T));

	mov	ecx, DWORD PTR _nNewAllocSize$82334[ebp]
	imul	ecx, 92					; 0000005cH
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _aT$82333[ebp], eax

; 2136 : 			if(aT == NULL)

	cmp	DWORD PTR _aT$82333[ebp], 0
	jne	SHORT $L82337

; 2137 : 				return FALSE;

	xor	eax, eax
	jmp	SHORT $L82331
$L82337:

; 2138 : 			m_nAllocSize = nNewAllocSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _nNewAllocSize$82334[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2139 : 			m_aT = aT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _aT$82333[ebp]
	mov	DWORD PTR [eax], ecx
$L82332:

; 2141 : 		m_nSize++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2142 : 		SetAtIndex(m_nSize - 1, t);

	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAtIndex@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEXHAAUtagLOGFONTW@@@Z ; ATL::CSimpleArray<tagLOGFONTW>::SetAtIndex

; 2143 : 		return TRUE;

	mov	eax, 1
$L82331:

; 2144 : 	}

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEHAAUtagLOGFONTW@@@Z ENDP ; ATL::CSimpleArray<tagLOGFONTW>::Add
_TEXT	ENDS
;	COMDAT ??A?$CSimpleArray@UtagLOGFONTW@@@ATL@@QBEAAUtagLOGFONTW@@H@Z
_TEXT	SEGMENT
_this$ = -4
_nIndex$ = 8
??A?$CSimpleArray@UtagLOGFONTW@@@ATL@@QBEAAUtagLOGFONTW@@H@Z PROC NEAR ; ATL::CSimpleArray<tagLOGFONTW>::operator[], COMDAT

; 2175 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$L82340:

; 2176 : 		ATLASSERT(nIndex >= 0 && nIndex < m_nSize);

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $L82344
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $L82343
$L82344:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_0CA@ODKD@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@ ; `string'
	push	0
	push	2176					; 00000880H
	push	OFFSET FLAT:??_C@_0EK@FAHJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__chkesp
	cmp	eax, 1
	jne	SHORT $L82343
	int	3
$L82343:
	xor	edx, edx
	test	edx, edx
	jne	SHORT $L82340

; 2177 : 		return m_aT[nIndex];

	mov	eax, DWORD PTR _nIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	eax, edx

; 2178 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CSimpleArray@UtagLOGFONTW@@@ATL@@QBEAAUtagLOGFONTW@@H@Z ENDP ; ATL::CSimpleArray<tagLOGFONTW>::operator[]
_TEXT	ENDS
PUBLIC	?SetAtIndex@?$CSimpleArray@K@ATL@@QAEXHAAK@Z	; ATL::CSimpleArray<unsigned long>::SetAtIndex
;	COMDAT ?Add@?$CSimpleArray@K@ATL@@QAEHAAK@Z
_TEXT	SEGMENT
_this$ = -12
_aT$82348 = -8
_nNewAllocSize$82349 = -4
_t$ = 8
?Add@?$CSimpleArray@K@ATL@@QAEHAAK@Z PROC NEAR		; ATL::CSimpleArray<unsigned long>::Add, COMDAT

; 2130 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2131 : 		if(m_nSize == m_nAllocSize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $L82347

; 2133 : 			T* aT;
; 2134 : 			int nNewAllocSize = (m_nAllocSize == 0) ? 1 : (m_nSize * 2);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $L83445
	mov	DWORD PTR -16+[ebp], 1
	jmp	SHORT $L83446
$L83445:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 1
	mov	DWORD PTR -16+[ebp], edx
$L83446:
	mov	eax, DWORD PTR -16+[ebp]
	mov	DWORD PTR _nNewAllocSize$82349[ebp], eax

; 2135 : 			aT = (T*)realloc(m_aT, nNewAllocSize * sizeof(T));

	mov	ecx, DWORD PTR _nNewAllocSize$82349[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _aT$82348[ebp], eax

; 2136 : 			if(aT == NULL)

	cmp	DWORD PTR _aT$82348[ebp], 0
	jne	SHORT $L82352

; 2137 : 				return FALSE;

	xor	eax, eax
	jmp	SHORT $L82346
$L82352:

; 2138 : 			m_nAllocSize = nNewAllocSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _nNewAllocSize$82349[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2139 : 			m_aT = aT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _aT$82348[ebp]
	mov	DWORD PTR [eax], ecx
$L82347:

; 2141 : 		m_nSize++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2142 : 		SetAtIndex(m_nSize - 1, t);

	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAtIndex@?$CSimpleArray@K@ATL@@QAEXHAAK@Z ; ATL::CSimpleArray<unsigned long>::SetAtIndex

; 2143 : 		return TRUE;

	mov	eax, 1
$L82346:

; 2144 : 	}

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CSimpleArray@K@ATL@@QAEHAAK@Z ENDP		; ATL::CSimpleArray<unsigned long>::Add
_TEXT	ENDS
;	COMDAT ??A?$CSimpleArray@K@ATL@@QBEAAKH@Z
_TEXT	SEGMENT
_this$ = -4
_nIndex$ = 8
??A?$CSimpleArray@K@ATL@@QBEAAKH@Z PROC NEAR		; ATL::CSimpleArray<unsigned long>::operator[], COMDAT

; 2175 : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$L82355:

; 2176 : 		ATLASSERT(nIndex >= 0 && nIndex < m_nSize);

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $L82359
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $L82358
$L82359:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_0CA@ODKD@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@ ; `string'
	push	0
	push	2176					; 00000880H
	push	OFFSET FLAT:??_C@_0EK@FAHJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__chkesp
	cmp	eax, 1
	jne	SHORT $L82358
	int	3
$L82358:
	xor	edx, edx
	test	edx, edx
	jne	SHORT $L82355

; 2177 : 		return m_aT[nIndex];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 2178 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CSimpleArray@K@ATL@@QBEAAKH@Z ENDP			; ATL::CSimpleArray<unsigned long>::operator[]
_TEXT	ENDS
PUBLIC	?SetAtIndex@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEXHAAULINK@CHtmlToRtf@@@Z ; ATL::CSimpleArray<CHtmlToRtf::LINK>::SetAtIndex
;	COMDAT ?Add@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEHAAULINK@CHtmlToRtf@@@Z
_TEXT	SEGMENT
_this$ = -12
_aT$82363 = -8
_nNewAllocSize$82364 = -4
_t$ = 8
?Add@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEHAAULINK@CHtmlToRtf@@@Z PROC NEAR ; ATL::CSimpleArray<CHtmlToRtf::LINK>::Add, COMDAT

; 2130 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx

; 2131 : 		if(m_nSize == m_nAllocSize)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $L82362

; 2133 : 			T* aT;
; 2134 : 			int nNewAllocSize = (m_nAllocSize == 0) ? 1 : (m_nSize * 2);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $L83451
	mov	DWORD PTR -16+[ebp], 1
	jmp	SHORT $L83452
$L83451:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 1
	mov	DWORD PTR -16+[ebp], edx
$L83452:
	mov	eax, DWORD PTR -16+[ebp]
	mov	DWORD PTR _nNewAllocSize$82364[ebp], eax

; 2135 : 			aT = (T*)realloc(m_aT, nNewAllocSize * sizeof(T));

	mov	ecx, DWORD PTR _nNewAllocSize$82364[ebp]
	imul	ecx, 12					; 0000000cH
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__chkesp
	mov	DWORD PTR _aT$82363[ebp], eax

; 2136 : 			if(aT == NULL)

	cmp	DWORD PTR _aT$82363[ebp], 0
	jne	SHORT $L82367

; 2137 : 				return FALSE;

	xor	eax, eax
	jmp	SHORT $L82361
$L82367:

; 2138 : 			m_nAllocSize = nNewAllocSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _nNewAllocSize$82364[ebp]
	mov	DWORD PTR [ecx+8], edx

; 2139 : 			m_aT = aT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _aT$82363[ebp]
	mov	DWORD PTR [eax], ecx
$L82362:

; 2141 : 		m_nSize++;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2142 : 		SetAtIndex(m_nSize - 1, t);

	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetAtIndex@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEXHAAULINK@CHtmlToRtf@@@Z ; ATL::CSimpleArray<CHtmlToRtf::LINK>::SetAtIndex

; 2143 : 		return TRUE;

	mov	eax, 1
$L82361:

; 2144 : 	}

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEHAAULINK@CHtmlToRtf@@@Z ENDP ; ATL::CSimpleArray<CHtmlToRtf::LINK>::Add
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8
_i$82378 = -4
?RemoveAll@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEXXZ PROC NEAR ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::RemoveAll, COMDAT

; 2163 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx

; 2164 : 		if(m_aT != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $L82377

; 2166 : 			for(int i = 0; i < m_nSize; i++)

	mov	DWORD PTR _i$82378[ebp], 0
	jmp	SHORT $L82379
$L82380:
	mov	ecx, DWORD PTR _i$82378[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$82378[ebp], ecx
$L82379:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$82378[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jge	SHORT $L82381

; 2167 : 				m_aT[i].~T();

	push	0
	mov	ecx, DWORD PTR _i$82378[ebp]
	imul	ecx, 44					; 0000002cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	ecx, eax
	call	??_GCONTEXT@CHtmlToRtf@@QAEPAXI@Z	; CHtmlToRtf::CONTEXT::`scalar deleting destructor'
	jmp	SHORT $L82380
$L82381:

; 2168 : 			free(m_aT);

	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__chkesp

; 2169 : 			m_aT = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$L82377:

; 2171 : 		m_nSize = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 2172 : 		m_nAllocSize = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 2173 : 	}

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	0
?RemoveAll@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEXXZ ENDP ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::RemoveAll
_TEXT	ENDS
PUBLIC	??0Wrapper@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@AAUCONTEXT@CHtmlToRtf@@@Z ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::Wrapper::Wrapper
PUBLIC	??2Wrapper@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@SAPAXIPAUCONTEXT@CHtmlToRtf@@@Z ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::Wrapper::operator new
;	COMDAT ?SetAtIndex@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEXHAAUCONTEXT@CHtmlToRtf@@@Z
_TEXT	SEGMENT
_nIndex$ = 8
_t$ = 12
_this$ = -8
$T83457 = -4
?SetAtIndex@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEXHAAUCONTEXT@CHtmlToRtf@@@Z PROC NEAR ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::SetAtIndex, COMDAT

; 2199 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$L82384:

; 2200 : 		ATLASSERT(nIndex >= 0 && nIndex < m_nSize);

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $L82388
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $L82387
$L82388:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_0CA@ODKD@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@ ; `string'
	push	0
	push	2200					; 00000898H
	push	OFFSET FLAT:??_C@_0EK@FAHJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__chkesp
	cmp	eax, 1
	jne	SHORT $L82387
	int	3
$L82387:
	xor	edx, edx
	test	edx, edx
	jne	SHORT $L82384

; 2201 : 		new(&m_aT[nIndex]) Wrapper(t);

	mov	eax, DWORD PTR _nIndex$[ebp]
	imul	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	push	edx
	push	44					; 0000002cH
	call	??2Wrapper@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@SAPAXIPAUCONTEXT@CHtmlToRtf@@@Z ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::Wrapper::operator new
	add	esp, 8
	mov	DWORD PTR $T83457[ebp], eax
	cmp	DWORD PTR $T83457[ebp], 0
	je	SHORT $L83458
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T83457[ebp]
	call	??0Wrapper@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@AAUCONTEXT@CHtmlToRtf@@@Z ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::Wrapper::Wrapper
	mov	DWORD PTR -12+[ebp], eax
	jmp	SHORT $L83459
$L83458:
	mov	DWORD PTR -12+[ebp], 0
$L83459:

; 2202 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetAtIndex@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAEXHAAUCONTEXT@CHtmlToRtf@@@Z ENDP ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::SetAtIndex
_TEXT	ENDS
PUBLIC	??2Wrapper@?$CSimpleArray@UtagLOGFONTW@@@ATL@@SAPAXIPAUtagLOGFONTW@@@Z ; ATL::CSimpleArray<tagLOGFONTW>::Wrapper::operator new
PUBLIC	??0Wrapper@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@AAUtagLOGFONTW@@@Z ; ATL::CSimpleArray<tagLOGFONTW>::Wrapper::Wrapper
;	COMDAT ?SetAtIndex@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEXHAAUtagLOGFONTW@@@Z
_TEXT	SEGMENT
_this$ = -8
$T83462 = -4
_nIndex$ = 8
_t$ = 12
?SetAtIndex@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEXHAAUtagLOGFONTW@@@Z PROC NEAR ; ATL::CSimpleArray<tagLOGFONTW>::SetAtIndex, COMDAT

; 2199 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$L82408:

; 2200 : 		ATLASSERT(nIndex >= 0 && nIndex < m_nSize);

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $L82412
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $L82411
$L82412:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_0CA@ODKD@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@ ; `string'
	push	0
	push	2200					; 00000898H
	push	OFFSET FLAT:??_C@_0EK@FAHJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__chkesp
	cmp	eax, 1
	jne	SHORT $L82411
	int	3
$L82411:
	xor	edx, edx
	test	edx, edx
	jne	SHORT $L82408

; 2201 : 		new(&m_aT[nIndex]) Wrapper(t);

	mov	eax, DWORD PTR _nIndex$[ebp]
	imul	eax, 92					; 0000005cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	push	edx
	push	92					; 0000005cH
	call	??2Wrapper@?$CSimpleArray@UtagLOGFONTW@@@ATL@@SAPAXIPAUtagLOGFONTW@@@Z ; ATL::CSimpleArray<tagLOGFONTW>::Wrapper::operator new
	add	esp, 8
	mov	DWORD PTR $T83462[ebp], eax
	cmp	DWORD PTR $T83462[ebp], 0
	je	SHORT $L83463
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T83462[ebp]
	call	??0Wrapper@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@AAUtagLOGFONTW@@@Z ; ATL::CSimpleArray<tagLOGFONTW>::Wrapper::Wrapper
	mov	DWORD PTR -12+[ebp], eax
	jmp	SHORT $L83464
$L83463:
	mov	DWORD PTR -12+[ebp], 0
$L83464:

; 2202 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetAtIndex@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAEXHAAUtagLOGFONTW@@@Z ENDP ; ATL::CSimpleArray<tagLOGFONTW>::SetAtIndex
_TEXT	ENDS
PUBLIC	??2Wrapper@?$CSimpleArray@K@ATL@@SAPAXIPAK@Z	; ATL::CSimpleArray<unsigned long>::Wrapper::operator new
PUBLIC	??0Wrapper@?$CSimpleArray@K@ATL@@QAE@AAK@Z	; ATL::CSimpleArray<unsigned long>::Wrapper::Wrapper
;	COMDAT ?SetAtIndex@?$CSimpleArray@K@ATL@@QAEXHAAK@Z
_TEXT	SEGMENT
_this$ = -8
$T83467 = -4
_nIndex$ = 8
_t$ = 12
?SetAtIndex@?$CSimpleArray@K@ATL@@QAEXHAAK@Z PROC NEAR	; ATL::CSimpleArray<unsigned long>::SetAtIndex, COMDAT

; 2199 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$L82424:

; 2200 : 		ATLASSERT(nIndex >= 0 && nIndex < m_nSize);

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $L82428
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $L82427
$L82428:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_0CA@ODKD@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@ ; `string'
	push	0
	push	2200					; 00000898H
	push	OFFSET FLAT:??_C@_0EK@FAHJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__chkesp
	cmp	eax, 1
	jne	SHORT $L82427
	int	3
$L82427:
	xor	edx, edx
	test	edx, edx
	jne	SHORT $L82424

; 2201 : 		new(&m_aT[nIndex]) Wrapper(t);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _nIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	push	eax
	push	4
	call	??2Wrapper@?$CSimpleArray@K@ATL@@SAPAXIPAK@Z ; ATL::CSimpleArray<unsigned long>::Wrapper::operator new
	add	esp, 8
	mov	DWORD PTR $T83467[ebp], eax
	cmp	DWORD PTR $T83467[ebp], 0
	je	SHORT $L83468
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T83467[ebp]
	call	??0Wrapper@?$CSimpleArray@K@ATL@@QAE@AAK@Z ; ATL::CSimpleArray<unsigned long>::Wrapper::Wrapper
	mov	DWORD PTR -12+[ebp], eax
	jmp	SHORT $L83469
$L83468:
	mov	DWORD PTR -12+[ebp], 0
$L83469:

; 2202 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetAtIndex@?$CSimpleArray@K@ATL@@QAEXHAAK@Z ENDP	; ATL::CSimpleArray<unsigned long>::SetAtIndex
_TEXT	ENDS
PUBLIC	??2Wrapper@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@SAPAXIPAULINK@CHtmlToRtf@@@Z ; ATL::CSimpleArray<CHtmlToRtf::LINK>::Wrapper::operator new
PUBLIC	??0Wrapper@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@AAULINK@CHtmlToRtf@@@Z ; ATL::CSimpleArray<CHtmlToRtf::LINK>::Wrapper::Wrapper
;	COMDAT ?SetAtIndex@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEXHAAULINK@CHtmlToRtf@@@Z
_TEXT	SEGMENT
_this$ = -8
$T83472 = -4
_nIndex$ = 8
_t$ = 12
?SetAtIndex@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEXHAAULINK@CHtmlToRtf@@@Z PROC NEAR ; ATL::CSimpleArray<CHtmlToRtf::LINK>::SetAtIndex, COMDAT

; 2199 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$L82440:

; 2200 : 		ATLASSERT(nIndex >= 0 && nIndex < m_nSize);

	cmp	DWORD PTR _nIndex$[ebp], 0
	jl	SHORT $L82444
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nIndex$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $L82443
$L82444:
	mov	esi, esp
	push	OFFSET FLAT:??_C@_0CA@ODKD@nIndex?5?$DO?$DN?50?5?$CG?$CG?5nIndex?5?$DM?5m_nSize?$AA@ ; `string'
	push	0
	push	2200					; 00000898H
	push	OFFSET FLAT:??_C@_0EK@FAHJ@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsoft@ ; `string'
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__chkesp
	cmp	eax, 1
	jne	SHORT $L82443
	int	3
$L82443:
	xor	edx, edx
	test	edx, edx
	jne	SHORT $L82440

; 2201 : 		new(&m_aT[nIndex]) Wrapper(t);

	mov	eax, DWORD PTR _nIndex$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, eax
	push	edx
	push	12					; 0000000cH
	call	??2Wrapper@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@SAPAXIPAULINK@CHtmlToRtf@@@Z ; ATL::CSimpleArray<CHtmlToRtf::LINK>::Wrapper::operator new
	add	esp, 8
	mov	DWORD PTR $T83472[ebp], eax
	cmp	DWORD PTR $T83472[ebp], 0
	je	SHORT $L83473
	mov	eax, DWORD PTR _t$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T83472[ebp]
	call	??0Wrapper@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@AAULINK@CHtmlToRtf@@@Z ; ATL::CSimpleArray<CHtmlToRtf::LINK>::Wrapper::Wrapper
	mov	DWORD PTR -12+[ebp], eax
	jmp	SHORT $L83474
$L83473:
	mov	DWORD PTR -12+[ebp], 0
$L83474:

; 2202 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetAtIndex@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAEXHAAULINK@CHtmlToRtf@@@Z ENDP ; ATL::CSimpleArray<CHtmlToRtf::LINK>::SetAtIndex
_TEXT	ENDS
;	COMDAT ??0Wrapper@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@AAUCONTEXT@CHtmlToRtf@@@Z
_TEXT	SEGMENT
__t$ = 8
_this$ = -4
??0Wrapper@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@AAUCONTEXT@CHtmlToRtf@@@Z PROC NEAR ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::Wrapper::Wrapper, COMDAT

; 2189 : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CONTEXT@CHtmlToRtf@@QAE@ABU01@@Z	; CHtmlToRtf::CONTEXT::CONTEXT

; 2190 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Wrapper@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@QAE@AAUCONTEXT@CHtmlToRtf@@@Z ENDP ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::Wrapper::Wrapper
_TEXT	ENDS
;	COMDAT ??0Wrapper@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@AAUtagLOGFONTW@@@Z
_TEXT	SEGMENT
_this$ = -4
__t$ = 8
??0Wrapper@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@AAUtagLOGFONTW@@@Z PROC NEAR ; ATL::CSimpleArray<tagLOGFONTW>::Wrapper::Wrapper, COMDAT

; 2189 : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	esi, DWORD PTR __t$[ebp]
	mov	ecx, 23					; 00000017H
	mov	edi, DWORD PTR _this$[ebp]
	rep movsd

; 2190 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0Wrapper@?$CSimpleArray@UtagLOGFONTW@@@ATL@@QAE@AAUtagLOGFONTW@@@Z ENDP ; ATL::CSimpleArray<tagLOGFONTW>::Wrapper::Wrapper
_TEXT	ENDS
;	COMDAT ??0Wrapper@?$CSimpleArray@K@ATL@@QAE@AAK@Z
_TEXT	SEGMENT
_this$ = -4
__t$ = 8
??0Wrapper@?$CSimpleArray@K@ATL@@QAE@AAK@Z PROC NEAR	; ATL::CSimpleArray<unsigned long>::Wrapper::Wrapper, COMDAT

; 2189 : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __t$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 2190 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Wrapper@?$CSimpleArray@K@ATL@@QAE@AAK@Z ENDP		; ATL::CSimpleArray<unsigned long>::Wrapper::Wrapper
_TEXT	ENDS
;	COMDAT ??0Wrapper@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@AAULINK@CHtmlToRtf@@@Z
_TEXT	SEGMENT
_this$ = -4
__t$ = 8
??0Wrapper@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@AAULINK@CHtmlToRtf@@@Z PROC NEAR ; ATL::CSimpleArray<CHtmlToRtf::LINK>::Wrapper::Wrapper, COMDAT

; 2189 : 		{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __t$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0LINK@CHtmlToRtf@@QAE@ABU01@@Z	; CHtmlToRtf::LINK::LINK

; 2190 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__chkesp
	mov	esp, ebp
	pop	ebp
	ret	4
??0Wrapper@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@QAE@AAULINK@CHtmlToRtf@@@Z ENDP ; ATL::CSimpleArray<CHtmlToRtf::LINK>::Wrapper::Wrapper
_TEXT	ENDS
;	COMDAT ??2Wrapper@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@SAPAXIPAUCONTEXT@CHtmlToRtf@@@Z
_TEXT	SEGMENT
_p$ = 12
??2Wrapper@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@SAPAXIPAUCONTEXT@CHtmlToRtf@@@Z PROC NEAR ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::Wrapper::operator new, COMDAT

; 2192 : 		void *operator new(size_t, _Ty* p)

	push	ebp
	mov	ebp, esp

; 2193 : 		{
; 2194 : 			return p;

	mov	eax, DWORD PTR _p$[ebp]

; 2195 : 		}

	pop	ebp
	ret	0
??2Wrapper@?$CSimpleArray@UCONTEXT@CHtmlToRtf@@@ATL@@SAPAXIPAUCONTEXT@CHtmlToRtf@@@Z ENDP ; ATL::CSimpleArray<CHtmlToRtf::CONTEXT>::Wrapper::operator new
_TEXT	ENDS
;	COMDAT ??2Wrapper@?$CSimpleArray@UtagLOGFONTW@@@ATL@@SAPAXIPAUtagLOGFONTW@@@Z
_TEXT	SEGMENT
_p$ = 12
??2Wrapper@?$CSimpleArray@UtagLOGFONTW@@@ATL@@SAPAXIPAUtagLOGFONTW@@@Z PROC NEAR ; ATL::CSimpleArray<tagLOGFONTW>::Wrapper::operator new, COMDAT

; 2192 : 		void *operator new(size_t, _Ty* p)

	push	ebp
	mov	ebp, esp

; 2193 : 		{
; 2194 : 			return p;

	mov	eax, DWORD PTR _p$[ebp]

; 2195 : 		}

	pop	ebp
	ret	0
??2Wrapper@?$CSimpleArray@UtagLOGFONTW@@@ATL@@SAPAXIPAUtagLOGFONTW@@@Z ENDP ; ATL::CSimpleArray<tagLOGFONTW>::Wrapper::operator new
_TEXT	ENDS
;	COMDAT ??2Wrapper@?$CSimpleArray@K@ATL@@SAPAXIPAK@Z
_TEXT	SEGMENT
_p$ = 12
??2Wrapper@?$CSimpleArray@K@ATL@@SAPAXIPAK@Z PROC NEAR	; ATL::CSimpleArray<unsigned long>::Wrapper::operator new, COMDAT

; 2192 : 		void *operator new(size_t, _Ty* p)

	push	ebp
	mov	ebp, esp

; 2193 : 		{
; 2194 : 			return p;

	mov	eax, DWORD PTR _p$[ebp]

; 2195 : 		}

	pop	ebp
	ret	0
??2Wrapper@?$CSimpleArray@K@ATL@@SAPAXIPAK@Z ENDP	; ATL::CSimpleArray<unsigned long>::Wrapper::operator new
_TEXT	ENDS
;	COMDAT ??2Wrapper@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@SAPAXIPAULINK@CHtmlToRtf@@@Z
_TEXT	SEGMENT
_p$ = 12
??2Wrapper@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@SAPAXIPAULINK@CHtmlToRtf@@@Z PROC NEAR ; ATL::CSimpleArray<CHtmlToRtf::LINK>::Wrapper::operator new, COMDAT

; 2192 : 		void *operator new(size_t, _Ty* p)

	push	ebp
	mov	ebp, esp

; 2193 : 		{
; 2194 : 			return p;

	mov	eax, DWORD PTR _p$[ebp]

; 2195 : 		}

	pop	ebp
	ret	0
??2Wrapper@?$CSimpleArray@ULINK@CHtmlToRtf@@@ATL@@SAPAXIPAULINK@CHtmlToRtf@@@Z ENDP ; ATL::CSimpleArray<CHtmlToRtf::LINK>::Wrapper::operator new
_TEXT	ENDS
END
